<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="xs3p.xsl"?>
<!-- Distribution Statement A, Approved for public release: distribution unlimited. -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
            xmlns="http://www.wsmr.army.mil/RCC/schemas/MDL" 
            xmlns:mdl="http://www.wsmr.army.mil/RCC/schemas/MDL" 
            xmlns:tmatsCommon="http://www.wsmr.army.mil/RCC/schemas/TMATS/TmatsCommonTypes"
            xmlns:tmatsP="http://www.wsmr.army.mil/RCC/schemas/TMATS/TmatsPGroup"
            xmlns:tmatsD="http://www.wsmr.army.mil/RCC/schemas/TMATS/TmatsDGroup"
            targetNamespace="http://www.wsmr.army.mil/RCC/schemas/MDL"
            elementFormDefault="qualified" attributeFormDefault="unqualified">

  <xsd:import namespace="http://www.wsmr.army.mil/RCC/schemas/TMATS/TmatsCommonTypes" schemaLocation="TmatsCommonTypes.xsd"/>
  <xsd:import namespace="http://www.wsmr.army.mil/RCC/schemas/TMATS/TmatsPGroup" schemaLocation="TmatsPGroup.xsd"/>
  <xsd:import namespace="http://www.wsmr.army.mil/RCC/schemas/TMATS/TmatsDGroup" schemaLocation="TmatsDGroup.xsd"/>

  <xsd:element name="MDLRoot" type="MDLRootType">

    <xsd:key name="MeasurementKey">
      <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="MeasurementKeyRef" refer="mdl:MeasurementKey">
      <xsd:selector xpath=".//mdl:MeasurementRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="UniqueDerivedUnitSymbol">
      <xsd:selector xpath=".//mdl:Units/mdl:DerivedUnit"/>
      <xsd:field xpath="mdl:Symbol"/>
    </xsd:unique>

    <xsd:unique name="UniqueDerivedUnitName">
      <xsd:selector xpath=".//mdl:Units/mdl:DerivedUnit"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:key name="DerivedUnitKey">
      <xsd:selector xpath=".//mdl:DerivedUnit"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DerivedUnitKeyRef" refer="mdl:DerivedUnitKey">
      <xsd:selector xpath=".//mdl:UnitRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DataStreamKey">
      <xsd:selector xpath=".//mdl:DataStream"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DataStreamKeyRef" refer="mdl:DataStreamKey">
      <xsd:selector xpath=".//mdl:DataStreamRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="UniqueNetworkName">
      <xsd:selector xpath=".//mdl:Network"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:key name="NetworkKey">
      <xsd:selector xpath=".//mdl:Network"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="NetworkKeyRef" refer="mdl:NetworkKey">
      <xsd:selector xpath=".//mdl:NetworkRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="NetworkNodeKey">
      <xsd:selector xpath=".//mdl:NetworkNode"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="NetworkNodeKeyRef" refer="mdl:NetworkNodeKey">
      <xsd:selector xpath=".//mdl:NetworkNodeRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="NetworkInterfaceKey">
      <xsd:selector xpath=".//mdl:NetworkInterface"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="NetworkInterfaceKeyRef" refer="mdl:NetworkInterfaceKey">
      <xsd:selector xpath=".//mdl:NetworkInterfaceRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="VirtualNetworkInterfaceKey">
      <xsd:selector xpath=".//mdl:VirtualNetworkInterface"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="VirtualNetworkInterfaceKeyRef" refer="mdl:VirtualNetworkInterfaceKey">
      <xsd:selector xpath=".//mdl:VirtualNetworkInterfaceRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="TmNSAppKey">
      <xsd:selector xpath=".//mdl:TmNSApp"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="TmNSAppKeyRef" refer="mdl:TmNSAppKey">
      <xsd:selector xpath=".//mdl:TmNSAppRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="SSTChannelKey">
      <xsd:selector xpath=".//mdl:SSTRxChannel |.//mdl:SSTTxChannel |.//mdl:Channel"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="SSTChannelKeyRef" refer="mdl:SSTChannelKey">
      <xsd:selector xpath=".//mdl:SSTChannelRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PortMappingKey">
      <xsd:selector xpath=".//mdl:PortMapping"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PortMappingKeyRef" refer="mdl:PortMappingKey">
      <xsd:selector xpath=".//mdl:PortMappingRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PortKey">
      <xsd:selector xpath=".//mdl:Port"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PortKeyRef" refer="mdl:PortKey">
      <xsd:selector xpath=".//mdl:PortRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PhysicalNetworkPortKey">
      <xsd:selector xpath=".//mdl:PhysicalNetworkPort"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PhysicalNetworkPortKeyRef" refer="mdl:PhysicalNetworkPortKey">
      <xsd:selector xpath=".//mdl:PhysicalNetworkPortRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PackageDefinitionKey">
      <xsd:selector xpath=".//mdl:PackageDefinition"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PackageDefinitionKeyRef" refer="mdl:PackageDefinitionKey">
      <xsd:selector xpath=".//mdl:PackageDefinitionRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="MessageDefinitionKey">
      <xsd:selector xpath=".//mdl:MessageDefinition"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="MessageDefinitionKeyRef" refer="mdl:MessageDefinitionKey">
      <xsd:selector xpath=".//mdl:MessageDefinitionRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="MessageGroupKey">
      <xsd:selector xpath=".//mdl:MessageGroup"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="MessageGroupKeyRef" refer="mdl:MessageGroupKey">
      <xsd:selector xpath=".//mdl:MessageGroupRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DataStreamMessageKey">
      <xsd:selector xpath=".//mdl:DataStreamMessage"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DataStreamMessageKeyRef" refer="mdl:DataStreamMessageKey">
      <xsd:selector xpath=".//mdl:DataStreamMessageRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="ChildRefKey">
      <xsd:selector xpath=".//mdl:Module | .//mdl:SubModule | .//mdl:DeviceModule | .//mdl:DeviceSubModule "/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="ChildRefKeyRef" refer="mdl:ChildRefKey">
      <xsd:selector xpath=".//mdl:ChildRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DSCPTableEntryKey">
      <xsd:selector xpath=".//mdl:DSCPTableEntry"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DSCPTableEntryKeyRef" refer="mdl:DSCPTableEntryKey">
      <xsd:selector xpath=".//mdl:DSCPTableEntryRef | .//mdl:VoiceDSCPTableEntryRef | .//mdl:ControlDSCPTableEntryRef | .//mdl:RadioControlLoopDSCPRef | .//mdl:RANCommandControlDSCPRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="UniqueDSCPValue">
      <xsd:selector xpath=".//mdl:DSCPTableEntry"/>
      <xsd:field xpath="mdl:DSCPValue"/>
    </xsd:unique>

    <xsd:unique name="UniqueSupportedMulticastAddress">
      <xsd:selector xpath=".//mdl:SupportedMulticastAddress"/>
      <xsd:field xpath="mdl:MulticastAddress"/>
    </xsd:unique>

    <xsd:unique name="UniqueTestMissionName">
      <xsd:selector xpath=".//mdl:TestMissions/mdl:TestMission"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="UniqueMeasurementDomainName">
      <xsd:selector xpath=".//mdl:MeasurementDomains/mdl:MeasurementDomain"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="UniqueQoSPolicyID">
      <xsd:selector xpath=".//mdl:QoSPolicies/mdl:QoSPolicy"/>
      <xsd:field xpath="mdl:QoSPolicyID"/>
    </xsd:unique>

    <xsd:unique name="UniqueRadioRFMACAddress">
      <xsd:selector xpath=".//mdl:TmNSRadio"/>
      <xsd:field xpath="mdl:RFMACAddress"/>
    </xsd:unique>

    <xsd:unique name="UniqueAntennaName">
      <xsd:annotation>
        <xsd:documentation>
          This constraint enforces the rule that an Antenna Name be
          unique within an MDL file.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:selector xpath=".//mdl:Antenna"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:key name="RANConfigurationKey">
      <xsd:selector xpath=".//mdl:RANConfiguration"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="RANConfigurationKeyRef" refer="mdl:RANConfigurationKey">
      <xsd:selector xpath=".//mdl:RANConfigurationRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="UniqueRANConfigurationName">
      <xsd:annotation>
        <xsd:documentation>
          This constraint enforces the rule that a RAN configuration
          Name be unique within an MDL file.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:selector xpath=".//mdl:RANConfigurations/mdl:RANConfiguration"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:key name="RadioLinkKey">
      <xsd:selector xpath=".//mdl:RadioLink"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="RadioLinkKeyRef" refer="mdl:RadioLinkKey">
      <xsd:selector xpath=".//mdl:RadioLinkRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="RadioGroupKey">
      <xsd:selector xpath=".//mdl:RadioGroup"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="RadioGroupKeyRef" refer="mdl:RadioGroupKey">
      <xsd:selector xpath=".//mdl:RadioGroupRef | .//mdl:JoinRadioGroupRef | .//mdl:DestinationRadioGroupRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="QoSPolicyKey">
      <xsd:selector xpath=".//mdl:QoSPolicy"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="QoSPolicyKeyRef" refer="mdl:QoSPolicyKey">
      <xsd:selector xpath=".//mdl:QoSPolicyRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="SLPKey">
      <xsd:selector xpath=".//mdl:ServiceLevelProfile"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="SLPKeyRef" refer="mdl:SLPKey">
      <xsd:selector xpath=".//mdl:SLPRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="TSSTunnelConnectionKey">
      <xsd:selector xpath=".//mdl:TSSTunnelConnection"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="TSSTunnelConnectionKeyRef" refer="mdl:TSSTunnelConnectionKey">
      <xsd:selector xpath=".//mdl:TSSTunnelConnectionRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="FunctionKey">
      <xsd:selector xpath=".//mdl:Function"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="FunctionKeyRef" refer="mdl:FunctionKey">
      <xsd:selector xpath=".//mdl:FunctionRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>
    
    <xsd:unique name="UniqueDSCPTableEntryName">
      <xsd:selector xpath=".//mdl:DSCPTableEntry"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="UniquePackageDefinitionID">
      <xsd:selector xpath=".//mdl:PackageDefinitions/mdl:PackageDefinition"/>
      <xsd:field xpath="mdl:PackageDefinitionID"/>
    </xsd:unique>

    <xsd:unique name="UniqueMessageDefinitionID">
      <xsd:selector xpath=".//mdl:MessageDefinitions/mdl:MessageDefinition"/>
      <xsd:field xpath="mdl:MessageDefinitionID"/>
    </xsd:unique>

    <xsd:unique name="UniqueMeasurementID">
      <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
      <xsd:field xpath="mdl:MeasurementID"/>
    </xsd:unique>
    
  </xsd:element>

  <xsd:complexType name="MDLRootType">
    <xsd:annotation>
      <xsd:documentation>
        The MDLRoot element is the root element of any MDL Instance
        Document.
      </xsd:documentation>
      <xsd:documentation>
        A note on conditional elements: The MDL schema is a
        system-level description.  Not all components require every element to
        properly configure.  In such cases, these elements are conditional.
        The documentation specifies when the conditional elements must and
        shall be present and processed.  Components not specifically called
        out in documentation of conditional elements shall not fail to
        configure if the particular conditional element is not present.
        Conversely, components that are called out in documentation of 
        conditional elements shall process any conditional elements that are
        proivded during configuration.  In the schema notation, elements and
        attributes with a minOccurs attribute equal to "0" are conditional.
      </xsd:documentation>
      <xsd:documentation>
        The MDLRoot element may contain DatabaseID and Checksum
        elements, both of type xsd:string.  The DatabaseID can be used to keep
        track of which database was used to generate the MDL instance
        document.  The Checksum element contains a single checksum of all
        elements within the MDLRoot top-level element that follow the Checksum
        element.  IRIG 106 Chapter 23 does not currently impose constraints on
        the specific checksum algorithm used.
      </xsd:documentation>
      <xsd:documentation>
        The ConfigurationVersion element, of type xsd:string,
        describes the unique version number of the MDL instance document.
        When a TmNSApp is configured with an MDL instance
        document or file, the ConfigurationVersion is saved and maintained on
        the TmNSApp and reported in accordance with IRIG 106 Chapter 25.
      </xsd:documentation>
      <xsd:documentation>
        The LastBuildDateTime element, of type xsd:dateTime, is used to
        optionally document the date/time the MDL instance document was
        produced.
      </xsd:documentation>
      <xsd:documentation>
        The DirtyBit element, of type xsd:boolean, is used in
        conjunction with reporting of the ConfigurationVersion element by a
        TmNSApp to indicate that one or more values in the reported MDL differ
        from the MDL file with which the TmNSApp was configured.  Differences may
        be introduced through System Mangement interfaces, or other vendor
        specific interfaces.  The ConfigurationVersion and DirtyBit elements
        combined faciliate configuration management of TmNSApps.  The DirtyBit
        shall be set to true in a reported MDL file when configuration changes
        have been made that cause the MDL representation to differ from the
        last configuration via MDL.
      </xsd:documentation>
      <xsd:documentation>
        The TestMissions element contains the configuration associated
        with a particular test including the name, description, date time, a
        list of the participating networks, and the mission-level quality of
        service.
      </xsd:documentation>
      <xsd:documentation>
        The Units element is a container for all derived units used in
        describing measurements, data rates, time, etc.
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementDomains element contains a list of
        MeasurementDomain elements, each of which describes a self-contained
        set of Measurements, Packages, Messages, and DataStreams.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkDomain element contains a list of Networks and
        their interconnections that may be included in a TestMission
        description.
      </xsd:documentation>
      <xsd:documentation>
        The RANConfigurations element contains a list of RANConfiguration
        elements.  Each RANConfiguration element describes the set of basic
        parameters for a Radio Access Network.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:string"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="DatabaseID" type="xsd:string"/>
      <xsd:element name="Checksum" type="xsd:string"/>
      <xsd:element name="ConfigurationVersion" type="xsd:string"/>
      <xsd:element name="LastBuildDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="DirtyBit" type="xsd:boolean"/>
      <xsd:element name="TestMissions" type="TestMissionsType" minOccurs="0"/>
      <xsd:element name="Units" type="UnitsType" minOccurs="0"/>
      <xsd:element name="MeasurementDomains" type="MeasurementDomainsType" minOccurs="0"/>
      <xsd:element name="NetworkDomain" type="NetworkDomainType" minOccurs="0"/>
      <xsd:element name="RANConfigurations" type="RANConfigurationsType" minOccurs="0"/>
      <xsd:element name="DSCPTable" type="DSCPTableType" minOccurs="0"/>
      <xsd:element name="SupportedMulticastAddresses" type="SupportedMulticastAddressesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RANConfigurationsType">
    <xsd:annotation>
      <xsd:documentation>
        The RANConfigurations element is the top-level container for an
        unbounded list of RANConfiguration elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RANConfiguration" type="RANConfigurationType" maxOccurs="unbounded">
      
      <xsd:unique name="UniqueRadioGroupName">
        <xsd:selector xpath=".//mdl:RadioGroup"/>
        <xsd:field xpath="mdl:Name"/>
      </xsd:unique>
    
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RANConfigurationType">
    <xsd:annotation>
      <xsd:documentation>
        The RANConfiguration element represents a set of system-wide
        parameters that affect the behavior of a particular Radio Access
        Network (RAN).  This element can be referenced by any RAN component
        that needs to coordinate system-wide operations with other RAN
        components.
      </xsd:documentation>
      <xsd:documentation>
        The Name element provides a short, human-readable means of
        distinguishing one parameter set from another.  The Name element must
        be unique among all RANConfiguration Names.
      </xsd:documentation>
      <xsd:documentation>
        The Description element provides a high-level, human-readable
        description of the RAN.
      </xsd:documentation>
      <xsd:documentation>
        The LinkAgentConnectionTimeout element specifies the number of seconds of inactivity 
        that will result in a LinkAgent connection timing out.
      </xsd:documentation>
      <xsd:documentation>
        The LinkAgentConnectionEncryptionEnabled element specifies whether TLS should be enabled
        for all LinkAgent connections between the TmNSLinkManager and the TmNSRadio 
        TmNSApps.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnelEncryptionEnabled element specifies whether TLS should be enabled
        for all TSSTunnel connections between the TmNSTSSClients and TmNSTSSServers 
        associated with this RANConfiguration. 
      </xsd:documentation>
      <xsd:documentation>
        The CenterFrequencyHz element specifies the center frequency (in
        Hertz) for all TmNS-based RF network communications on this RAN.
      </xsd:documentation>
      <xsd:documentation>
        The ModulationType element specifies the modulation waveform to
        be used on this RAN. For example "SOQPSK-TG".
      </xsd:documentation>
      <xsd:documentation>
        The EpochSize element describes the epoch interval in
        milliseconds. The valid values are 10, 20, 25, 40, 50, 100, 200, 250,
        500, and 1000.
      </xsd:documentation>
      <xsd:documentation>
        The LDPCBlocksPerBurst element specifies the fixed number of
        LDPC code blocks to be contained in every transmission burst sequence.
      </xsd:documentation>
      <xsd:documentation>
        The MaxGuardTimeSec element specifies the guard interval (in
        fractions of seconds) that will ensure non-overlapping RF
        transmissions.
      </xsd:documentation>
      <xsd:documentation>
        The RadioControlLoopDSCPRef element specifies the Diffserv
        Codepoint to be applied to IP network-layer messaging associated with
        the RF Network Radio Control Loop.  This includes all Link Manager
        Messages exchanged on the Link Manager to Link Agent (LM-LA) Interface
        between components implementing Link Manager and Radio functionality.
        This includes RAN Command and Control Messages exchanged on the Link
        Manager to Queue Manager (LM-QM) Interface between components
        implementing Link Manager and Queue Manager functionality.
      </xsd:documentation>
      <xsd:documentation>
        The RANCommandControlDSCPRef element specifies the Diffserv
        Codepoint to be applied to IP network-layer messaging associated with
        the Radio Access Network command and control operations.  This
        includes all messages that use the RAN Command and Control Message
        format over all Radio Access Network interfaces, with the exception of
        the LM-QM interface.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="LinkAgentConnectionTimeout" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="LinkAgentConnectionEncryptionEnabled" type="xsd:boolean"/>
      <xsd:element name="TSSTunnelEncryptionEnabled" type="xsd:boolean"/>
      <xsd:element name="CenterFrequencyHz" type="xsd:double"/>
      <xsd:element name="ModulationType" type="RANModulationTypeEnum"/>
      <xsd:element name="EpochSize" type="EpochSizeEnum"/>
      <xsd:element name="LDPCBlocksPerBurst" type="LDPCBlocksPerBurstType"/>
      <xsd:element name="MaxGuardTimeSec" type="xsd:double"/>
      <xsd:element name="RadioControlLoopDSCPRef" type="DSCPTableEntryRefType"/>
      <xsd:element name="RANCommandControlDSCPRef" type="DSCPTableEntryRefType"/>
      <xsd:element name="RadioGroups" type="RadioGroupsType"/>
      <xsd:element name="BlackoutSchedule" type="BlackoutScheduleType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>
  
  <xsd:complexType name="BlackoutScheduleType">
    <xsd:annotation>
      <xsd:documentation>
        The BlackoutSchedule element is a container for an unbounded list
        of BlackoutPeriod elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="BlackoutPeriod" type="BlackoutPeriodType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="BlackoutPeriodType">
    <xsd:annotation>
      <xsd:documentation>
        The BlackoutPeriod element contains parameters to describe a period
        of time relative to the Epoch which the TmNSLinkManager manageable 
        app is not permitted to provide TxOp assignments to TmNSRadios.
      </xsd:documentation>
      <xsd:documentation>
        The StartUSec element of type xsd:unsignedLong, specifies the start 
        time of the Blackout period in microseconds relative to the start 
        of an Epoch. 
      </xsd:documentation>
      <xsd:documentation>
        The StopUSec element of type xsd:unsignedLong, specifies the stop 
        time of the Blackout period in microseconds relative to the start 
        of an Epoch. 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="StartUSec" type="xsd:unsignedLong"/>
      <xsd:element name="StopUSec" type="xsd:unsignedLong"/>
    </xsd:sequence>
  </xsd:complexType>
    
  <xsd:complexType name="RANConfigurationRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a RANConfigurationRefType must refer to the
        ID attribute of a RANConfigurationType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="LDPCBlocksPerBurstType">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:LDPCBlocksPerBurstType data type is a unsigned
        integer.  Valid values range from 1 to 16.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:unsignedInt">
      <xsd:minInclusive value="1"/>
      <xsd:maxInclusive value="16"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="RANModulationTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The RANModulationTypeEnum element is an enumeration that lists
        the available modulation type for a RAN.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="SOQPSK-TG"/>
      <xsd:enumeration value="QPSK OFDM"/>
      <xsd:enumeration value="16-QAM OFDM"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="EpochSizeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The EpochSizeEnum is an enumeration that lists the available
        epoch sizes, representing epoch duration (in milliseconds).  For epoch
        rates below 50 ms, compatibility will have to be determined as RAN
        components mature.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:integer">
      <xsd:enumeration value="10"/>
      <xsd:enumeration value="20"/>
      <xsd:enumeration value="25"/>
      <xsd:enumeration value="40"/>
      <xsd:enumeration value="50"/>
      <xsd:enumeration value="100"/>
      <xsd:enumeration value="200"/>
      <xsd:enumeration value="250"/>
      <xsd:enumeration value="500"/>
      <xsd:enumeration value="1000"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="RadioGroupsType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioGroups element is a container for an unbounded list
        of RadioGroup elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RadioGroup" type="RadioGroupType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RadioGroupType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioGroup element contains parameters to describe a group
        RF MAC address for the radios.  It is a similar concept to mulicast
        addresses in wired networks.
      </xsd:documentation>
      <xsd:documentation>
        The Name element provides a short, human-readable means of
        distinguishing one radio group from another.  The Name element must be
        unique among all RadioGroup Names.
      </xsd:documentation>
      <xsd:documentation>
        The Description element provides a high-level, human-readable
        description of the RadioGroup.
      </xsd:documentation>
      <xsd:documentation>
        The GroupRFMACAddress element of type xsd:unsignedShort, specifies the 
        16-bit RF MAC Address assigned to the RadioGroup being described.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GroupRFMACAddress" type="xsd:unsignedShort"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="RadioGroupRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioGroupRefsType element contains an unbounded list of
        RadioGroupRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RadioGroupRef" type="RadioGroupRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RadioGroupRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a RadioGroupRef must refer to the ID
        attribute of a RadioGroupType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TestMissionsType">
    <xsd:annotation>
      <xsd:documentation>
        The TestMissions element is the top-level container for an
        unbounded list of TestMission elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TestMission" type="TestMissionType" maxOccurs="unbounded">

        <xsd:unique name="UniqueSSTAssociationNameInTestMission">
          <xsd:selector xpath=".//mdl:SSTAssociation"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

        <xsd:unique name="UniqueRadioAssociationNameInTestMission">
          <xsd:selector xpath=".//mdl:RadioAssociation"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueQoSPolicyName">
          <xsd:selector xpath=".//mdl:QoSPolicy"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueRadioLinkName">
          <xsd:selector xpath=".//mdl:RadioLink"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueHandoffRuleName">
          <xsd:selector xpath=".//mdl:HandoffRule"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TestMissionType">
    <xsd:annotation>
      <xsd:documentation>
        The TestMission element describes things that are specific to
        a test.  This varies dramatically from range to range.  MDL allows
        range policy to use TestMission to meet their needs. Precise use of
        TestMission will not be standardized until commonality among ranges is
        established.  Every TestMission element shall contain a Name element,
        of type xsd:token, that shall be unique within an MDL instance
        document.  The XML processor will remove line feeds, carriage returns,
        tabs, leading and trailing spaces, and multiple spaces from all
        elements of type xsd:token.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSCompleteness element, of type xsd:boolean, describes
        whether or not the containing TestMission element is a complete
        description of a test mission.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSCompletenessDescription element, of type xsd:string,
        describes the degree of coverage of the containing TestMission
        element.  The measure of coverage is with respect to the completeness
        of the description of a TestMission in an MDL Instance Document.  The
        criteria against which completeness is measured are context-dependent.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkReferences element contains a list of NetworkRef
        elements that indicate which Networks are participating in the
        TestMission.
      </xsd:documentation>
      <xsd:documentation>
        The QoSPolicies element is used to describe the mission-level
        quality of service parameters associated with the TestMission.
      </xsd:documentation>
      <xsd:documentation>
        The RadioLinks element is used to describe configuration
        parameters for any Radio Links associated with this test mission.
      </xsd:documentation>
      <xsd:documentation>
        The AssetAssociations element is used to describe the logical
        associations between ground and test article radio and SST elements
        for a particular test mission.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="TmNSCompleteness" type="xsd:boolean"/>
      <xsd:element name="TmNSCompletenessDescription" type="xsd:string"/>
      <xsd:element name="NetworkRefs" type="NetworkRefsType" minOccurs="0"/>
      <xsd:element name="QoSPolicies" type="QoSPoliciesType" minOccurs="0"/>
      <xsd:element name="RadioLinks" type="RadioLinksType" minOccurs="0"/>
      <xsd:element name="AssetAssociations" type="AssetAssociationsType" minOccurs="0"/>
      <xsd:element name="HandoffRules" type="HandoffRulesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="HandoffRulesType">
    <xsd:annotation>
      <xsd:documentation>
        The HandoffRules element is a container for an unbounded list
        of HandoffRule elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="HandoffRule" type="HandoffRuleType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="HandoffRuleType">
    <xsd:annotation>
      <xsd:documentation>
        The HandoffRule element contains a string to describe a rule for when to
        execute a radio handoff while a radio network is in use.
      </xsd:documentation>
      <xsd:documentation>
        The Name element provides a short, human-readable means of
        distinguishing one rule from another.
      </xsd:documentation>
      <xsd:documentation>
        The Description element provides a high-level, human-readable
        description of the HandoffRule.
      </xsd:documentation>
      <xsd:documentation>
        The Rule element specifies how to execute the rule engine. The string will 
        contain the name of the executable and any options taht need to be provided 
        to the rule.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Rule" type="xsd:string"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="RadioLinksType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioLinksType element contains an unbounded list of
        RadioLink elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RadioLink" type="RadioLinkType" maxOccurs="unbounded">
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RadioLinkType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioLink element describes a one-way connection between
        two radio endpoints.
      </xsd:documentation>
      <xsd:documentation>
        The Name element provides a human-readable name for the Radio
        Link
      </xsd:documentation>
      <xsd:documentation>
        The Description element provides a human-readable description
        of the Radio Link
      </xsd:documentation>
      <xsd:documentation>
        In some cases, not all of the endpoints of a Radio Link are
        known in advance.
      </xsd:documentation>
      <xsd:documentation>
        The SourceRadioRef element, of type TmNSAppRefType,
        indicates the source of traffic on this Radio Link
      </xsd:documentation>
      <xsd:documentation>
        The DestinationRadioRef element, of type TmNSAppRefType,
        indicates the desination of traffic on this Radio Link
      </xsd:documentation>
      <xsd:documentation>
        The LinkType element, of type LinkTypeEnum, describes the type of link
        in the system.
      </xsd:documentation>
      <xsd:documentation>
        The TxRxEnable element specifies whether
        transmission/reception is enabled on this Radio Link.
      </xsd:documentation>
      <xsd:documentation>
        The HeartbeatTimeout element specifies the lifetime of a heartbeat TLV
        message in terms of Epochs. This element can be set to an integer value
        in the range [0, 65535].
      </xsd:documentation>
      <xsd:documentation>
        The LinkManagerHeartbeatTimeout element specifies the lifetime of a
        heartbeat TLV message in terms of Epochs. This element can be set to an
        integer value in the range [0, 65535]. Used to configure the Link
        Manager.
      </xsd:documentation>
      <xsd:documentation>
        The LinkManagerTxOpTimeout element specifies the lifetime of a TxOp TLV
        in terms of Epochs. This element can be set to an integer value in the
        range [0, 255]. Used to configure the Link Manager.
      </xsd:documentation>
      <xsd:documentation>
        The EncryptionEnabled element, of type xsd:boolean, describes
        whether Link Layer encryption is performed on this radio link.
      </xsd:documentation>
      <xsd:documentation>
        The EncryptionKeyID element describes an identifier for the
        link layer encryption key that is used on this radio link.  Note that
        this is not the encyrption key itself but merely a key identifier.
      </xsd:documentation>
      <xsd:documentation>
        The TransmissionSchedule element describes the scheduling parameters.
        If the element is present, the schedule is used.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SourceRadioRef" type="TmNSAppRefType"/>
      <xsd:choice>
        <xsd:element name="DestinationRadioRef" type="TmNSAppRefType"/>
        <xsd:element name="DestinationRadioGroupRef" type="RadioGroupRefType"/>
      </xsd:choice>
      <xsd:element name="LinkType" type="LinkTypeEnum" minOccurs="0"/>
      <xsd:element name="TxRxEnable" type="xsd:boolean"/>
      <xsd:element name="HeartbeatTimeout" type="xsd:unsignedShort"/>
      <xsd:element name="LinkManagerHeartbeatTimeout" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="LinkManagerTxOpTimeout" type="xsd:unsignedByte" minOccurs="0"/>
      <xsd:element name="EncryptionEnabled" type="xsd:boolean"/>
      <xsd:element name="EncryptionKeyID" type="xsd:unsignedInt"/>
      <xsd:element name="TransmissionSchedule" type="TransmissionScheduleType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="LinkTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The LinkTypeEnum is an enumeration that is used to 
        select the type of link. The LinkTypeEnum can be 
        set to any of the following values: "Uplink", 
        "Downlink", "Relay Uplink", "Relay Downlink", or "Ad Hoc".
      </xsd:documentation>
      <xsd:documentation>
        An "Uplink" type refers to a Radio Link whose data 
        transmission direction is from the ground to the air.
      </xsd:documentation>
      <xsd:documentation>
        A "Downlink" type refers to a Radio Link whose data 
        transmission direction is from the air to the ground.
      </xsd:documentation>
      <xsd:documentation>
        A "Relay Uplink" type refers to a Radio Link whose data 
        transmission direction with respect to the Ground is 
        away from the Ground and the source Radio is at least one 
        Radio hop from the Ground. 
      </xsd:documentation>
      <xsd:documentation>
        A "Relay Downlink" type refers to a Radio Link whose data 
        transmission direction with respect to the Ground is 
        towards the Ground and the source Radio is at least two 
        Radio hops from the Ground. 
      </xsd:documentation>
      <xsd:documentation>
        An "Ad Hoc" type refers to a Radio Link whose data transmission
        direction is irrelevent. 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Uplink"/>
      <xsd:enumeration value="Downlink"/>
      <xsd:enumeration value="Relay Uplink"/>
      <xsd:enumeration value="Relay Downlink"/>
      <xsd:enumeration value="Ad Hoc"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="RadioLinkRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a RadioLinkRef must refer to the ID
        attribute of a RadioLinkType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TransmissionScheduleType">
    <xsd:annotation>
      <xsd:documentation>
        The TransmissionSchedule element is used to describe a static
        schedule of transmit opportunities (TxOps) and contention periods.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TxOp" type="TxOpType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TxOpType">
    <xsd:annotation>
      <xsd:documentation>
        The TxOp element describes one entry in a static epoch
        schedule table.
      </xsd:documentation>
      <xsd:documentation>
        The CenterFrequencyHz element specifies the center frequency (in
        Hertz) for this TxOp.
      </xsd:documentation>
      <xsd:documentation>
        The StartUSec element describes a "start" time (in
        microseconds) relative to epoch start time. If the Assignment element
        is set to "ContentionPeriod", then this value describes the earliest
        time that this transmission can occur.  The entity setting this value
        is responsible for deconflicting a contention period by allocating
        adequate guard band for maximum distance to all radios. If the
        Assignment element is set to "TxOp", then this value describes the
        earliest time that a receiver can expect this transmission.  In the
        case of a TA to GS transmission, the TA must adjust the actual
        transmission time to compensate for propagation delay, thus ensuring
        reception at the time indicated by StartUSec. This value is designed
        for use in a 40-bit field.  Units are in microseconds.
      </xsd:documentation>
      <xsd:documentation>
        The StopUSec element describes a "stop" time (in microseconds)
        relative to the epoch start time by which transmissions must be
        stopped.  The entity setting this value is responsible for
        de-conflicting a contention period by allocating adequate guard band
        for maximum distance to all radios. In the case of TA to GS
        transmission, the TA must adjust the actual transmission time to
        compensate for propagation delay, thus ensuring reception ends by the
        time indicated by StopUSec.
      </xsd:documentation>
      <xsd:documentation>
        The TxOpTimeout element specifies the lifetime of a TxOp TLV in terms
        of Epochs. This element can be set to an integer value in the range
        [0, 255].
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CenterFrequencyHz" type="xsd:double"/>
      <xsd:element name="StartUSec" type="xsd:unsignedLong"/>
      <xsd:element name="StopUSec" type="xsd:unsignedLong"/>
      <xsd:element name="TxOpTimeout" type="xsd:unsignedByte"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="QoSPoliciesType">
    <xsd:annotation>
      <xsd:documentation>
        The QoSPolicies element contains mission-level Quality of
        Service descriptions for a particular test mission.  The QoSPolicies
        element contains a list of one or more QoSPolicy elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="QoSPolicy" type="QoSPolicyType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="QoSPolicyType">
    <xsd:annotation>
      <xsd:documentation>
        The QoSPolicy element (or Mission Service Level Profile)
        describes the high-level, mission-specific data delivery requirements
        and constraints that will be provided by the Radio Access Network for
        a given test mission.  There may be more than one QoSPolicy element
        defined per test mission, depending on the needs of the test.  For
        example, a test mission defining a relay platform will contain a
        QoSPolicy element to define the data delivery needs for the relay
        itself and a QoSPolicy element to define the data delivery needs of
        the data being relayed.
      </xsd:documentation>
      <xsd:documentation>
        The Name element is used as a short, human-readable 'tag' to
        identify a QoSPolicy.
      </xsd:documentation>
      <xsd:documentation>
        The Description element is used as a human-readable
        description of the QoSPolicy.
      </xsd:documentation>
      <xsd:documentation>
        The QoSPolicyID, which is a 32-bit field composed of 3 subfields,
        identifies a Mission Service Level Profile.  The QoSPolicyID shall be
        unique within the MDLRoot documentation and must be unique across all
        Ranges.
      </xsd:documentation>
      <xsd:documentation>
        The most significant 8 bits (bit positions 24-31) of the
        QoSPolicyID contain the Range ID field(8-bits).  This identifies the Test
        Range that this test mission is primarily associated with. Allows up
        to 256 unique Ranges to be identified. In cases where test missions
        are to be flown involving multiple ranges, well-known unique ID values
        should be established a priori to ensure there are no usage conflicts.
      </xsd:documentation>
      <xsd:documentation>
        Bits 4-23 of the QoSPolicyID contain a 20-bit MSLPTag field, which
        serves as the identification number of this MSLP.  The least
        significant 4 bits of the QoSPolicyID constitute an InstanceID subfield
        which is managed and assigned by the System Manager each time a new
        instance of a queue structure must be created, instantiated and
        uniquely identified on a range.  The Instance field will be zero in
        the initial MDL configuration file.  If a queue structure must be
        replicated on multiple different components, the instance field of the
        QoSPolicyID will be used to ensure specific queues can still be
        identified unambiguously.
      </xsd:documentation>
      <xsd:documentation>
        The Priority element specifies a value for the overall
        numerical priority ranking that applies to this test, as compared to
        other ongoing tests competing for network resources.  This is the
        'collective' priority of everything defined in this QoSPolicy with
        respect any other QoSPolicy defined for this or any other test.
      </xsd:documentation>
      <xsd:documentation>
        The LinkManagementMinCapacity element, of type mdl:ValueUnitType, 
        specifies the minimum amount of dedicated network capacity (measured in 
        bits per second) to be held in reserve at all times for the Radio Link 
        referenced by this QoSPolicy.  LinkManagementMinCapacity indicates the 
        amount of capacity that shall not be shared with other  QoSPolicy 
        definitions and is always immediately available when the referenced 
        Radio Link is provided Transmission Opportunity Assignments by Link 
        Management. This capacity is used to guarantee there are sufficient 
        Transmission Opportunities for the transport of RF Network Messages.
      </xsd:documentation>
      <xsd:documentation>
        The AssuredCapacity element, of type AssuredCapacityType, specifies the 
        network capacity (measured in bits per second) required for the Radio Link 
        referenced by this QoSPolicy to satisfy the transmission data rates under 
        nominal conditions. Excess capacity allocated for but unused by a Radio 
        Link at any given time can be reallocated by Link Management to satisfy 
        excess demand of other Radio Links. Likewise, an instantaneous need for 
        capacity beyond this nominal allocation, e.g., due to unforeseen traffic 
        bursts, can be satisfied using any available excess capacity from other 
        Radio Links. The value for AssuredCapacity shall equal or exceed the value 
        for LinkManagementMinCapacity. 
      </xsd:documentation>
      <xsd:documentation>
        The AssuredCapacityType contains a Timeout element, of type xsd:unsignedLong, 
        which specifies the amount of time, in microseconds, that must pass with 
        the transmission queues empty for the Radio Link before Link Management 
        can reduce allocations below AssuredCapacity making additional allocations 
        available to other Radio Links. Link Management is responsible for detecting 
        and removing queue levels resulting from RF Network Messages when measuring 
        Timeouts. The Timeout element will not impact LinkManagementMinCapacity 
        allocations as they are guaranteed to the Radio Link referenced by the 
        QoSPolicy and are not to be shared with other Radio Links.
      </xsd:documentation>
      <xsd:documentation>
        The ServiceLevelProfiles element is a container that holds
        ServiceLevelProfile information that defines a hierarchy of Radio
        Bearers for this QoSPolicy.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="QoSPolicyID" type="ThirtyTwoBit"/>
      <xsd:element name="RadioLinkRefs" type="RadioLinkRefsType"/>
      <xsd:element name="Priority" type="xsd:unsignedLong"/>
      <xsd:element name="LinkManagementMinCapacity" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="AssuredCapacity" type="AssuredCapacityType" minOccurs="0"/>
      <xsd:element name="ServiceLevelProfiles" type="ServiceLevelProfilesType">

        <xsd:unique name="UniqueSLPHandleInQoSPolicy">
          <xsd:selector xpath=".//mdl:ServiceLevelProfile"/>
          <xsd:field xpath="mdl:SLPHandle"/>
        </xsd:unique>

        <xsd:key name="SLPHandleKey">
          <xsd:selector xpath=".//mdl:ServiceLevelProfile"/>
          <xsd:field xpath="mdl:SLPHandle"/>
        </xsd:key>
        <xsd:keyref name="DefaultClassHandleKeyRef" refer="mdl:SLPHandleKey">
          <xsd:selector xpath=".//mdl:HTB"/>
          <xsd:field xpath="mdl:DefaultClassHandle"/>
        </xsd:keyref>
        <xsd:keyref name="ParentQDiscHandleKeyRef" refer="mdl:SLPHandleKey">
          <xsd:selector xpath=".//mdl:TrafficFilter"/>
          <xsd:field xpath="mdl:ParentQDiscHandle"/>
        </xsd:keyref>

      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>
  
  <xsd:complexType name="RadioLinkRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioLinkRefs element is the top-level container for an unbounded
        list of RadioLinkRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RadioLinkRef" type="RadioLinkRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AssuredCapacityType">
    <xsd:annotation>
      <xsd:documentation>
        The Value element, of type ValueType, specifies the nominal portion of 
        the overall network capacity to be allocated for all data associated
        with this Radio Link under steady state conditions. The units are
        specified using either a UnitRefType or a BaseUnitEnum. The Timeout element,
        of type xsd:unsignedLong, specifies the amount of time, in microseconds,
        that must pass with the transmission queues empty for the Radio Link 
        before Link Management can reduce allocations below AssuredCapacity.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Value" type="ValueType"/>
      <xsd:choice>
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
      <xsd:element name="Timeout" type="xsd:unsignedLong" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="QoSPolicyRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a QoSPolicyRefType must refer to
        the ID attribute of a QoSPolicyType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ServiceLevelProfilesType">
    <xsd:annotation>
      <xsd:documentation>
        The ServiceLevelProfiles contains a list of one or more
        ServiceLevelProfile elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ServiceLevelProfile" type="ServiceLevelProfileType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ServiceLevelProfileType">
    <xsd:annotation>
      <xsd:documentation>
        The ServiceLevelProfile element represents the collection of
        parameters that define the specific services to be provided by each
        Radio bearer in the Radio Access Network (see Radio Bearer definition
        below). A ServiceLevelProfile is primarily an RF Network Management
        construct used for configuration and coordination of low-level network
        services and data delivery functionality.
      </xsd:documentation>
      <xsd:documentation>
        A Radio bearer represents the collection of services provided
        by the Radio Access Network to transfer data between the vehicle
        network and the ground network. A service is the collection of all
        means and facilities provided by the network to allow communication
        across the network.  Radio bearers are used to organize the
        establishment and management of data transfers across the RAN segment
        so that appropriate QoS requirements can be supported.
      </xsd:documentation>
      <xsd:documentation>
        The Name element is used as a short, human-readable 'tag' to
        identify a ServiceLevelProfile.
      </xsd:documentation>
      <xsd:documentation>
        The Description element is a human-readable textual
        description of the bearer this ServiceLevelProfile describes, intended
        for display.
      </xsd:documentation>
      <xsd:documentation>
        The SLPHandle element is a 32-bit identifier used to reference
        the queue discipline or class associated with this SLP.  The SLPHandle
        element value must be unique within an MSLP hierarchy.  These fields
        represent the major/minor numbering scheme used by Linux traffic
        control to reference traffic engineering queues and classes.  The most
        significant 16-bits represent the "major" number and the least
        significant 16-bits represent the "minor" number. By convention, the
        minor number is always 0 for qdiscs.  For classes, the minor number
        must be a positive integer. A parent handle value of "0:0" imlies the
        root of the hierarchy.  Note that an SLP instance is never explicitly
        defined for root.
      </xsd:documentation>
      <xsd:documentation>
        The AveragePacketDelay element, of type mdl:ValueUnitType,
        specifies the latency (measured in seconds) of the packet traversing
        the Radio Access Network.
      </xsd:documentation>
      <xsd:documentation>
        The Jitter element, of type mdl:ValueUnitType, specifies the
        allowed variation of packet delay (measured in seconds) measured over
        some period of time.
      </xsd:documentation>
      <xsd:documentation>
        The QueueConstruct element specifies the details of the queue
        discipline or class assoicated with this SLP.
      </xsd:documentation>
      <xsd:documentation>
        TrafficFilters are used as a flexible means of identifying and
        associating specific network packets with the bearer described by this
        ServiceLevelProfile. This will typically be some field or fields
        within the packet headers, including (but not limited to) IP
        source/destination address and port values, DiffServ codepoints.
      </xsd:documentation>
      <xsd:documentation>
        The ServiceLevelProfiles element is a container that holds
        additional ServiceLevelProfile information associated with this
        'parent' ServiceLevelProfile and may be used to describe a hierarchy
        of service level profiles.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SLPHandle" type="ThirtyTwoBit"/>
      <xsd:element name="AveragePacketDelay" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="Jitter" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="QueueConstruct" type="QueueConstructChoiceType"/>
      <xsd:element name="TrafficFilters" type="TrafficFiltersType" minOccurs="0">
        <xsd:unique name="UniqueTrafficFilterName">
          <xsd:selector xpath="mdl:TrafficFilter"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="ServiceLevelProfiles" type="ServiceLevelProfilesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SLPRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a SLPRef must refer to the ID
        attribute of a ServiceLevelProfileType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="QueueConstructChoiceType">
    <xsd:annotation>
      <xsd:documentation>
        The QueueConstructChoiceType may contain either a QDisc
        element (of type QDiscChoiceType) or a Class element (of type
        ClassChoiceType) for describing either a queuing discipline or a
        class.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="QDisc" type="QDiscChoiceType"/>
        <xsd:element name="Class" type="ClassChoiceType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="QDiscChoiceType">
    <xsd:annotation>
      <xsd:documentation>
        An element of type QDiscChoiceType shall contain one and only
        one of the following elements: FIFO (of type FIFOQDiscType), RED (of
        type REDQDiscType), SFQ (of type SFQQDiscType), TBF (of type
        TBFQDiscType), PRIO (of type PRIOQDiscType), or HTB (of type
        HTBQDiscType).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="FIFO" type="FIFOQDiscType"/>
        <xsd:element name="RED" type="REDQDiscType"/>
        <xsd:element name="SFQ" type="SFQQDiscType"/>
        <xsd:element name="TBF" type="TBFQDiscType"/>
        <xsd:element name="PRIO" type="PRIOQDiscType"/>
        <xsd:element name="HTB" type="HTBQDiscType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FIFOQDiscType">
    <xsd:annotation>
      <xsd:documentation>
        The FIFOQDiscType describes a First In, First Out (FIFO)
        classless Queuing Discipline (QDisc). 
      </xsd:documentation>
      <xsd:documentation>
        The LimitInPackets element, of
        type xsd:unsignedInt, is an unsigned 32-bit integer representing the
        maximum number of packets that the FIFO can contain before dropping.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a FIFO QDisc is: 
        'tc qdisc add dev eth1 parent 1:10 handle 10:0 pfifo limit 50'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="LimitInPackets" type="xsd:unsignedInt"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="REDQDiscType">
    <xsd:annotation>
      <xsd:documentation>
        The REDQDiscType describes a Random Early Discard (RED)
        classless Queuing Discipline (QDisc).
      </xsd:documentation>
      <xsd:documentation>
        The Limit element, of type ValueUnitType, describes the maximum
        number of bytes that the queue can contain before dropping.
      </xsd:documentation>
      <xsd:documentation>
        The Min element, of type ValueUnitType, describes the average
        queue size (in bytes) at which marking becomes a possibility.
      </xsd:documentation>
      <xsd:documentation>
        The Max element, of type ValueUnitType, describes the average
        queue size (in bytes) at which the marking probability is maximal.
      </xsd:documentation>
      <xsd:documentation>
        The Avpkt element, of type ValueUnitType, describes the average
        packet size in bytes.
      </xsd:documentation>
      <xsd:documentation>
        The Burst element, of type xsd:unsignedInt, describes the size
        of traffic bursts (measured in number of packets) to be accommodated
        by the queue.
      </xsd:documentation>
      <xsd:documentation>
        The EnableECN element, of type xsd:boolean, describes whether
        Explicit Congestion Notification is enabled.
      </xsd:documentation>
      <xsd:documentation>
        The Bandwidth element, of type ValueUnitType, describes the
        rate (in kilobits per second) that is used for calculating the average
        queue size.
      </xsd:documentation>
      <xsd:documentation>
        The Probability element, of type Percentage, describes the
        maximum probability of marking, expressed as a percentage.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a RED QDisc is: 
        'tc qdisc add dev eth1 parent 1:301 handle 40:0 red bandwidth 256 max 16000 min 5300 limit 128000 avpkt 1000 burst 9 probability 0.02'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Limit" type="ValueUnitType"/>
      <xsd:element name="Min" type="ValueUnitType"/>
      <xsd:element name="Max" type="ValueUnitType"/>
      <xsd:element name="Avpkt" type="ValueUnitType"/>
      <xsd:element name="Burst" type="xsd:unsignedInt"/>
      <xsd:element name="EnableECN" type="xsd:boolean"/>
      <xsd:element name="Bandwidth" type="ValueUnitType"/>
      <xsd:element name="Probability" type="Percentage"/>
    </xsd:sequence>    
  </xsd:complexType>

  <xsd:complexType name="SFQQDiscType">
    <xsd:annotation>
      <xsd:documentation>
        The SFQQDiscType describes a Stochastic Fairness Queuing (SFQ) 
        classless Queuing Discipline (QDisc).
      </xsd:documentation>
      <xsd:documentation>
        The Perturb element, of type ValueUnitType, describes how often
        (in seconds) the queue algorithm is perturbed.
      </xsd:documentation>
      <xsd:documentation>
        The Quantum element, of type ValueUnitType, describes the
        number of bytes a flow is allowed to dequeue during a round of the
        round robin process.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a SFQ QDisc is: 
        'tc qdisc add dev eth1 parent 1:300 handle 30:0 sfq perturb 10'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Perturb" type="ValueUnitType"/>
      <xsd:element name="Quantum" type="ValueUnitType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TBFQDiscType">
    <xsd:annotation>
      <xsd:documentation>
        The SFQQDiscType describes a Token Bucket Filter (TBF)
        classless Queuing Discipline (QDisc).
      </xsd:documentation>
      <xsd:documentation>
        The Limit element, of type ValueUnitType, describes the number
        of bytes that can be queued waiting for tokens to become available.
      </xsd:documentation>
      <xsd:documentation>
        The Burst element, of type ValueUnitType, describes the size of
        the token bucket, in bytes. This is the maximum amount of bytes for
        which tokens can be available instantaneously.
      </xsd:documentation>
      <xsd:documentation>
        The MPU element, of type ValueUnitType, describes the Minimum
        Packet Unit (specified in bytes), which determines the minimal token
        usage for a packet.
      </xsd:documentation>
      <xsd:documentation>
        The Rate element, of type ValueUnitType, describes a nominal
        rate limit (in kilobits per second) at which packets can be dequeued.
      </xsd:documentation>
      <xsd:documentation>
        The Peakrate element, of type ValueUnitType, describes the
        maximum burst rate (in kilobits per second) at which packets can be
        dequeued.
      </xsd:documentation>
      <xsd:documentation>
        The MTU element, of type ValueUnitType, describes the size (in
        bytes) of the peakrate bucket.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a TBF QDisc is: 
        'tc qdisc add dev eth0 handle 2:0 parent 1:0 tbf burst 20480 limit 20480 mtu 1514 rate 32000bps'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Limit" type="ValueUnitType"/>
      <xsd:element name="Burst" type="ValueUnitType"/>
      <xsd:element name="MPU" type="ValueUnitType"/>
      <xsd:element name="Rate" type="ValueUnitType"/>
      <xsd:element name="Peakrate" type="ValueUnitType"/>
      <xsd:element name="MTU" type="ValueUnitType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PRIOQDiscType">
    <xsd:annotation>
      <xsd:documentation>
        The PRIOQDiscType describes the Priority Queuing (PRIO)
        classful Queuing Discipline (QDisc).
      </xsd:documentation>
      <xsd:documentation>
        The NumberOfBands element, of type xsd:unsignedInt, describes
        the total number of bands (classes) that will be automatically created
        for this PRIO queuing discipline.  Up to 16 bands may be described.
      </xsd:documentation>
      <xsd:documentation>
        The Priomap element describes the mapping of bands to TOS bits
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a PRIO QDisc is: 
        'tc qdisc add dev eth0 root handle 1: prio'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NumberOfBands" type="xsd:unsignedInt"/>
      <xsd:element name="TOSBandAssignment" type="TOSBandAssignmentType" maxOccurs="16"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TOSBandAssignmentType">
    <xsd:annotation>
      <xsd:documentation>
        The TOSBandAssignment describes the assignment of packets with
        specific Type Of Service (TOS) priority bits to their assigned bands
        (represented using the minor numbers of the PRIO classes).
      </xsd:documentation>
      <xsd:documentation>
        The TOS element describes the "Type Of Service" priority field
        in the packet headers that will be assigned to a particular band.
      </xsd:documentation>
      <xsd:documentation>
        The Band element describes the band to which the packect will
        be assigned.  Unlike PRIO classes, band reference numbers start from
        0.  For example, if a PRIO qdisc is created with 4 bands, the possible
        range of TOS Band Assignment values is [0,N-1], where N is the total
        number of bands.  The maximum number of bands is 16.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>    
      <xsd:element name="TOS" type="UnsignedInt4"/>
      <xsd:element name="Band" type="UnsignedInt4"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="HTBQDiscType">
    <xsd:annotation>
      <xsd:documentation>
        The HTBQDiscType describes the Hierarchical Token Bucket (HTB)
        classful Queuing Discipline (QDisc).
      </xsd:documentation>
      <xsd:documentation>
        The DefaultClassHandle element indicates the destination class
        for packets that were not explicitly classified by filters defined for
        this HTB.  The value of the DefaultClassHandle must match the value of
        an SLPHandle element within the same MisisonSLP.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a HTB QDisc is: 
        'tc qdisc add dev eth1 parent root handle 1:0 htb default 1:40'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>    
      <xsd:element name="DefaultClassHandle" type="ThirtyTwoBit" minOccurs="0"/>
    </xsd:sequence>    
  </xsd:complexType>

  <xsd:complexType name="ClassChoiceType">
    <xsd:annotation>
      <xsd:documentation>
        The ClassChoiceType may contain either a PRIO element, of type
        PRIOClassType, or an HTB element of type HTBClassType for describing
        the class of the queue construct.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="PRIO" type="PRIOClassType"/>
        <xsd:element name="HTB" type="HTBClassType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PRIOClassType">
    <xsd:annotation>
      <xsd:documentation>
        Classes for PRIO are created automatically when the PRIO qdisc
        is created, but should be explicitly included in the SLP hierarchy in
        order to reference them (for example, when changing the underlying
        qdisc from PFIFO to something else, the parent class is referenced).
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="HTBClassType">
    <xsd:annotation>
      <xsd:documentation>
        Classes for HTB are used when dequeuing packets from the HTB
        QDisc.  Class instances can be arranged hierarchically.
      </xsd:documentation>
      <xsd:documentation>
        The Priority element describes the order in which HTB classes
        are accessed when dequeuing a packet.
      </xsd:documentation>
      <xsd:documentation>
        The Rate element describes the maximum rate this class and all
        its children are guaranteed (in bits per second).
      </xsd:documentation>
      <xsd:documentation>
        The Ceiling element, of type ValueUnitType, describes the
        maximum rate (in bits per second) at which a class can send, if its
        parent has bandwidth to spare.
      </xsd:documentation>
      <xsd:documentation>
        The Burst element, of type xsd:unsignedInt, describes the
        number of bytes that can be burst at ceiling speed, in excess of the
        configured rate.  This value should be at least as high as the highest
        burst of all children.
      </xsd:documentation>
      <xsd:documentation>
        The CBurst element, of type xsd:unsignedInt, describes the
        number of bytes that can be burst at 'infinite' speed, in other words,
        as fast as the interface can transmit them.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a HTB Class is: 
        'tc class add dev eth1 parent 1:0 classid 1:1 htb rate 2Mbit ceil 10Mbit'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>    
      <xsd:element name="Priority" type="xsd:unsignedByte"/>
      <xsd:element name="Rate" type="ValueUnitType"/>
      <xsd:element name="Ceiling" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="Burst" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="CBurst" type="ValueUnitType" minOccurs="0"/>
    </xsd:sequence>    
  </xsd:complexType>

  <xsd:complexType name="TrafficFiltersType">
    <xsd:annotation>
      <xsd:documentation>
        TrafficFilters contains a list of one or more TrafficFilter
        elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>    
      <xsd:element name="TrafficFilter" type="TrafficFilterType" maxOccurs="unbounded"/>
    </xsd:sequence>    
  </xsd:complexType>

  <xsd:complexType name="TrafficFilterType">
    <xsd:annotation>
      <xsd:documentation>
        The TrafficFilterType element is used to describe traffic
        filtering conditions.
      </xsd:documentation>
      <xsd:documentation>
        OR conditions are created by specifying two separate filters,
        while AND conditions are created by specifying multiple conditions
        within a single filter element.
      </xsd:documentation>
      <xsd:documentation>
        Any packets that match all of the filter conditions are sent
        to the class indicated by the handle of the SLP where this traffic
        filter is defined.
      </xsd:documentation>
      <xsd:documentation>
        When working in a Cisco context, the Name element may be used
        to supply a name for a traffic 'class map' (i.e. filter).
      </xsd:documentation>
      <xsd:documentation>
        When working in a Cisco context, the Description element may
        be used to supply a name for a traffic 'class map' (i.e. filter).
      </xsd:documentation>
      <xsd:documentation>
        The ParentQDiscHandle element, of type mdl:ThirtyTwoBit,
        contains the SLPHandle of the parent queuing discipline for this
        filter
      </xsd:documentation>
      <xsd:documentation>
        The Protocol element defines the protocol/OSI layer that this
        filter applies to.
      </xsd:documentation>
      <xsd:documentation>
        Filter Priority indicates the order of filter execution.
      </xsd:documentation>
      <xsd:documentation>
        The Condition element is a sequence of one or more traffic
        filter conditions.  All of the conditions must be met to declare a
        match.
      </xsd:documentation>
      <xsd:documentation>
        An example Linux configuration using some of the options 
        for a Traffic Filter is: 
        'tc filter add dev eth1 protocol ip parent 1:0 prio 1 u32 match u8 0xe0 0xe0 at 1 classid 1:10'
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>    
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ParentQDiscHandle" type="ThirtyTwoBit"/>
      <xsd:element name="Protocol" type="TrafficFilterProtocolEnumType"/>
      <xsd:element name="Priority" type="xsd:unsignedInt"/>
      <xsd:element name="Classifier" type="FilterClassifierEnum"/>
      <xsd:element name="Conditions" type="TrafficFilterConditionsType"/>
    </xsd:sequence>    
  </xsd:complexType>

  <xsd:simpleType name="TrafficFilterProtocolEnumType">
    <xsd:annotation>
      <xsd:documentation>
        The TrafficFilterProtocolEnumType element indicates the
        protocol that applies to the filter (or condition).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="IPv4"/>
      <xsd:enumeration value="IPv6"/>
      <xsd:enumeration value="UDP"/>
      <xsd:enumeration value="TCP"/>
      <xsd:enumeration value="ICMP"/>
      <xsd:enumeration value="ARP"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="FilterClassifierEnum">
    <xsd:annotation>
      <xsd:documentation>
        The FilterClassifierEnum element indicates the type of
        classifier that applies to the filter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Firewall"/>
      <xsd:enumeration value="PacketFields"/>
      <xsd:enumeration value="Route"/>
      <xsd:enumeration value="RSVP"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="TrafficFilterConditionsType">
    <xsd:annotation>
      <xsd:documentation>
        The Condition element, of type mdl:TrafficFilterConditionType,
        contains a list of one or more TrafficFilterConditionChoice elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Condition" type="TrafficFilterConditionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TrafficFilterConditionType">
    <xsd:annotation>
      <xsd:documentation>
        The TrafficFilterCondition element describes the attributes
        which will be used to uniquely identify the data traffic associated
        with a particular ServiceLevelProfile.
      </xsd:documentation>
      <xsd:documentation>
        The MatchField element describes matching a pattern and mask
        against an 8, 16, or 32-bit field.
      </xsd:documentation>
      <xsd:documentation>
        The DSCPTableEntryRef refers to the DSCPTableEntry that
        describes the DSCP markings of the IP packets to filter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="MatchField" type="MatchFieldType"/>
        <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MatchFieldType">
    <xsd:annotation>
      <xsd:documentation>
        This condition matches if within the header of the specified
        protocol (defaults to IPv4) within the byte at the location specified
        by the offset (defaults to zero offset) the bits specified by the mask
        (required) match the same bits of the supplied pattern value
        (required)
      </xsd:documentation>
      <xsd:documentation>
        Next Header usage: This condition matches if for the specified
        protocol (defaults to IPv4) within the header of the next protocol
        layer within the byte at the location specified by the offset
        (defaults to zero offset) the bits specified by the mask (required)
        match the same bits of the supplied pattern value (required)
      </xsd:documentation>
      <xsd:documentation>
        The FieldWidth element is an enumeration that describes 8-, 16-,
        or 32-bit field widths for matching.
      </xsd:documentation>
      <xsd:documentation>
        The Pattern element describes the pattern against which the
        fields should be matched.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Protocol" type="TrafficFilterProtocolEnumType" minOccurs="0"/>
      <xsd:element name="Offset" type="xsd:unsignedInt" minOccurs="0"/>
      <xsd:element name="FieldWidth" type="FieldWidthEnum"/>
      <xsd:element name="Pattern" type="HexInteger"/>
      <xsd:element name="Mask" type="HexInteger"/>
      <xsd:element name="NextHeaderByteOffset" type="xsd:unsignedInt" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="FieldWidthEnum">
    <xsd:annotation>
      <xsd:documentation>
        The FieldWidthEnum element indicates size, in bits, of the
        traffic filter field.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="8-bit"/>
      <xsd:enumeration value="16-bit"/>
      <xsd:enumeration value="32-bit"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="AssetAssociationsType">
    <xsd:annotation>
      <xsd:documentation>
        The AssetAssociations element is used to describe the logical
        associations between ground and test article radio and SST elements
        for a particular test mission.
      </xsd:documentation>
      <xsd:documentation>
        The SSTAssociation element, of type AssetAssociationType, represents
        a logical association between an SST receiver and transmitter.
      </xsd:documentation>
      <xsd:documentation>
        The RadioAssociation element, of type AssetAssociationType,
        represents a logical association of TmNSRadio components, whether on
        the ground or on the test article.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SSTAssociations" type="SSTAssociationsType" minOccurs="0"/>
      <xsd:element name="RadioAssociations" type="RadioAssociationsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RadioAssociationsType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioAssociationsType element contains an unbounded list of RadioAssociationType 
        elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RadioAssociation" type="RadioAssociationType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="RadioAssociationType">
    <xsd:annotation>
      <xsd:documentation>
        The RadioAssociation element is used to describe a logical
        association between ground and test article radio and SST elements for
        a particular test mission.
      </xsd:documentation>
      <xsd:documentation>
        The Name element, of type xsd:token, is a human-readable name
        for the RadioAssociation.  The Name element shall be unique within a
        TestMission.
      </xsd:documentation>
      <xsd:documentation>
        The Description element, of type xsd:string, is a text
        description of the association.
      </xsd:documentation>
      <xsd:documentation>
        The Active element, of type xsd:boolean, describes whether or
        not the association is active.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSAppRef elements, of type TmNSAppRefType,
        contain references to the associated elements.  A RadioAssociation
        contains two or more ManageAppRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Active" type="xsd:boolean"/>
      <xsd:element name="TmNSAppRefs" type="TmNSAppRefsType"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="SSTAssociationsType">
    <xsd:annotation>
      <xsd:documentation>
        The SSTAssociationsType element contains an unbounded list of SSTAssociationType 
        elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SSTAssociation" type="SSTAssociationType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTAssociationType">
    <xsd:annotation>
      <xsd:documentation>
        The SSTAssociation element is used to describe a logical
        association between ground and test article SST elements for a
        particular test mission.
      </xsd:documentation>
      <xsd:documentation>
        The Name element, of type xsd:token, is a human-readable name
        for the SSTAssociation.  The Name element shall be unique within a
        TestMission.
      </xsd:documentation>
      <xsd:documentation>
        The Description element, of type xsd:string, is a text
        description of the association.
      </xsd:documentation>
      <xsd:documentation>
        The Active element, of type xsd:boolean, describes whether or
        not the association is active.
      </xsd:documentation>
      <xsd:documentation>
        The SSTChannelRef elements, of type SSTChannelRefType, contain
        references to the Channel elements within TmNSSSTRx and TmNSSSTTx
        elements.  An SSTAssociation contains two or more SSTChannelRef
        elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Active" type="xsd:boolean"/>
      <xsd:element name="SSTChannelRefs" type="SSTChannelRefsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTChannelRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The SSTChannelRefsType element is the top-level container for an
        unbounded list of SSTChannelRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SSTChannelRef" type="SSTChannelRefType" minOccurs="2" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="UnitsType">
    <xsd:annotation>
      <xsd:documentation>
        The Units element is the top-level container for an unbounded
        list of DerivedUnits.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DerivedUnit" type="DerivedUnitType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="UnitRefType">
    <xsd:annotation>
      <xsd:documentation>
        The UnitRef element contains an IDREF attribute that shall
        refer to the ID attribute of a DerivedUnit.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="BaseUnitEnum">
    <xsd:annotation>
      <xsd:documentation>
        The BaseUnit element is an enumeration that can be set to the
        following list of standard SI units, special derived SI units, 
        and some other fundamental, non-SI units.  The value "Unitless" 
        should be used for a fractional term that has no units.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Meter"/>
      <xsd:enumeration value="Kilogram"/>
      <xsd:enumeration value="Second"/>
      <xsd:enumeration value="Ampere"/>
      <xsd:enumeration value="Kelvin"/>
      <xsd:enumeration value="Mole"/>
      <xsd:enumeration value="Candela"/>
      <xsd:enumeration value="Radian"/>
      <xsd:enumeration value="Steradian"/>
      <xsd:enumeration value="Hertz"/>
      <xsd:enumeration value="Newton"/>
      <xsd:enumeration value="Pascal"/>
      <xsd:enumeration value="Joule"/>
      <xsd:enumeration value="Watt"/>
      <xsd:enumeration value="Coulomb"/>
      <xsd:enumeration value="Volt"/>
      <xsd:enumeration value="Farad"/>
      <xsd:enumeration value="Ohm"/>
      <xsd:enumeration value="Siemens"/>
      <xsd:enumeration value="Weber"/>
      <xsd:enumeration value="Tesla"/>
      <xsd:enumeration value="Henry"/>
      <xsd:enumeration value="Celsius"/>
      <xsd:enumeration value="Lumen"/>
      <xsd:enumeration value="Lux"/>
      <xsd:enumeration value="Becquerel"/>
      <xsd:enumeration value="Gray"/>
      <xsd:enumeration value="Sievert"/>
      <xsd:enumeration value="Katal"/>
      <xsd:enumeration value="Bit"/>
      <xsd:enumeration value="BitPerSecond"/>
      <xsd:enumeration value="Counts"/>
      <xsd:enumeration value="dB"/>
      <xsd:enumeration value="dBm"/>
      <xsd:enumeration value="Unitless"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="DerivedUnitType">
    <xsd:annotation>
      <xsd:documentation>
        The DerivedUnit element describes a unit of measure in terms
        of fractional expressions consisting of standard units of measure.
        Each DerivedUnit element description can contain a name, symbol and
        additional details of the meaning of the unit of measure.  The terms
        of the numerator and denominator of a DerivedUnit element can be
        assigned units from the BaseUnitType or other previously defined 
        DerivedUnit elements.
      </xsd:documentation>
      <xsd:documentation>

        The Symbol element, of type xsd:token, describes a textual
        symbol associated with the unit of measure defined by the containing
        DerivedUnit element.  Common examples include "J" for Joule and "N"
        for Newton.  The Symbol is a required element and must be unique
        across all DerivedUnit Symbols in the MDLRoot element. The Name is a
        required element and must be unique across all DerivedUnit Names in
        the MDLRoot element. The XML processor will remove line feeds,
        carriage returns, tabs, leading and trailing spaces, and multiple
        spaces from all elements of type xsd:token.
      </xsd:documentation>
      <xsd:documentation>

        DerivedUnit elements shall not be created to redefine or
        replace existing BaseUnit definitions.  DerivedUnit elements should use
        as few BaseUnit as possible to achieve the required result.  For
        example, if units of degrees per second squared is required, the
        derived unit should be based on the RadianPerSecondSquared SIUnit
        rather than using the Radian SIUnit and the Second SIUnit
      </xsd:documentation>
      <xsd:documentation>

        The AddedConstant element, of type xsd:double, describes a
        constant value to be added to the fraction described by the
        Numerator and Denominator elements.
      </xsd:documentation>
      <xsd:documentation>

        The Numerator and Denominator elements are of type
        mdl:UnitTermType.  The described DerivedUnit is evaluated as the
        result of dividing the product of all Numerator units by the
        product of all Denominator units.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Symbol" type="xsd:token"/>
      <xsd:element name="Numerators" type="NumeratorsType"/>
      <xsd:element name="Denominators" type="DenominatorsType" minOccurs="0"/>
      <xsd:element name="AddedConstant" type="xsd:double" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NumeratorsType">
    <xsd:annotation>
      <xsd:documentation>
        The NumeratorsType element is the top-level container for an unbounded
        list of Numerator elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Numerator" type="UnitTermType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DenominatorsType">
    <xsd:annotation>
      <xsd:documentation>
        The DenominatorsType element is the top-level container for an unbounded
        list of Denominator elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Denominator" type="UnitTermType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="UnitTermType">
    <xsd:annotation>
      <xsd:documentation>
        The UnitTermType is a container for a scalar multiplier
        (NumericalConstant) and an BaseUnit or a UnitRef to a previously
        created DerivedUnit.  As an example, millimeters (mm) can be
        represented by the numerical constant 0.001 multiplied by the SI unit
        meter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NumericalConstant" type="xsd:double"/>
      <xsd:choice>
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementDomainsType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementDomains element contains a list of one or more
        MeasurementDomain elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementDomain" type="MeasurementDomainType" maxOccurs="unbounded">

        <xsd:key name="PCMMeasurementKey">
          <xsd:selector xpath=".//tmatsP:PCMMeasurements/tmatsD:MeasurementList/tmatsD:Measurement"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PCMMeasurementKeyRef" refer="mdl:PCMMeasurementKey">
          <xsd:selector xpath=".//mdl:PCMMeasurementRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:unique name="UniqueMeasurementName">
          <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

        <xsd:key name="DataStructureKey">
          <xsd:selector xpath=".//mdl:DataStructure"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="DataStructureKeyRef" refer="mdl:DataStructureKey">
          <xsd:selector xpath=".//mdl:DataStructureRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="DataStructureFieldSetKey">
          <xsd:selector xpath=".//mdl:DataStructureFieldSet"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="DataStructureFieldSetKeyRef" refer="mdl:DataStructureFieldSetKey">
          <xsd:selector xpath=".//mdl:DataStructureFieldSetRef | .//mdl:OffsetFromDataStructureFieldSet"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="DataStructureFieldKey">
          <xsd:selector xpath=".//mdl:DataStructureField"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="DataStructureFieldKeyRef" refer="mdl:DataStructureFieldKey">
          <xsd:selector xpath=".//mdl:DataStructureFieldRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="PackageDefinitionInMeasurementDomainKey">
          <xsd:selector xpath=".//mdl:PackageDefinition"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PackageDefinitionInMeasurementDomainKeyRef" refer="mdl:PackageDefinitionInMeasurementDomainKey">
          <xsd:selector xpath=".//mdl:PackageDefinitionRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="MeasurementInMeasurementDomainKey">
          <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="MeasurementInMeasurementDomainKeyRef" refer="mdl:MeasurementInMeasurementDomainKey">
          <xsd:selector xpath=".//mdl:MeasurementRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="FieldLocationKey">
          <xsd:selector xpath=".//mdl:FieldLocation"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="FieldLocationKeyRef" refer="mdl:FieldLocationKey">
          <xsd:selector xpath=".//mdl:FieldLocationRef | .//mdl:OffsetFromLocation"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="MethodKey">
          <xsd:selector xpath=".//mdl:Method"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="MethodKeyRef" refer="mdl:MethodKey">
          <xsd:selector xpath=".//mdl:MethodRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        
        <!-- TBD: specify domain? -->
        <xsd:key name="DataStreamMessageInDomainKey">
          <xsd:selector xpath=".//mdl:DataStreamMessage"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="DataStreamMessageInDomainKeyRef" refer="mdl:DataStreamMessageInDomainKey">
          <xsd:selector xpath=".//mdl:DataStreamMessageRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:unique name="UniqueDataStructureName">
          <xsd:selector xpath="mdl:DataStructures/mdl:DataStructure"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

        <xsd:unique name="UniqueDataStreamName">
          <xsd:selector xpath="mdl:DataStreams/mdl:DataStream"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueFunctionName">
          <xsd:selector xpath=".//mdl:Function"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueMeasurementGroupName">
          <xsd:selector xpath=".//mdl:MeasurementGroup"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueMessageDefinitionName">
          <xsd:selector xpath=".//mdl:MessageDefinition"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueMessageGroupName">
          <xsd:selector xpath=".//mdl:MessageGroup"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniquePackageDefinitionName">
          <xsd:selector xpath=".//mdl:PackageDefinition"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementDomainType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementDomain element contains the descriptions of
        Measurements, Packages, Messages, DataStreams, MeasurementGroups,
        MessageGroups, and associated DataProcessing to be used in a TmNS-based
        system.  Each MeasurementDomain shall be completely self-contained,
        meaning, for example, that a Message shall contain only Packages from
        the same MeasurementDomain and a Package shall contain only
        Measurements from the same MeasurementDomain.  Every MeasurementDomain
        shall contain a Name element that shall be unique within an MDL
        instance document.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Measurements" type="MeasurementsType" minOccurs="0"/>
      <xsd:element name="PackageDefinitions" type="PackageDefinitionsType" minOccurs="0"/>
      <xsd:element name="DataStructures" type="DataStructuresType" minOccurs="0"/>
      <xsd:element name="MessageDefinitions" type="MessageDefinitionsType" minOccurs="0"/>
      <xsd:element name="DataStreams" type="DataStreamsType" minOccurs="0"/>
      <xsd:element name="DataProcessing" type="DataProcessingType" minOccurs="0"/>
      <xsd:element name="MeasurementGroups" type="MeasurementGroupsType" minOccurs="0"/>
      <xsd:element name="MessageGroups" type="MessageGroupsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementGroupsType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementGroups element in a MeasurementDomain element is a
        container for one or more MeasurementGroup elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementGroup" type="MeasurementGroupType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementGroupType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementGroup element provides a method to group measurements for
        purposes such as simultaneous sampling.
      </xsd:documentation>
      <xsd:documentation>
        The GroupType element describes the type of measurement group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="GroupType" type="GroupTypeEnumExtType"/>
      <xsd:element name="MeasurementRefs" type="MeasurementRefsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="GroupTypeEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The GroupTypeEnumExtType provides an extensible enumeration.  If the
        value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the string representing the extended
        enumeration value. If the value is any other enumeration, the
        "Extension" attribute further specifies the enumeration's properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="GroupTypeEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="GroupTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The GroupTypeEnum is an extensible enumeration describing the
        type of measurement group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="SimultaneousSampling"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="MeasurementsType">
    <xsd:annotation>
      <xsd:documentation>
        The Measurements element in a MeasurementDomain element is a
        container for one or more Measurement elements.
      </xsd:documentation>
      <xsd:documentation>
        A Measurement element provides a description of the
        realization of a measurement type for a configuration of a Test
        Article.  The Measurement element acts as a starting point to begin
        describing the steps and their resulting intermediate forms of a
        measurement that will result in the publishing of measurement data on
        the network.  Specific elements and attributes are included to
        describe both the analog and digital properties of the Measurement
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Measurement" type="MeasurementType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementType">
    <xsd:annotation>
      <xsd:documentation>
        The Measurement element provides a description of a
        measurement type present in the configuration of a Test Article.
        Measurements are related to physical phenomena that occur on a Test
        Article.  The Measurement element is a general description of the
        properties of a measurement type that will potentially be realized as
        measurement data that is contained in TmNSDataMessages.
      </xsd:documentation>
      <xsd:documentation>
        The properties of a Measurement element describe both the
        design requirements and the resulting implementation details of a
        described measurement type.  Specific elements and attributes are
        included to describe both the analog and digital properties of the
        Measurement elements.
      </xsd:documentation>
      <xsd:documentation>
        The Name element of the Measurement describes the mnemonic for
        the Measurement element.  The value of the Name element must be unique
        among all Measurement Names within a MeasurementDomain.
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementID is a unique 32-bit value.  The scope of uniqueness is
        the MeasurementDomain.
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementType element indicates the type of measurement
        being described and can be set to one of the following values:
        "Analog", "Discrete", "DigitalBus", "Computed"
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementActive element indicates if a Measurement is to
        be acquired in the configuration specified by the MDL Instance
        Document.
      </xsd:documentation>
      <xsd:documentation>
        The DeliveryClass element is an enumeration of type
        mdl:DeliveryClassEnum that can be set to one of the following values:
        "Voice", "FlightSafety", or "BestEffort"
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementTimeRef element may be used to identify the Measurement,
        which shall be of MeasurementType "Time", and represents the timestamp
        associated with this Measurement (see IRIG 106 Chapter 24 for Package
        Time Measurement Scoping Rules).
      </xsd:documentation>
      <xsd:documentation>
        The DataAttributes element describes the analog and digital
        attributes of a measurement on a Test Article.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="MeasurementID" type="ThirtyTwoBit"/>
      <xsd:element name="MeasurementTypes" type="MeasurementTypesType"/>
      <xsd:element name="MeasurementActive" type="xsd:boolean"/>
      <xsd:element name="ProperName" type="ProperNameEnumExtType"/>
      <xsd:element name="DeliveryClass" type="DeliveryClassEnum" minOccurs="0"/>
      <xsd:element name="MeasurementTimeRef" type="MeasurementRefType" minOccurs="0"/>
      <xsd:element name="DataAttributes" type="DataAttributesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MeasurementRefType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementRef element contains an IDREF attribute, of
        type xsd:IDREF, that shall reference the ID attribute of a Measurement
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ProperNameEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The ProperNameEnumExtType provides an extensible enumeration.  If the
        value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the string representing the extended
        enumeration value. If the value is any other enumeration, the
        "Extension" attribute further specifies the enumeration's properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="ProperNameEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>	

  <xsd:simpleType name="ProperNameEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ProperNameEnum is an extensible enumeration of the supported
        "proper names" of element.  A proper name is a means of identifying that
        the element represents a well-defined field from a standardized data
        stream, or a standardized data stream itself.  If the element does not
        represent a proper name, the value shall be set to None.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="None"/>
      <xsd:enumeration value="ARINC429"/>
      <xsd:enumeration value="ARINC429Label"/>
      <xsd:enumeration value="ARINC429SDI"/>
      <xsd:enumeration value="ARINC429Parity"/>
      <xsd:enumeration value="ARINC429SSM"/>
      <xsd:enumeration value="ARINC429Data"/>
      <xsd:enumeration value="IRIGHighTime"/>
      <xsd:enumeration value="IRIGLowTime"/>
      <xsd:enumeration value="IRIGMicroTime"/>
      <xsd:enumeration value="MILSTD1553"/>
      <xsd:enumeration value="MILSTD1553CommandWord"/>
      <xsd:enumeration value="MILSTD1553DataWord"/>
      <xsd:enumeration value="MILSTD1553StatusWord"/>
      <xsd:enumeration value="MILSTD1553Sync"/>
      <xsd:enumeration value="MILSTD1553RTAddress"/>
      <xsd:enumeration value="MILSTD1553SubAddress"/>
      <xsd:enumeration value="MILSTD1553TransmitReceive"/>
      <xsd:enumeration value="MILSTD1553Parity"/>
      <xsd:enumeration value="MILSTD1553WordCount"/>
      <xsd:enumeration value="MILSTD1553ModeCode"/>
      <xsd:enumeration value="MILSTD1553MessageError"/>
      <xsd:enumeration value="MILSTD1553Instrumentation"/>
      <xsd:enumeration value="MILSTD1553ServiceRequest"/>
      <xsd:enumeration value="MILSTD1553Reserved"/>
      <xsd:enumeration value="MILSTD1553BroadcastCommandReceived"/>
      <xsd:enumeration value="MILSTD1553Busy"/>
      <xsd:enumeration value="MILSTD1553SubsystemFlag"/>
      <xsd:enumeration value="MILSTD1553DynamicBusControlAcceptance"/>
      <xsd:enumeration value="MILSTD1553TerminalFlag"/>
      <xsd:enumeration value="MILSTD1553BCtoRT"/>
      <xsd:enumeration value="MILSTD1553RTtoBC"/>
      <xsd:enumeration value="MILSTD1553RTtoRT"/>
      <xsd:enumeration value="MILSTD1553ModeCommand"/>
      <xsd:enumeration value="PCM"/>
      <xsd:enumeration value="PCMFrameSync"/>
      <xsd:enumeration value="PCMSubframeID"/>
      <xsd:enumeration value="PCMCRC"/>
      <xsd:enumeration value="PCMMinorFrame"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="DataAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        The DataAttributes element describes the analog and digital
        attributes of a measurement on a Test Article.
      </xsd:documentation>
      <xsd:documentation>
        The PCMMeasurementRef is used for TMATS-described PCM stream
        measurements to indicate the source of the bus measurement.
      </xsd:documentation>
      <xsd:documentation>
        The UnitRef and BaseUnit elements describe the instrumentation
        units of measure for the Measurement.
      </xsd:documentation>
      <xsd:documentation>
        The Calibration element, of type mdl:CalibrationType, is a
        container for individual input and output pairs used during the
        calibration of the DAU as well as the date of the last calibration.
      </xsd:documentation>
      <xsd:documentation>
        The Uncertainty element describes the uncertainty of the
        measurement through a confidence level over a specified confidence
        interval.
      </xsd:documentation>
      <xsd:documentation>
        The AnalogAttributes element describes the properties of the
        measurement when it exists in an analog form.
      </xsd:documentation>
      <xsd:documentation>
        The DigitalAttributes element describes the properties of data
        when it exists in a digitally encoded form.
      </xsd:documentation>
      <xsd:documentation>
        Note that if AnalogAttributes are used to define a measurement's
        signal characteristics and DigitalAttributes are used to define
        a measurement's sample rate along with its constraints, the sample
        rate should be used by a component during validation and should take
        precedence over the AnalogAttributes for determining the configuration.
        This allows for purposeful over or undersampling defined by the user,
        while still documenting the signal's actual properties.
      </xsd:documentation>
      <xsd:documentation>
        The TimeAttributes element describes the properties of a 
        timestamp as a measurement.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="PCMMeasurementRefs" type="PCMMeasurementRefsType" minOccurs="0"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
      <xsd:element name="Uncertainties" type="UncertaintiesType" minOccurs="0"/>
      <xsd:element name="Calibration" type="CalibrationType" minOccurs="0"/>
      <xsd:element name="AnalogAttributes" type="AnalogAttributesType" minOccurs="0"/>
      <xsd:element name="DigitalAttributes" type="DigitalAttributesType" minOccurs="0"/>
      <xsd:element name="TimeAttributes" type="TimeAttributesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PCMMeasurementRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The PCMMeasurementRefsType element is the top-level container for an unbounded
        list of PCMMeasurementRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PCMMeasurementRef" type="PCMMeasurementRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="PackageDefinitionsType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageDefinitions element in a MeasurementDomain element is a
        container for one or more PackageDefinition elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PackageDefinition" type="PackageDefinitionType" maxOccurs="unbounded">
        <xsd:unique name="UniquePCMMinorFrameIndex">
          <xsd:selector xpath="mdl:PCMMinorFrame"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStructuresType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructures element in a MeasurementDomain element is a
        container for one or more
        DataStructure elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataStructure" type="DataStructureType" maxOccurs="unbounded">
        <xsd:unique name="UniqueDataStructureFieldName">
          <xsd:selector xpath=".//mdl:DataStructureField"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        <xsd:unique name="UniqueDataStructureFieldSetName">
          <xsd:selector xpath=".//mdl:DataStructureFieldSet"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageDefinition element describes a Package type, which
        is identified by the PackageDefinitionID (PDID).  The value of the
        PackageDefinitionID shall be unique among all PackageDefinitionIDs
        within a MeasurementDomain.  The StandardPackageHeader element, of
        type xsd:boolean, indicates whether or not this Package type includes
        the standard package header.  If the StandardPackageHeader is false, the
        PackageHeaderDefinition element, of type PackageHeaderDefinitionType, is
        used to describe the structure and contents of the non-standard package
        header.
      </xsd:documentation>
      <xsd:documentation>
        In a PackageDefinition, there is a choice between a structure using a
        DataStructure and a reference to a TMATS-defined PCM data stream.
      </xsd:documentation>
      <xsd:documentation>
        In the case that a DataStructure is used, another choice is presented
        between a DataMap and a DataStreamMessageRef. The DataMap element
        provides a mapping of measurements into the package's DataStructure. The
        DataStreamMessageRef provides instruction to package messages that pass
        the filters of a target DataStreamMessage. When a DataStreamMessage is
        packaged, ProperNames will be used as linkage between the DataStructure
        referenced in the PackageDefinition and the DataStructure referenced in
        the DataStreamMessage, e.g. a field in the Message with a ProperName of
        ARINC429Data will be placed in the field in the Package with a
        ProperName of ARINC429Data. Note that this implies a given
        PackageDefinition will only package individual messages from a
        DataStream. If more than one message is desired to be placed in a
        package, it is recommended to extract the bus messages into measurements
        and use a DataMap to package those measurements explicitly.
      </xsd:documentation>
      <xsd:documentation>
        In the case that a PCM data stream is used, the DataStreamRef will point
        to the TMATS-described DataStream to be packaged, with the PCMMinorFrame
        elements optionally used to specify target minor frames to be packaged.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="PackageDefinitionID" type="ThirtyTwoBit"/>
      <xsd:element name="StandardPackageHeader" type="xsd:boolean"/>
      <xsd:element name="PackageHeaderDefinition" type="PackageHeaderDefinitionType" minOccurs="0"/>
      <xsd:choice>
        <xsd:sequence>
          <xsd:element name="DataStructureRef" type="DataStructureRefType"/>
          <xsd:choice>
            <xsd:element name="DataMaps" type="DataMapsType">
              <xsd:unique name="UniqueDataWordNameInPackageDefinition">
                <xsd:selector xpath=".//mdl:DataWord"/>
                <xsd:field xpath="mdl:Name"/>
              </xsd:unique>
            </xsd:element>
            <xsd:element name="DataStreamMessageRef" type="DataStreamMessageRefType"/>
          </xsd:choice>
        </xsd:sequence>
        <xsd:sequence>
          <xsd:element name="DataStreamRef" type="DataStreamRefType"/>
          <xsd:element name="PCMMinorFrames" type="PCMMinorFramesType" minOccurs="0"/>
        </xsd:sequence>
      </xsd:choice>
      <xsd:element name="AggregateRate" type="AggregateRateType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageDefinitionRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageDefinitionRefsType element is a
        container for one or more PackageDefinitionRefType elements 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PackageDefinitionRef" type="PackageDefinitionRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageDefinitionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PackageDefinitionRef must refer to
        the ID attribute of a PackageDefinition within the same
        MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageHeaderDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageHeaderDefinition element describes the set of data
        fields that make up a package header and the data that gets mapped to
        these data fields.  The PackageHeaderDefinition element is not
        required when the defined Package includes the standard package
        header.  When the standard package header is not used, the
        PackageHeaderDefinition element can be used to describe the makeup of
        the package header and the sources of the data that populates the
        package fields of the package header.
      </xsd:documentation>
      <xsd:documentation>
        The DataMap element describes the mapping of digital data to
        the package fields defined by the PackageHeaderStructure element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PackageHeaderStructure" type="PackageHeaderStructureType" minOccurs="0">
        <xsd:unique name="UniqueFieldDescriptionNameInPackageHeaderDefinition">
          <xsd:selector xpath=".//mdl:FieldDescription"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="DataMaps" type="DataMapsType" minOccurs="0">
        <xsd:unique name="UniqueDataWordNameInPackageHeaderDefinition">
          <xsd:selector xpath=".//mdl:DataWord"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageHeaderStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageHeaderStructure element describes the set of
        package fields that make up the package header and can carry data.
        The fields do not need to cover all bits in a package header, and the
        fields may overlap.
      </xsd:documentation>
      <xsd:documentation>
        The PDIDFieldDescription element describes the DataStructureField
        in a package header that shall contain the PDID. The
        PDIDFieldDescription element shall not be used when using the
        standard package header.
      </xsd:documentation>
      <xsd:documentation>
        The StatusFlagFields element describes the set of package
        fields within a package header that contain the StatusFlags field.
        Although the StatusFlags field is considered a single field in the
        standard package header, the StatusFlagFields element can describe each
        individual status flag in both its structure and content.  The
        StatusFlagFields element can be used when using the standard package
        header to provide specific descriptions for each individual flag for
        this Package type.
      </xsd:documentation>
      <xsd:documentation>
        The NonTmNSPackageHeaderFieldDescription element describes a field
        in a package header that is not defined by the standard package header.
        The NonTmNSPackageHeaderFieldDescription element shall not be used when
        using the standard package header.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PDIDFieldDescription" type="DataStructureFieldType" minOccurs="0"/>
      <xsd:element name="PackageLengthField" type="PackageLengthFieldType" minOccurs="0"/>
      <xsd:element name="StatusFlagFields" type="FieldDescriptionsType" minOccurs="0"/>
      <xsd:element name="PackageTimeDeltaFieldDescription" type="PackageTimeDeltaFieldDescriptionType" minOccurs="0"/>
      <xsd:element name="NonTmNSPackageHeaderFields" type="FieldDescriptionsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataMapsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataMaps element describes the mapping of digital data
        (e.g., measurement data) to defined fields that can carry the data
        (e.g., package fields).  The individual mappings of digital data into
        fields is described by the contained DataWordToFieldMap elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataWordToFieldMap" type="DataWordToFieldMapType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataWordToFieldMapType">
    <xsd:annotation>
      <xsd:documentation>
        The DataWordToFieldMap element describes how digital data is
        broken down or aggregated into data words and mapped into fields
        (e.g., package fields).  Each DataWordToFieldMap element contains
        exactly one DataWord element and either a DataStructureFieldRef element
        or a DataStructureFieldSetRef element.
      </xsd:documentation>
      <xsd:documentation>
        The FillValue element, of type mdl:FlexibleLong, describes a
        constant value string that will be used to fill unused space in a
        field (defined by a DataStructureFieldRef element or a
        DataStructureFieldSetRef element).  The unused space appears when a
        DataWord element is smaller in size than the field it is mapped to in
        the described DataWordToFieldMap element.  The value string of the
        FillValue element shall appear only an integer number of times.  Any
        remainder space that cannot contain the entire FillValue element's
        value string will be indeterminate.
      </xsd:documentation>
      <xsd:documentation>
        The TimeOrderEnum element describes the temporal ordering of
        instances of digital data (e.g., measurement data) within a field
        (defined by a DataStructureFieldRef element or a
        DataStructureFieldSetRef element).
      </xsd:documentation>
      <xsd:documentation>
        The TimeOffset and TimeOffsetIncrement elements, of type
        xsd:unsignedInt, are 32-bit values in units of nanoseconds that may be
        used to describe time offsets of one or more samples of a packaged
        Measurement, where the time offsets with respect to the Package header
        time are known a-priori.  If the time offsets are not known a priori,
        the TimeOffset and TimeOffsetIncrement are not used.
      </xsd:documentation>
      <xsd:documentation>
        Given a Message header timestamp, Tm, a Package header time delta, Tp,
        an a-priori TimeOffset of To, and an a-priori TimeOffsetIncrement of Ti,
        the time at which the k-th sample of a Measurement from the given
        Package was collected is given by the equation T = Tm + Tp + To + k*Ti
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataWord" type="DataWordType"/>
      <xsd:choice>
        <xsd:element name="DataStructureFieldRef" type="DataStructureFieldRefType"/>
        <xsd:element name="DataStructureFieldSetRef" type="DataStructureFieldSetRefType"/>
      </xsd:choice>
      <xsd:element name="FillValue" type="FlexibleLong" minOccurs="0"/>
      <xsd:element name="TimeOrder" type="TimeOrderEnum"/>
      <xsd:element name="TimeOffset" type="xsd:unsignedInt" minOccurs="0"/>
      <xsd:element name="TimeOffsetIncrement" type="xsd:unsignedInt" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataWordType">
    <xsd:annotation>
      <xsd:documentation>
        The DataWord element describes how values from Syllable
        elements are masked and packed into a DataWord element that is carried
        in DataStructureField elements and/or DataStructureFieldSet elements.
        The DataWord element describes a set of contiguous bits that contain
        data.  The specification of the mappings in the DataWordToFieldMap
        element results in a full description of how data (e.g., measurement
        data) is carried in a set of fields (e.g., a PackagePayload).
      </xsd:documentation>
      <xsd:documentation>
        The DataWordWidth element describes the width or length of the
        DataWord element.  The DataWordWidth element is an mdl:FlexibleLong
        value/units pair.  The units for this element shall be in units of
        digital data lengths such as bits or bytes.
      </xsd:documentation>
      <xsd:documentation>
        The Measurement element that is referenced by the
        MeasurementRef element provides an interface through which input data
        (e.g., measurement data) is transferred to be placed into a DataWord
        element.
      </xsd:documentation>
      <xsd:documentation>
        See SyllableType documentation for details on the encoding/decoding
        process.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="DataWordWidth" type="ValueUnitType"/>
      <xsd:element name="MeasurementRef" type="MeasurementRefType"/>
      <xsd:element name="Syllables" type="SyllablesType">
        <xsd:unique name="UniqueSyllableName">
          <xsd:selector xpath="mdl:Syllable"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SyllablesType">
    <xsd:annotation>
      <xsd:documentation>
        The SyllablesType element is the top-level container for an unbounded
        list of Syllable elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Syllable" type="SyllableType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SyllableType">
    <xsd:annotation>
      <xsd:documentation>
        The Syllable element describes a set of bits that are put into
        a DataWord element.  The Syllable element also describes the placement
        of bits within the DataWord element.  The data that is contained in a
        Syllable element comes from either a MeasurementRef element or a
        ConstantValue element.  If the containing DataWord element contains
        only a single Syllable element, and the DataWord element and the
        Syllable element are of the same length, then no other elements are
        needed for the description of the Syllable element.  Otherwise, a
        subset of the data described by the Syllable element can be selected
        using the DataWordOffset, SyllableWidth, SyllableStartBit, and
        SyllableMask elements.  If the DataWord element contains only a single
        Syllable element, and the SyllableWidth is not provided, it is assumed
        that the length of the Syllable is the same as the length of the
        DataWord.
      </xsd:documentation>
      <xsd:documentation>
        The SyllableMask element, of type mdl:MaskType, describes a
        bit mask that is applied to the bits described by the Syllable element
        before the bits are placed within the containing DataWord element.
        This mask is applied with a bitwise AND operation.
      </xsd:documentation>
      <xsd:documentation>
        The SyllableWidth element describes the width or length of the
        Syllable element's bits that are to be placed within the containing
        DataWord element.  The SyllableWidth element is an mdl:FlexibleLong
        value/units pair.  The units for this element shall be in units of
        digital data lengths such as bits or bytes.  The value of the
        SyllableWidth element shall not exceed the size of the containing
        DataWord element.
      </xsd:documentation>
      <xsd:documentation>
        The SyllableStartBit element, of type xsd:positiveInteger,
        describes the starting bit location of the selected bits obtained from
        the Syllable element.  These selected bits are then placed in the
        containing DataWord element.  Beginning with the indicated start bit
        where the Least Significant Bit (LSB) is bit location one, the
        selected bits are the contiguous string of bits with a total length
        that matches the value of the SyllableWidth element.
      </xsd:documentation>
      <xsd:documentation>
        The DataWordOffset element, of type xsd:positiveInteger,
        describes the offset from the start of the containing DataWord element
        for the selected bits of the Syllable element.  A value of "0"
        indicates that the selected bits of the Syllable element are inserted
        starting at the LSB of the DataWord element.  If the DataWordOffset
        element is not present, then the value of the offset is assumed to be
        "0".
      </xsd:documentation>
      <xsd:documentation>
        When encoding a measurement into a data word, a series of syllables
        are created and placed in the data word. To encode a given syllable,
        first the SyllableMask is applied to the measurement's data. Then,
        the Syllable will take SyllableWidth bytes from the masked measurement
        with an offset of SyllableStartBit. Finally, the syllable is placed
        in the DataWord after the offset DataWordOffset.
      </xsd:documentation>
      <xsd:documentation>
        When decoding a data word into a measurement, the data word is broken
        down into its respective syllables which are reassembled into the
        original measurement. To decode a given syllable, first
        SyllableWidth bits are extracted from the data word at offset
        DataWordOffset. Then, the extracted bits are masked by the
        SyllableMask by offsetting them by SyllableStartBit within the mask.
        Each of the masked values created in this way are then ORed together
        in a reverse of the masking which extracted the syllables to
        recreate the original measurement.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="SyllableMask" type="MaskType" minOccurs="0"/>
      <xsd:element name="SyllableWidth" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="SyllableStartBit" type="xsd:positiveInteger" minOccurs="0"/>
      <xsd:element name="DataWordOffset" type="xsd:nonNegativeInteger" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageInstancesType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageInstancesType element is the top-level container for an unbounded
        list of PackageInstance elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PackageInstance" type="PackageInstanceType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="PackageInstanceType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageInstance elements describe which Packages may be
        contained in the TmNSDataMessagePayload of this TmNSDataMessage type.
        Each PackageInstance element contains one required
        PackageDefinitionRef element and one optional Index attribute, of type
        xsd:positiveInteger.  The PackageDefinitionRef element refers to a
        PackageDefinition element that can be contained in the
        TmNSDataMessagePayload.
      </xsd:documentation>
      <xsd:documentation>
        The Index attribute may be included if the order of Packages
        in the TmNSDataMessagePayload is known.  The value of the Index
        attribute shall be unique within the scope of a MessageDefinition
        element.  The MDL language does not require a particular convention
        for the values of the Index attribute; the recommended convention is
        to begin with a value of "1" and increment by one.  If the value of
        the FixedPackageOrder element for this TmNSDataMessage type is "true",
        then each PackageInstance element shall have an Index value specified.
        The implication is that the TmNSDataMessagePayload shall have Packages
        that occur in the sequence specified by the value of the Index
        attribute.  If the value of the FixedNumberOfPackages element is
        "false", the sequence of Packages may repeat any number of times in a
        TmNSDataMessagePayload.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PackageDefinitionRef" type="PackageDefinitionRefType"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>

  <xsd:complexType name="FieldLocationType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldLocation element describes the location and width of
        a field (e.g., a DataStructureField).  In the case that this field is
        repeated (the value of the FieldRepetitions element is greater than
        1), this element describes the offset for the first location of the
        described field.
      </xsd:documentation>
      <xsd:documentation>
        The FieldWidth element describes the width or size of a field.
        The FieldWidth element is an mdl:FlexibleLong value/units pair.  The
        units for this element shall be in units of digital data lengths such
        as bits or bytes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="FieldOffset" type="FieldOffsetType"/>
      <xsd:element name="FieldWidth" type="ValueUnitType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldLocationRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a FieldLocationRef must refer to the
        ID attribute of a FieldLocation in the same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldEncodingType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldEncoding element describes the encoding of digital
        data contained within the described field (e.g. a DataStructureField).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Endianness" type="EndiannessEnum"/>
      <xsd:element name="DigitalEncoding" type="DigitalEncodingEnumExtType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStructureFieldsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructureFieldsType element contains is the top-level container for an unbounded
        list of DataStructureField elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataStructureField" type="DataStructureFieldType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStructureFieldType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructureField element describes a location in a DataStructure
        that can carry data.
      </xsd:documentation>
      <xsd:documentation>
        The FieldRepetitions element, of type xsd:nonNegativeInteger,
        describes the number of repetitions for this DataStructureField. If the
        value of this element is equal to 1, the DataStructureField element
        being described occurs only once in the containing DataStructure
        element.  If the value of this element is greater than 1, the
        corresponding DataStructureField element has multiple locations, each
        offset by the number of bits indicated by the value of the
        FieldOffsetIncrement element from the previous location.  If the value
        of this element is equal to 0, the DataStructureField element repeats
        indefinitely.
      </xsd:documentation>
      <xsd:documentation>
        The FieldOffsetIncrement element, of type mdl:ValueUnitType,
        specifies the number of digital data units to increment from one
        location of this DataStructureField element to a subsequent location.
        The units for this element shall be in units of digital data lengths
        such as bits or bytes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="ProperName" type="ProperNameEnumExtType"/>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
      <!--TBD REMOVE-->
      <xsd:element name="FieldRepetitions" type="xsd:nonNegativeInteger"/>
      <xsd:element name="FieldOffsetIncrement" type="ValueUnitType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStructureFieldRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DataStructureFieldRef must refer to
        the ID attribute of a DataStructureField within the same
        MeasurementDomain. The Index is used to refer to a particular
        repetition of the field within the DataStructure.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>

  <xsd:complexType name="DataStructureFieldSetsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructureFieldSetsType element contains is the top-level container for an unbounded
        list of DataStructureFieldSet elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataStructureFieldSet" type="DataStructureFieldSetType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStructureFieldSetType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructureFieldSet element describes a set of
        DataStructureField elements.  When mapping to a DataStructureFieldSet
        element using a DataWordToFieldMap Element it is implied that the
        left-most bits of the DataWord element go into the left-most bits of
        the DataStructureFieldSet element.
      </xsd:documentation>
      <xsd:documentation>
        Within a DataStructureFieldSet, all DataStructureFields shall
        contain the same value for FieldRepetitions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProperName" type="ProperNameEnumExtType"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="DataStructureFields" type="DataStructureFieldsType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStructureFieldSetRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DataStructureFieldSetRef must refer
        to the ID attribute of a DataStructureFieldSet within the same
        MeasurementDomain. The Index is used to refer to a particular
        repetition of the field set within the DataStructure.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>

  <xsd:complexType name="FieldOffsetType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldOffset element describes the placement of a field
        with respect to other known positions within a set of fields (e.g., a
        DataStructure).  The FieldOffset element indicates the location of
        the first bit of a field.  Along with the OffsetValue element, the
        FieldOffset element shall contain only the OffsetFromLocation element
        or the OffsetFromDataStructureFieldSet element.
      </xsd:documentation>
      <xsd:documentation>
        The OffsetValue element contains the value of the offset for
        the field.  The FieldOffset element is an mdl:FlexibleLong value/units
        pair.  The units for this element shall be in units of digital data
        lengths such as bits or bytes.  If neither the OffsetFromLocation
        element nor the OffsetFromDataStructureFieldSet element is present, the
        offset indicated by the OffsetValue element is relative to the first
        bit of the set of fields (e.g., a Package).
      </xsd:documentation>
      <xsd:documentation>
        The OffsetFromLocation element contains an IDREF attribute, of
        type xsd:IDREF, that can be used to reference the ID attribute of
        another FieldLocation element.  If this element is present, the offset
        indicated by the OffsetValue element is relative to the first bit of
        the referenced FieldLocation element.
      </xsd:documentation>
      <xsd:documentation>
        The OffsetFromDataStructureFieldSet element contains an IDREF
        attribute, of type xsd:IDREF, that shall reference the ID attribute of
        a DataStructureFieldSet element.  If this element is present, the offset
        indicated by the OffsetValue element is relative to the last bit of
        the referenced DataStructureFieldSet element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="OffsetValue" type="ValueUnitType"/>
      <xsd:element name="OffsetFromLocationRef" type="FieldLocationRefType" minOccurs="0"/>
      <xsd:element name="OffsetFromDataStructureFieldSetRef" type="DataStructureFieldSetRefType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructure element describes a DataStructure,
        which is a set of data fields that make up the DataStructure and can
        carry data.  The data fields do not need to cover all bits in a
        DataStructure, and may overlap.  The DataStructure elements are
        contained in the DataStructures container element in a
        MeasurementDomain.  They are defined at the MeasurementDomain scope and
        referenced within PackageDefinitions and DataStreams.  A DataStructure
        may be used by multiple PackageDefinitions and DataStreams in a
        MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="DataStructureFields" type="DataStructureFieldsType" minOccurs="0"/>
      <xsd:element name="DataStructureFieldSets" type="DataStructureFieldSetsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStructureRefType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStructureRef element contains an IDREF attribute,
        of type xsd:IDREF, that shall reference the ID attribute of a
        DataStructure element within the same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageLengthFieldType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageLengthField element describes the length of a
        Package and the field that contains the PackageLength field.  The
        PackageLengthField element shall not be used when using the standard
        package header.
      </xsd:documentation>
      <xsd:documentation>
        If the Package has a fixed length, the FixedPackageLength
        indicates the length of the Package.  The Package length includes the
        size of the package header.  The FixedPackageLength element is an
        mdl:FlexibleLong value/units pair.  The units for this element shall
        be in units of digital data lengths such as bits or bytes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FixedPackageLength" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="PackageLengthFieldDescription" type="PackageLengthFieldDescriptionType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageLengthFieldDescriptionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageLengthFieldDescription element describes the
        field within a package header that contains the Package length.
        The FieldLocation element describes the location and width of a
        field within a Package.  The FieldEncoding element describes
        the encoding and format of the digital values contained within a
        field.  The UnitRef and BaseUnit elements describe the units of
        measure for describing the field.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageTimeDeltaFieldDescriptionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageTimeDeltaFieldDescription element describes the field in a
        package header that shall contain the PackageTimeDelta field.  The
        PackageTimeDeltaFieldDescription element shall not be used when using
        the standard package header.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="TimestampDefinition" type="TimestampDefinitionType" minOccurs="0"/>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldDescriptionsType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldDescriptions element is a container for one or more
        FieldDescription elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FieldDescription" type="FieldDescriptionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FieldDescriptionType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldDescription element contains a FieldLocation element and a
        FieldEncoding element for describing a field.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionsType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageDefinitions element in a MeasurementDomain element is a
        container for one or more MessageDefinition elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MessageDefinition" type="MessageDefinitionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        A MessageDefinition element describes a TmNSDataMessage type.
        Please refer to the descriptions of the MaximumMessageLength element,
        the MaximumMessageLatency element, and the FixedMessageLength element
        for an explanation of the finalization constraints placed on the
        defined TmNSDataMessage type.  The following lists the elements and
        attributes of the MessageDefinition elements.
      </xsd:documentation>
      <xsd:documentation>
        The MessageDefinitionID element, of type mdl:ThirtyTwoBit,
        indicates the MessageDefinitionID (MDID) of this TmNSDataMessage type.
        The MessageDefinitionID shall be unique among all MessageDefinitionIDs
        within a MeasurementDomain.
      </xsd:documentation>
      <xsd:documentation>
        The MessageVersion element, of type xsd:string, describes the
        version of the TmNSDataMessage protocol that the MessageDefinition
        element follows.
      </xsd:documentation>
      <xsd:documentation>
        The OptionWordCount element, of type FourBitHex, specifies the number
        of 32-bit words in the ApplicationDefinedFields.
      </xsd:documentation>
      <xsd:documentation>
        The ApplicationDefinedFields element describes a set of optional
        message fields within a message header. The format of the
        ApplicationDefinedFields is similar to TCP Options.
      </xsd:documentation>
      <xsd:documentation>
        The DSCPTableEntryRef element contains an IDREF attribute of
        type xsd:IDREF that references the ID attribute of a DSCPTableEntry
        element.  The DSCPValue in the DSCPTableEntry indicates the Diffserv
        Code Point markings that shall be applied IP header of the message.
      </xsd:documentation>
      <xsd:documentation>
        The DestinationAddress element, of type mdl:IPAddress, may be
        used to describe the multicast or unicast address to which the message
        is published.  The DestinationPort element, of type
        xsd:unsignedShort(in the range [0,65535]) describes the destination
        port address of the transport.  If this element is not provided, the
        default port as specified by IRIG 106 Chapter 26 will be used.
      </xsd:documentation>
      <xsd:documentation>
        The MaximumMessageLength element indicates the maximum length
        of this TmNSDataMessage type.  The implied meaning is that when a
        TmNSDataMessage of this type reaches that length, or an additional
        Package would cause the length of the TmNSDataMessage to exceed this
        length, the TmNSDataMessage will be finalized with the current
        TmNSDataMessagePayload.  The MaximumMessageLength element may be used
        in conjunction with the MaximumMessageLatency element; however, the
        MaximumMessageLength element shall not be present if the
        FixedMessageLength element is contained in the described
        MessageDefinition element.  The MaximumMessageLength element is an
        mdl:FlexibleLong value/units pair.  The units for this element shall
        be in units of digital data lengths such as bytes or kilobytes.
      </xsd:documentation>
      <xsd:documentation>
        The MaximumMessageLatency element indicates the maximum amount
        of time that a NetworkNode shall wait before sending a TmNSDataMessage
        of this type.  The implication is that when this timeout occurs,
        starting from the last sent time for a TmNSDataMessage of this type,
        the current TmNSDataMessage will be finalized with the current
        TmNSDataMessagePayload.  The MaximumMessageLatency element may be used
        in conjunction with the MaximumMessageLength element; however, the
        MaximumMessageLatency element shall not be present if the
        FixedMessageLength element is contained in the described
        MessageDefinition element.  The MaximumMessageLatency element is a
        floating-point value/units pair.  The units for this element shall be
        in units of time such as seconds or milliseconds.
      </xsd:documentation>
      <xsd:documentation>
        If the TmNSDataMessage has a fixed length, the
        FixedMessageLength element indicates the length of TmNSDataMessages of
        this type.  This length includes the TmNSDataMessageHeader.  This
        value shall match the value that will be placed into the
        TmNSDataMessageHeader.  If the TmNSDataMessage does not have a fixed
        length, then this element shall not be present in the
        MessageDefinition element, but a length value will appear in each
        TmNSDataMessageHeader.  If the FixedMessageLength element is contained
        in the described MessageDefinition element, the MaximumMessageLatency
        element and the MaximumMessageLength element shall not be present.  The
        FixedMessageLength element is an mdl:FlexibleLong value/units pair.
        The units for this element shall be in units of digital data lengths
        such as bytes or kilobytes.
      </xsd:documentation>
      <xsd:documentation>
        The FixedPackageOrder element, of type xsd:boolean, indicates
        whether or not the Packages contained within the
        TmNSDataMessagePayload shall occur in a fixed order.  If the value is
        set to "false" the ordering for a given MessageDefinition is variable
        and the PDID of each Package shall be unambiguously determinable.  The
        PDID is necessary when the ordering is variable so that each Package
        within a TmNSDataMessagePayload can be differentiated.
      </xsd:documentation>
      <xsd:documentation>
        The FixedNumberOfPackages element, of type xsd:boolean,
        indicates whether or not the Packages contained within a
        TmNSDataMessagePayload shall occur a fixed number of times.  If the
        value is set to "true", Packages in a TmNSDataMessagePayload shall
        appear exactly the same number of times their corresponding
        PackageInstance elements appear in the MessageDefinition element.  If
        the value is set to "false", Packages in a TmNSDataMessagePayload can
        appear any number of times including zero.
      </xsd:documentation>
      <xsd:documentation>
        For example, if the FixedPackageOrder element has a value of
        true, the FixedNumberOfPackages element has a value of "false", and
        three included Package instances P1, P2, and P3 have Index values "1",
        "2", and "3", respectively, then the following sequences would be
        valid TmNSDataMessagePayloads: [P1, P2, P3], [P1, P2, P3, P1, P2, P3],
        [P1, P2, P3, P1], and [(P1, P2, P3)*].  The sequence [P2, P3, P1]
        would not be valid.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="MessageDefinitionID" type="ThirtyTwoBit"/>
      <xsd:element name="MessageVersion" type="xsd:string" minOccurs="0"/>
      <xsd:element name="OptionWordCount" type="FourBitHex"/>
      <xsd:element name="ApplicationDefinedFields" type="FieldDescriptionsType" minOccurs="0">
        <xsd:unique name="UniqueFieldDescriptionNameInMessageDefinition">
          <xsd:selector xpath="mdl:FieldDescription"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType"/>
      <xsd:element name="DestinationAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="DestinationPort" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="AggregateRate" type="AggregateRateType" minOccurs="0"/>
      <xsd:element name="MaximumMessageLength" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="MaximumMessageLatency" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="FixedMessageLength" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="FixedPackageOrder" type="xsd:boolean"/>
      <xsd:element name="FixedNumberOfPackages" type="xsd:boolean"/>
      <xsd:element name="PackageInstances" type="PackageInstancesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageDefinitionRefsType element contains is the top-level container for an unbounded
        list of MessageDefintionRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MessageDefinitionRef" type="MessageDefinitionRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a MessageDefinitionRef must refer to
        the ID attribute of a MessageDefinitionType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessageGroupsType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageGroups element in a MeasurementDomain element is a
        container for one or more MessageGroup elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MessageGroup" type="MessageGroupType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MessageGroupType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageGroup element provides a method to group messages.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRefs" type="MessageDefinitionRefsType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessageGroupRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageGroupRefsType element is a
        container for one or more MessageGroupRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MessageGroupRef" type="MessageGroupRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MessageGroupRefType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageGroupRef element contains an IDREF attribute, of
        type xsd:IDREF, that shall reference the ID attribute of a MessageGroup
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStreamsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreams element is a container for one or more
        DataStream elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataStream" type="DataStreamType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStreamType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStream element describes a streaming data format used
        to transfer encoded data on a Test Article Network.  Typically, access
        to the described data stream is dependent upon a set of selected
        technologies (hardware and/or software) to implement the specified
        protocols, interfaces, and formats of the data stream.  The DataStream
        element describes an instantiation of a selected data stream
        technology that appears on a Test Article Network as a means of
        transporting data (e.g., measurement data).  Each technology-specific
        description within the DataStream element will indicate how data is
        organized into defined data structures and formats.  Furthermore, each
        technology-specific description within the DataStream element will
        specify how individual data units can be extracted and aggregated into
        sampled measurements.  Potentially, these sampled measurements may be
        refined and processed before they are published as measurement data in
        TmNSDataMessages.
      </xsd:documentation>
      <xsd:documentation>
        The Name element, of type xsd:token, describes the textual
        identifier of the described DataStream element.  The XML processor
        will remove line feeds, carriage returns, tabs, leading and trailing
        spaces, and multiple spaces from all elements of type xsd:token.
      </xsd:documentation>
      <xsd:documentation>
        The ReferenceDocumentation element, of type xsd:string,
        specifies an external document or other source material that provides
        more details, descriptions, or specifications regarding the formats
        and properties of the described DataStreamMessages element.
      </xsd:documentation>
      <xsd:documentation>
        The DataRate element, of type mdl:ConditionParameters,
        contains any number of ConditionParameter elements and describes the
        average number of transferred digital data units per unit of time for
        a described DataStream element.
      </xsd:documentation>
      <xsd:documentation>
        The BusSpeed element, of type xsd:double, describes the line
        rate of the bus media in units of Hertz.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProperName" type="ProperNameEnumExtType"/>
      <xsd:element name="ReferenceDocumentation" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="DataRate" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="BusSpeed" type="xsd:double" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="DataStreamMessages" type="DataStreamMessagesType" minOccurs="0">
          <xsd:unique name="UniqueDataStreamMessagesName">
            <xsd:selector xpath="mdl:DataStreamMessage"/>
            <xsd:field xpath="mdl:Name"/>
          </xsd:unique>
        </xsd:element>
        <xsd:element name="PCMDataLink" type="PCMDataLinkType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStreamRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreamRefsType element is the top-level container for an unbounded
        list of DataStreamRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataStreamRef" type="DataStreamRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  
  <xsd:complexType name="DataStreamRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DataStreamRef must refer to the ID
        attribute of a DataStream.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="FilterModeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The FilterMode element is an enumeration of the supported modes for
        filtering bus messages.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="RejectAll"/>
      <xsd:enumeration value="PassAll"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="PCMDataLinkType">
    <xsd:annotation>
      <xsd:documentation>
        The PCMDataLink element describes the PCM data format for the
        described PCMStream element.  The PCMDataLink element specifies the
        formatting of the data structure (i.e., locations that carry data) and
        the mapping of data content to the defined data structure.  The
        properties of the described PCMDataLink element are unique to the PCM
        data format according to IRIG 106 Chapters 4 and 9.
      </xsd:documentation>
      <xsd:documentation>
        The PCMDataLink element is similar to the defined
        xsd:complexType element named "DataLinkType" from the TMATS schema as
        described in IRIG 106 Chapter 9.  The PCMDataLink contains the
        PCMFormatAttributes element that is imported directly from the TMATS
        schema.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <!--<xsd:element name="PCMFormatAttributes" type="tmatsP:PCMFormatAttributesType" minOccurs="0"/>-->
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStreamMessagesType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreamMessagesType element is the top-level container for an unbounded
        list of DataStreamMessage elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataStreamMessage" type="DataStreamMessageType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="DataStreamMessageType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreamMessage element defines a message type
        for the described DataStream element.  This message type
        definition identifies the message's data structure (i.e., locations
        that carry data), any filters that apply to that specific structure,
        and the mapping of data content to the defined data structure.
      </xsd:documentation>
      <xsd:documentation>
        The Size element, of type mdl:ValueUnitType, describes the
        size or length of the described DataStreamMessage element.  The
        units for this element shall be in units of digital data lengths such
        as bits or bytes.
      </xsd:documentation>
      <xsd:documentation>
        The MessageRate element, of type mdl:AggregateRateType,
        describes the committed rate (AverageRate) and the peak rate at which
        the containing message will appear on the bus.
      </xsd:documentation>
      <xsd:documentation>
        The DataStructureRef element, of type mdl:DataStructureRefType,
        describes the format and location of data carrying fields within the
        described DataStreamMessage element.  The assignment of digital
        data values (e.g., measurement data) to the field locations is
        specified using the DataMap element.
      </xsd:documentation>
      <xsd:documentation>
        The FilterMode element defines the default behavior of the
        CaptureFilters list.  If the FilterMode is set to PassAll, then the
        stream will default to allowing all bus messages, and each CaptureFilter
        will be an exception that blocks any messages that met its conditions.
        If the FilterMode is set to RejectAll, then then stream will default to
        blocking all bus messages, and each CaptureFilter will be an exception
        that allows any messages that met its conditions to pass through the
        filter.
      </xsd:documentation>
      <xsd:documentation>
        The CaptureFilters element contains the filters that describe what
        bus messages should be accepted by this data stream. Note that these
        filters do not describe how the filtering must be done, but only
        what the result of the filters must be.
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementSelectors element contains the selectors that describe
        what data from the bus messages should be extracted as measurements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Size" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="MessageRate" type="AggregateRateType" minOccurs="0"/>
      <xsd:element name="DataStructureRef" type="DataStructureRefType"/>
      <xsd:element name="FilterMode" type="FilterModeEnum"/>
      <xsd:element name="CaptureFilters" type="FiltersType" minOccurs="0">
        <xsd:unique name="UniqueFilterName">
          <xsd:selector xpath="mdl:Filter"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="MeasurementSelectors" type="MeasurementSelectorsType" minOccurs="0">
        <xsd:unique name="UniqueSelectorName">
          <xsd:selector xpath=".//mdl:Selector"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FiltersType">
    <xsd:annotation>
      <xsd:documentation>
        The CaptureFiltersType element is the top-level container for an
        unbounded list of Filter elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Filter" type="FilterType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="FilterType">
    <xsd:annotation>
      <xsd:documentation>
        The FilterType contains a series of FieldEvaluation elements, which
        describe the conditions necessary for a bus message to satisfy the
        filter. Each FieldEvaluation may draw multiple conditions about a given
        field, and all FieldEvaluations must be passed in order for the bus
        message to pass the filter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="FieldEvaluations" type="FieldEvaluationsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FieldEvaluationsType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldEvaluationsType element is the top-level container for an unbounded
        list of FieldEvaluation elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FieldEvaluation" type="FieldEvaluationType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="FieldEvaluationType">
    <xsd:annotation>
      <xsd:documentation>
        A FieldEvaluation element connects a DataStructureField or FieldSet to a
        set of conditions which must be evaluated against that field. If every
        condition is true for a given field, that field succeeds in its
        evaluation.
      </xsd:documentation>
      <xsd:documentation>
        The Bitmask element can optionally be used to preprocess the data in the
        field before the conditions are evaluated. This allows for a more
        compact representation of certain bit-comparison conditions, e.g. an
        octet in an IP address is within a target range.
      </xsd:documentation>
      <xsd:documentation>
        The Conditions element contains a series of ConditionParameters, each of
        which makes a comparison against the (optionally-bitmasked) value
        contained within the FieldEvaluation's target field. Every
        ConditionParameter must evaluate to True for the FieldEvaluation to
        succeed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="DataStructureFieldRef" type="DataStructureFieldRefType"/>
        <xsd:element name="DataStructureFieldSetRef" type="DataStructureFieldSetRefType"/>
      </xsd:choice>
      <xsd:element name="Bitmask" type="MaskType" minOccurs="0"/>
      <xsd:element name="Conditions" type="ConditionParametersType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementSelectorsType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementSelectors element contains a list of MeasurementSelector
        elements which describe what data is desired from a bus message.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementSelector" type="MeasurementSelectorType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementSelectorType">
    <xsd:annotation>
      <xsd:documentation>
        A MeasurementSelector element contains one or more FieldAssignments,
        which tell what bits are desired from a bus message, and a set of
        Selectors, which determine under what conditions those bits are desired.
        All Selectors must succeed in their evaluations for a given bus message
        for the FieldAssignments to be applied.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FieldAssignments" type="FieldAssignmentsType"/>
      <xsd:element name="Selector" type="FilterType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FieldAssignmentsType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldAssignmentsType element contains is the top-level container for
        an unbounded list of FieldAssignment elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FieldAssignment" type="FieldAssignmentType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FieldAssignmentType">
    <xsd:annotation>
      <xsd:documentation>
        A FieldAssignment element connects a DataStructureField or FieldSet with
        a Measurement. This element has two different semantic meanings, based
        on whether the instance document is being used for negotiation or
        configuration.
      </xsd:documentation>
      <xsd:documentation>
        During negotiation, the FieldRef identifies that the bits contained in
        that field are desired, and a path should be provided to place those
        bits in the referenced measurement. Note that this does not necessarily
        mean that the referenced measurement will be packaged and directly
        transmitted, but only that the DAU must supply a path to obtain that
        measurement data from what is packaged.  It is possible that the DAU
        cannot directly extract the bits into the target measurement, or even
        reference the desired field directly. In this case, the DAU may supply a
        new DataStructure that matches its capture abilities, update the
        DataStreamMessage to reference the new DataStructure, and provide
        derived processing functions to convert from its capture format to the
        target measurement.
      </xsd:documentation>
      <xsd:documentation>
        During configuration, the FieldRef still identifies the bits that are
        desired, but the Measurement must be directly populated by those target
        bits.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="DataStructureFieldRef" type="DataStructureFieldRefType"/>
        <xsd:element name="DataStructureFieldSetRef" type="DataStructureFieldSetRefType"/>
      </xsd:choice>
      <xsd:element name="MeasurementRef" type="MeasurementRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStreamMessageRefType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreamMessageRef element indicates the
        DataStreamMessage from which the data is extracted.  The
        DataStreamMessageRef element contains an IDREF attribute,
        of type xsd:IDREF, that shall reference the ID attribute
        of a DataStreamMessage within the same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ValueUnitType">
    <xsd:annotation>
      <xsd:documentation>
        The ValueUnitType is a generic container for either an
        mdl:FlexibleLong or xsd:double value with assigned units of measure.
        The UnitRef and BaseUnit elements describe the units of measure for
        the ValueUnit.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Value" type="ValueType"/>
      <xsd:choice>
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="ValueType">
    <xsd:union memberTypes="FlexibleLong xsd:double"/>
  </xsd:simpleType>

  <xsd:complexType name="AggregateRateType">
    <xsd:annotation>
      <xsd:documentation>
        The AggregateRate element describes common data rates for
        items throughout a TmNS-based system (e.g., bit rates, sample rates,
        packet rates, Package rates, TmNSDataMessage rates, etc.).  The goal of
        providing these elements is to support the estimation of aggregate data
        rates at various points in the TmNS-based system(s) resulting from a
        particular configuration.  For example, the sample rates related to
        individual measurements may be aggregated into bit rates and Package
        rates, which may be aggregated into bit rates and TmNSDataMessages
        rates.  TmNSDataMessages rates may be aggregated into bit rates and
        packet rates for transport-related items (e.g., paths, network
        connections, and network interfaces).
      </xsd:documentation>
      <xsd:documentation>
        The AverageRate element describes the average data rate in the
        units of measure specified by the UnitRef or BaseUnit element.
      </xsd:documentation>
      <xsd:documentation>
        The PeakRate element describes the peak data rate in the units
        of measure specified by the UnitRef or BaseUnit element.
      </xsd:documentation>
      <xsd:documentation>
        The UnitRef or BaseUnit element describes the units of measure
        for the AverageRate and PeakRate.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="AverageRate" type="xsd:double" minOccurs="0"/>
      <xsd:element name="PeakRate" type="xsd:double" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkNodesType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkNodesType element contains is the top-level container for an
        unbounded list of NetworkNode elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkNode" type="NetworkNodeType" maxOccurs="unbounded">
        <xsd:key name="PinKey">
          <xsd:selector xpath=".//mdl:Pin"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PinKeyRef" refer="mdl:PinKey">
          <xsd:selector xpath=".//mdl:PinRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:key name="LocalNetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:NetworkInterface"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <!-- TBD -->
        <!-- <xsd:keyref name="NetworkInterfaceKeyRef" refer="mdl:NetworkInterfaceKey">-->
        <!--   <xsd:selector xpath=".//mdl:NetworkInterfaceRef"/> -->
        <!--   <xsd:field xpath="@IDREF"/> -->
        <!-- </xsd:keyref> -->
        <xsd:keyref name="RedNetworkInterfaceKeyRef" refer="mdl:LocalNetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:RedNetworkInterfaceRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:keyref name="BlackNetworkInterfaceKeyRef" refer="mdl:LocalNetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:BlackNetworkInterfaceRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:keyref name="RouteNetworkInterfaceKeyRef" refer="mdl:LocalNetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:Route/mdl:NetworkInterfaceRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="PhysicalNetworkPortInNetworkNodeKey">
          <xsd:selector xpath=".//mdl:PhysicalNetworkPort"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="IGMPRouterPortKeyRefInNetworkNode" refer="mdl:PhysicalNetworkPortInNetworkNodeKey">
          <xsd:selector xpath=".//mdl:IGMPRouterPortRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:keyref name="IngressPortKeyRefInNetworkNode" refer="mdl:PhysicalNetworkPortInNetworkNodeKey">
          <xsd:selector xpath=".//mdl:IngressPortRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:keyref name="EgressPortKeyRefInNetworkNode" refer="mdl:PhysicalNetworkPortInNetworkNodeKey">
          <xsd:selector xpath=".//mdl:EgressPortRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="TmNSAppInNetworkNodeKey">
          <xsd:selector xpath=".//mdl:TmNSApp"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="RunningAppInSameNetworkNodeKeyRef" refer="mdl:TmNSAppInNetworkNodeKey">
          <xsd:selector xpath=".//mdl:RunningApps/mdl:TmNSAppRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkNodeType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkNode element describes a NetworkNode existing
        within a network.  NetworkNodes are devices that contain at least one
        NetworkInterface that connects the NetworkNode to a network.
        NetworkNode is a generic concept to describe any device connected to
        the network.  Additional functionality for a NetworkNode is described
        as a set of applications (TmNSApps) that it contains.
        Examples include the DAU, Recorder, and TmNSGroundRadio elements
        described in later sections.
      </xsd:documentation>
      <xsd:documentation>
        The InventoryID element, of type xsd:token, describes the
        inventory identifier of a NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        The HostName element, of type xsd:string, identifies the host
        name of the NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, describes the
        manufacturer, or make, of the NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        The Model element, of type xsd:string, describes the model
        number or name of the NetworkNode hardware (i.e., the model name that
        a manufacturer assigns to the product).
      </xsd:documentation>
      <xsd:documentation>
        The ModelVersion element, of type xsd:string, describes the
        version of the NetworkNode hardware (i.e., the revision number of a
        particular make and model).
      </xsd:documentation>
      <xsd:documentation>
        The SerialID element, of type xsd:string, describes
        the serial identifier (or serial number) assigned to the NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        The IEEE1588Version element is an enumeration that describes
        the version of the IEEE 1588 Precision Time Protocol (PTP) on the
        NetworkNode.  If the value of IEEE1588Version is set to Multiple,
        each PhysicalNetworkPort contained in the NetworkNode shall contain
        the IEEE1588VersionOfPort element to describe the version for each
        physical network port.
      </xsd:documentation>
      <xsd:documentation>
        The Routes element is a container for one or more Route elements that
        together may be used to describe the routing table of the NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token" minOccurs="0"/>
      <xsd:element name="HostName" type="xsd:string"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="ModelVersion" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="IEEE1588Version" type="IEEE1588VersionEnum"/>
      <xsd:element name="Routes" type="RoutesType" minOccurs="0"/>
      <xsd:element name="LogicalLocation" type="LogicalLocationType" minOccurs="0"/>
      <xsd:element name="PhysicalLocation" type="PhysicalLocationType" minOccurs="0"/>
      <xsd:element name="TmNSApps" type="TmNSAppsType">
        <xsd:unique name="UniqueTmNSAppNameInNetworkNode">
          <xsd:selector xpath="mdl:TmNSApp"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        <xsd:unique name="UniqueVirtualNetworkInterfaceNameInNetworkNode">
          <xsd:selector xpath=".//mdl:VirtualNetworkInterface"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        <xsd:unique name="UniqueSSTRxChannelNameInNetworkNode">
          <xsd:selector xpath=".//mdl:SSTRxChannel"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        <xsd:unique name="UniqueSSTTxChannelNameInNetworkNode">
          <xsd:selector xpath=".//mdl:SSTTxChannel"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="InternalStructure" type="InternalStructureType">
        <!--TBD key/keyref to require at least one NetworkInterface???-->
        <xsd:unique name="UniquePositionInModule">
          <xsd:selector xpath="mdl:Module"/>
          <xsd:field xpath="mdl:Position"/>
        </xsd:unique>
        <xsd:unique name="UniqueNameInModule">
          <xsd:selector xpath="mdl:Module"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Capabilities" type="CapabilitiesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="CapabilitiesType">
    <xsd:annotation>
      <xsd:documentation>
        The CapabilitiesType element contains all the defined capabilities
        of a NetworkNode, its Modules, and their Submodules.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="CaptureCapabilities" type="CaptureCapabilitiesType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="CaptureCapabilitiesType">
    <xsd:annotation>
      <xsd:documentation>
        The CaptureCapabilitiesType element is the top-level container for an unbounded
        list of CaptureCapability elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CaptureCapability" type="CaptureCapabilityType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="CaptureCapabilityType">
    <xsd:annotation>
      <xsd:documentation>
        The CaptureCapabilityType describes the capture capabilities for a specific 
        type of bus data.
      </xsd:documentation>
      <xsd:documentation>
        The ProperName element gives the proper name corresponding to this type
        of capture. For example, using a proper name of ARINC429 would mean that
        the CaptureCapability element was applicable to ARINC429 bus messages.
      </xsd:documentation>
      <xsd:documentation>
        The DataStructureRef element contains a reference to the data structure
        corresponding to how the capturing device perceives the captured data.
      </xsd:documentation>
      <xsd:documentation>
        The CaptureMode element states whether the capturing device is capable
        of filtering. The absence of filtering is defined as "AllBusCapture", and
        the presence of filtering is defined as "SelectiveBusCapture".
      </xsd:documentation>
      <xsd:documentation>
        The FilteringSchemes element contains a list of the possible filtering
        schemes usable by the capturing device for filtering the captured bus data.
      </xsd:documentation>
      <xsd:documentation>
        The PackagingSchemes element contains a list of the possible packaging
        schemes usable by the capturing device for packing the captured bus data.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProperName" type="ProperNameEnumExtType"/>
      <xsd:element name="DataStructureRef" type="DataStructureRefType"/>
      <xsd:element name="CaptureMode" type="CaptureModeEnum"/>
      <xsd:element name="FilteringSchemes" type="FilteringSchemesType" minOccurs="0"/>
      <xsd:element name="PackagingSchemes" type="PackagingSchemesType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>
  
  <xsd:simpleType name="CaptureModeEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="AllBusCapture"/>
      <xsd:enumeration value="SelectiveBusCapture"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <xsd:complexType name="FilteringSchemesType">
    <xsd:annotation>
      <xsd:documentation>
        The FilteringSchemesType is the top-level container for an unbounded
        list of FilteringScheme elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FilteringScheme" type="FilteringSchemeType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="FilteringSchemeType">
    <xsd:annotation>
      <xsd:documentation>
        The FilteringSchemeType describes possibilities for how bus data fields
        can be packaged by a capture device.
      </xsd:documentation>
      <xsd:documentation>
        The Preconditions element defines a set of conditions, one of which must
        be true in order for this filtering scheme to apply. If the element is 
        absent, there are no preconditions and the filtering scheme will always apply.
      </xsd:documentation>
      <xsd:documentation>
        The Exactly element defines a list of fields, all of which are required to be
        filtered on when using this filtering scheme.
      </xsd:documentation>
      <xsd:documentation>
        The Any element defines a list of fields, any combination of which can be
        filtered on when using this filtering scheme.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Preconditions" type="FiltersType" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="Exactly" type="FieldReferencesType"/>
        <xsd:element name="Any" type="FieldReferencesType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="PackagingSchemesType">
    <xsd:annotation>
      <xsd:documentation>
        The PackagingSchemesType is the top-level container for an unbounded
        list of PackagingScheme elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PackagingScheme" type="PackagingSchemeType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="PackagingSchemeType">
    <xsd:annotation>
      <xsd:documentation>
        The PackagingSchemeType describes possibilities for how bus data fields
        can be packaged by a capture device.
      </xsd:documentation>
      <xsd:documentation>
        The Preconditions element defines a set of conditions, one of which must
        be true in order for this packaging scheme to apply. If the element is 
        absent, there are no preconditions and the packaging scheme will always apply.
      </xsd:documentation>
      <xsd:documentation>
        The Exactly element defines a list of fields, all of which are required to be
        packaged when using this packaging scheme.
      </xsd:documentation>
      <xsd:documentation>
        The Any element defines a list of fields, any combination of which can be
        packaged when using this packaging scheme.
      </xsd:documentation>
      <xsd:documentation>
        The Implied element defines a list of fields which cannot be packaged, but
        whose information is implied by the packaging. For example, a capture card
        may not be able to package the label, but each unique label can correspond to
        a particular location within the packaging.
      </xsd:documentation>
      <xsd:documentation>
        The Dropped element defines a list of fields which cannot be packaged, and
        for which the information cannot be recovered from the capture device.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Preconditions" type="FiltersType" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="Exactly" type="FieldReferencesType"/>
        <xsd:element name="Any" type="FieldReferencesType"/>
      </xsd:choice>
      <xsd:element name="Implied" type="FieldReferencesType" minOccurs="0"/>
      <xsd:element name="Dropped" type="FieldReferencesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="FieldReferencesType">
    <xsd:sequence>
      <xsd:element name="DataStructureFieldRef" type="DataStructureFieldRefType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataStructureFieldSetRef" type="DataStructureFieldSetRefType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="NetworkNodeRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a NetworkNodeRef must refer to the
        ID attribute of a NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="InternalStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The InternalStructure element contains a description of the physical
        modules that comprise a NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        The Module element describes the physical sub-components of a
        NetwokNode.  They may be referred to by different names, such as
        modules, slices, cards, etc.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Modules" type="ModulesType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ModulesType">
    <xsd:annotation>
      <xsd:documentation>
        The ModulesType element is the top-level container for an unbounded
        list of Module elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Module" type="ModuleType" maxOccurs="unbounded">
        <xsd:unique name="UniquePositionInSubModule">
          <xsd:selector xpath="mdl:SubModule"/>
          <xsd:field xpath="mdl:Position"/>
        </xsd:unique>
        <xsd:unique name="UniqueNameInSubModule">
          <xsd:selector xpath="mdl:SubModule"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceStructure element contains a description of the physical
        modules that comprise a Device.  It is analogous to an InternalStructure
        element, however a Device and its modules do not contain network
        interfaces.
      </xsd:documentation>
      <xsd:documentation>
      The DeviceModule element describes the physical sub-components of a Device
      They may be referred to by different names, such as modules, slices,
      cards, etc.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="DeviceModules" type="DeviceModulesType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceModulesType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceModulesType element is the top-level container for an unbounded
        list of DeviceModule elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DeviceModule" type="DeviceModuleType" maxOccurs="unbounded">
        <xsd:unique name="UniquePositionInDeviceSubModule">
          <xsd:selector xpath="mdl:DeviceSubModule"/>
          <xsd:field xpath="mdl:Position"/>
        </xsd:unique>
        <xsd:unique name="UniqueNameInDeviceSubModule">
          <xsd:selector xpath="mdl:DeviceSubModule"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="DeviceModuleType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceModule element describes the properties of module, card,
        slot, or slice in a non-network-connected Device.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, contains the
        name of the manufacturer of the Device.  The Model element, of
        type xsd:string, contains the model number of the module.  The
        SerialID element, of type xsd:string, contains the model
        number of the module.
      </xsd:documentation>
      <xsd:documentation>
        The InventoryID element, of type xsd:token, describes the
        inventory identifier of the device.
      </xsd:documentation>
      <xsd:documentation>
        The Position element, of type xsd:nonNegativeInteger describes
        the slot number or the position of the module in a stack of modules.
      </xsd:documentation>
      <xsd:documentation>
        The PositionsOccupied element describes the size of the Module in terms
        of the number of positions or slots occupied by the module.
      </xsd:documentation>
      <xsd:documentation>
        The Sensitivity element, is a complex element of type
        mdl:ConditionParameters that describes the datasheet sensitivity (with
        units) of the module or sensor.
      </xsd:documentation>
      <xsd:documentation>
        The Calibration element in a DeviceModule is a container for
        individual input and output pairs used during the calibration of the
        Device as well as the date of the last calibration.
      </xsd:documentation>
      <xsd:documentation>
        The Children element describes generic parent-child or master-slave
        relationships among the modules of a NetworkNode, between a NetworkNode
        and remote non-networked Device, or between non-networked Device
        elements.  The relationship is intended to describe those where the
        parent is responsible for configuration or control of the child.
      </xsd:documentation>
      <xsd:documentation>
        The Connector element is a complex element that describes a
        physical connector on the module.
      </xsd:documentation>
      <xsd:documentation>
        The Ports element is a complex element that describes the
        points of logical connections to the the module.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Position" type="xsd:nonNegativeInteger"/>
      <xsd:element name="PositionsOccupied" type="xsd:nonNegativeInteger"/>
      <xsd:element name="Sensitivity" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="ExcitationSource" type="ExcitationSourceType" minOccurs="0"/>
      <xsd:element name="Calibration" type="CalibrationType" minOccurs="0"/>
      <xsd:element name="Children" type="ChildrenType" minOccurs="0">
        <xsd:unique name="UniqueChildNameInDeviceModule">
          <xsd:selector xpath="mdl:Child"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Connectors" type="ConnectorsType" minOccurs="0">
        <xsd:unique name="UniqueConnectorNameInDeviceModule">
          <xsd:selector xpath="mdl:Connector"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Ports" type="PortsType">
        <xsd:unique name="UniquePortIndexInDeviceModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
        <xsd:unique name="UniquePortNameInDeviceModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="DeviceSubModules" type="DeviceSubModulesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="ExcitationSourceType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Internal"/>
      <xsd:enumeration value="External"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="ConnectorsType">
    <xsd:annotation>
      <xsd:documentation>
        The ConnectorsType element is the top-level container for an unbounded
        list of Connector elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Connector" type="ConnectorType" maxOccurs="unbounded">
        <xsd:unique name="UniquePinIndexInConnector">
          <xsd:selector xpath="mdl:Pin"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceSubModulesType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceSubModulesType element is the top-level container for an
        unbounded list of DeviceSubModule elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DeviceSubModule" type="DeviceSubModuleType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="DeviceSubModuleType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceSubModule element describes the properties of sub-module
        or card in a DAU or other module.  A DeviceSubModule is a physical
        sub-component attached to the DeviceModule, such as a daughter-card.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, contains the
        name of the manufacturer of the Device.  The Model element, of
        type xsd:string, contains the model number of the module.  The
        SerialID element, of type xsd:string, contains the model
        number of the module.
      </xsd:documentation>
      <xsd:documentation>
        The InventoryID element, of type xsd:token, describes the
        inventory identifier of the device.
      </xsd:documentation>
      <xsd:documentation>
        The Position element, of type xsd:nonNegativeInteger describes
        the slot number or the position of the sub-module within the module
      </xsd:documentation>
      <xsd:documentation>
        The PositionsOccupied element describes the size of the sub-module in
        terms of the number of positions or slots occupied by the sub-module.
      </xsd:documentation>
      <xsd:documentation>
        The Children element describes generic parent-child or master-slave
        relationships among the modules of a NetworkNode, between a NetworkNode
        and remote non-networked Device, or between non-networked Device
        elements.  The relationship is intended to describe those where the
        parent is responsible for configuration or control of the child.
      </xsd:documentation>
      <xsd:documentation>
        The Connector element is a complex element that describes a
        physical connector on the module.
      </xsd:documentation>
      <xsd:documentation>
        The Ports element is a complex element that describes the
        points of logical connections to the the module.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Position" type="xsd:nonNegativeInteger"/>
      <xsd:element name="PositionsOccupied" type="xsd:nonNegativeInteger"/>
      <xsd:element name="Children" type="ChildrenType" minOccurs="0">
        <xsd:unique name="UniqueChildNameInDeviceSubModule">
          <xsd:selector xpath="mdl:Child"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Connectors" type="ConnectorsType" minOccurs="0">
        <xsd:unique name="UniqueConnectorNameInDeviceSubModule">
          <xsd:selector xpath="mdl:Connector"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Ports" type="PortsType">
        <xsd:unique name="UniquePortIndexInDeviceSubModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
        <xsd:unique name="UniquePortNameInDeviceSubModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="LogicalLocationType">
    <xsd:annotation>
      <xsd:documentation>
        The LogicalLocation element is used in various elements to
        describe the logical section or area of a network or Test Article from
        which the measurement is taken
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhysicalLocationType">
    <xsd:annotation>
      <xsd:documentation>
        The PhysicalLocation element describes the physical location
        from which the measurement is taken.  The physical location assigned
        to a measurement does not necessarily match the physical location of
        the NetworkNode that acquires the measurement.  For example, the value
        of the PhysicalLocation element for a measurement taken from a remote
        sensor on a Test Article will differ from the value of the
        PhysicalLocation element of a DAU that is connected to the sensor
        through a wire.  The PhysicalLocation of a NetworkNode describes its
        physical location.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Coordinates" type="xsd:string"/>
      <xsd:element name="CoordinateSystem" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSAppsType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSApps element is a container for one or more
        TmNSApp elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TmNSApp" type="TmNSAppType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSAppType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSApp element contains elements that describe characteristics and
        configuration of an application that runs on a NetworkNode and is
        manageable through the TmNS-based system.
      </xsd:documentation>
      <xsd:documentation>
        The Name (type xsd:token) and Description (type xsd:string)
        elements may provide human readable information about the TmNSApp.  The
        XML processor will remove line feeds, carriage returns, tabs, leading
        and trailing spaces, and multiple spaces from all elements of type
        xsd:token.
      </xsd:documentation>
      <xsd:documentation>
        The RoleID, of type xsd:token, shall be used to uniquely
        identify the TmNSApp.  A RoleID shall be unique within a Network.
      </xsd:documentation>
      <xsd:documentation>
        The LoggingLevel element describes the System Management
        defined logging level used by the TmNSApp.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, describes the
        manufacturer, or make, of the TmNSApp.  The Product element,
        of type xsd:string, describes the product name or number assigned by
        the manufacturer.  The ProductVersion element, of type xsd:string,
        describes the version number or name of the TmNSApp which may be a
        software version number or some other version information about the
        product.
      </xsd:documentation>
      <xsd:documentation>
        The ConfigurationVersion element, of type xsd:string, shall indicate the
        current configuration MDL Instance Document that the TmNSApp is
        configured with. The value shall be set to the string containing the
        value of the MDLRoot/ConfigurationVersion element, the value of the
        RoleID element, and the time it was configured. If the TmNSApp is not
        configured, then the value of this element shall be blank.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSManagementResourcesVersion element, of type xsd:string,
        describes the version of the TmNS management resources with which this
        TmNSApp complies.
      </xsd:documentation>
      <xsd:documentation>
        The LastValidationDateTime element, of type xsd:dateTime, is used to
        optionally document the date/time validation of the MDL instance
        document occurred.
      </xsd:documentation>
      <xsd:documentation>
        The LastConfigurationDateTime element, of type xsd:dateTime, is used to
        optionally document the date/time the MDL instance document was used to
        configure a device.
      </xsd:documentation>
      <xsd:documentation>
        The DirtyBit element, of type xsd:boolean, is used in
        conjunction with reporting of the ConfigurationVersion element by a
        TmNSApp to indicate that one or more values in the reported MDL differ
        from the MDL file with which the TmNSApp was configured.  Differences
        may be introduced through System Mangement interfaces, or other vendor
        specific interfaces.  The ConfigurationVersion and DirtyBit elements
        combined faciliate configuration management of TmNSApps.  The DirtyBit
        shall be set to true in a reported MDL file when configuration changes
        have been made that cause the MDL representation to differ from the
        last configuration via MDL.
      </xsd:documentation>
      <xsd:documentation>
        The DataBufferLength element describes the length of available
        (stored) data, in units of time, of the NetworkNode.  This value
        indicates the oldest data that can be requested from the NetworkNode.
        A NetworkNode that does not have a backlog of data may specify the
        value of this element to be zero.  The DataBufferLength element is a
        floating-point value/units pair.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSApp element may contain additional elements that indicate the
        TmNSApp is operating as a special kind of TmNSApp.  The element names
        all begin with 'TmNS'.
      </xsd:documentation>
      <xsd:documentation>
        The SMInterface element contains configuration information for
        the System Management interface of a NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="RoleID" type="NonZeroLengthType"/>
      <xsd:element name="LoggingLevel" type="LoggingLevelEnum"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Product" type="xsd:string"/>
      <xsd:element name="ProductVersion" type="xsd:string"/>
      <xsd:element name="ConfigurationVersion" type="xsd:string"/>
      <xsd:element name="TmNSManagementResourcesVersion" type="xsd:string"/>
      <xsd:element name="LastValidationDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="LastConfigurationDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="DirtyBit" type="xsd:boolean"/>
      <xsd:element name="DataBufferLength" type="ValueUnitType" minOccurs="0"/>
      <!-- TBD HttpPort ? -->
      <xsd:element name="TmNSNull" type="TmNSNullType" minOccurs="0"/>
      <xsd:element name="TmNSNetworkFabricDevice" type="TmNSNetworkFabricDeviceType" minOccurs="0"/>
      <xsd:element name="TmNSACU" type="TmNSACUType" minOccurs="0"/>
      <xsd:element name="TmNSDAU" type="TmNSDAUType" minOccurs="0"/>
      <xsd:element name="TmNSRecorder" type="TmNSRecorderType" minOccurs="0"/>
      <xsd:element name="TmNSMasterClock" type="TmNSMasterClockType" minOccurs="0"/>
      <xsd:element name="TmNSEncryptor" type="TmNSEncryptorType" minOccurs="0"/>
      <xsd:element name="TmNSMFD" type="TmNSMFDType" minOccurs="0"/>
      <xsd:element name="TmNSSSTTx" type="TmNSSSTTxType" minOccurs="0"/>
      <xsd:element name="TmNSSSTRx" type="TmNSSSTRxType" minOccurs="0"/>
      <xsd:element name="TmNSRCDataSource" type="TmNSRCDataSourceType" minOccurs="0"/>
      <xsd:element name="TmNSRCDataSink" type="TmNSRCDataSinkType" minOccurs="0"/>
      <xsd:element name="TmNSLTCDataSource" type="TmNSLTCDataSourceType" minOccurs="0"/>
      <xsd:element name="TmNSLTCDataSink" type="TmNSLTCDataSinkType" minOccurs="0"/>
      <xsd:element name="TmNSConsolidatedManager" type="TmNSConsolidatedManagerType" minOccurs="0"/>
      <xsd:element name="TmNSRadio" type="TmNSRadioType" minOccurs="0"/>
      <xsd:element name="TmNSLinkManager" type="TmNSLinkManagerType" minOccurs="0"/>
      <xsd:element name="TmNSTSSClient" type="TmNSTSSClientType" minOccurs="0"/>
      <xsd:element name="TmNSTSSServer" type="TmNSTSSServerType" minOccurs="0"/>
      <xsd:element name="TmNSVoiceGateway" type="TmNSVoiceGatewayType" minOccurs="0"/>
      <xsd:element name="TmNSMeasurementProcessor" type="TmNSMeasurementProcessorType" minOccurs="0"/>
      <!-- TmNSTPA, TmNSPCMGateway, TmNSNetworkGateway, TmNSGroundTAManager, TmNSOnboardTAManager, TmNSSSTManager, TmNSMissionControlManager, TmNSTAInstrumentationCheckout -->
      <xsd:element name="SMInterface" type="SMInterfaceType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSAppRefType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSAppRef element contains an IDREF attribute, of
        type xsd:IDREF, that shall reference the ID attribute of a
        TmNSAppType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSAppRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSAppRefs element is a container for one or more
        TmNSAppRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TmNSAppRef" type="TmNSAppRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSNullType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSNull element indicates that the particular
        node/SNMP agent is a NullNode.  This indicates that the device is
        present in a TmNS-based system, but it does not implement the TmNS.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSNetworkFabricDeviceType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSNetworkFabricDevice element indicates
        that the particular TmNSApp is a NetworkFabricDevice, and thus
        implements the TmNSNetworkFabricDevice management resources.  It does
        not imply any further Network Device specialization.  A Network Fabric
        Device provides network and/or data link layer service and
        interconnectivity without modifying data above the network layer. See
        Open Systems Interconnection (OSI) model.  Example
        TmNSNetworkFabricDevices are routers and switches.
      </xsd:documentation>
      <xsd:documentation>
        The MulticastRoutingMode element, of type
        MulticastRoutingModeEnum, describes the mode of multicast routing,
        whether it is static, dynamic, or static and dynamic.
      </xsd:documentation>
      <xsd:documentation>
        The IGMPQuerier element, of type IGMPQuerierEnum, is an
        enumeration that describes the mode of the IGMP Querier, whether it is
        on, off, or auto.
      </xsd:documentation>
      <xsd:documentation>
        The IGMPQuerierInterval element, of type xsd:unsignedInt, is
        an unsigned 32-bit number that describes the number of seconds between
        IGMP queries.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSNetworkFabricDevice element may contain zero or more
        StaticMulticast elements to describe static multicast addresses
        configured on the device.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MulticastRoutingMode" type="MulticastRoutingModeEnum"/>
      <xsd:element name="IGMPQuerier" type="IGMPQuerierEnum"/>
      <xsd:element name="IGMPQuerierInterval" type="xsd:unsignedInt"/>
      <xsd:element name="IGMPRouterPortRefs" type="PhysicalNetworkPortRefsType" minOccurs="0"/>
      <xsd:element name="StaticMulticastRoutes" type="MulticastRoutesType" minOccurs="0">
        <xsd:unique name="UniqueStaticMulticastAddress">
          <xsd:selector xpath="mdl:MulticastRoute"/>
          <xsd:field xpath="mdl:MulticastAddress"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="MulticastRoutingModeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The MulticastRoutingMode element is an enumeration of the
        supported modes for multicast routing.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Static"/>
      <xsd:enumeration value="Dynamic"/>
      <xsd:enumeration value="StaticAndDynamic"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IGMPQuerierEnum">
    <xsd:annotation>
      <xsd:documentation>
        The IGMPQuerier element is an enumeration of settings for the
        IGMP Querier.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="On"/>
      <xsd:enumeration value="Off"/>
      <xsd:enumeration value="Auto"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="MulticastRoutesType">
    <xsd:annotation>
      <xsd:documentation>
        The MulticastRoutesType element is the top-level container for an unbounded
        list of MulticastRoute elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MulticastRoute" type="MulticastRouteType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MulticastRouteType">
    <xsd:annotation>
      <xsd:documentation>
        The MulticastRoute element describes the static routing configuration
        for a single multicast address.  The MulticastAddress element, of type
        IPAddress, describes the multicast address.  The StaticMulticast
        element may contain one or more IngressPortRef elements, of type
        PhysicalNetworkPortRef, and one or more EgressPortRef elements, of
        type PhysicalNetworkPortRef, to describe the physical network ports
        associated with the multicast address.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MulticastAddress" type="IPAddress"/>
      <xsd:element name="IngressPortRefs" type="PhysicalNetworkPortRefsType" minOccurs="0"/>
      <xsd:element name="EgressPortRefs" type="PhysicalNetworkPortRefsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSACUType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSACU element indicates that the
        particular TmNSApp is an Antenna Control Unit.
      </xsd:documentation>
      <xsd:documentation>
        The TrackingReceiver element, of type TmNSAppRefType,
        contains a reference to the TmNSSSTRx element that is used as the used
        by the antenna control unit for tracking the test article.
      </xsd:documentation>
      <xsd:documentation>
        The Azimuth and Elevation elements, of type ValueUnitType,
        describe the azimuth and elevation settings of the antenna being
        controlled by the ACU.
      </xsd:documentation>
      <xsd:documentation>
        The ServoEnergized element, of type xsd:boolean, indicates
        whether or not the servo is energized.
      </xsd:documentation>
      <xsd:documentation>
        The FeedEnabled element, of type xsd:boolean, indicates
        whether or not the feed is enabled.
      </xsd:documentation>
      <xsd:documentation>
        The AutoTrackingEnabled element, of type xsd:boolean,
        indicates whether or not the system is autotracking.
      </xsd:documentation>
      <xsd:documentation>
        The TrackingMode element, of type TrackingModeEnum, indicates
        the operating mode of the ACU tracking system.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TrackingReceiverRef" type="TmNSAppRefType"/>
      <xsd:element name="Azimuth" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="Elevation" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="ServoEnergized" type="xsd:boolean"/>
      <xsd:element name="FeedEnabled" type="xsd:boolean"/>
      <xsd:element name="AutoTrackingEnabled" type="xsd:boolean"/>
      <xsd:element name="TrackingMode" type="TrackingModeEnum" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:complexType name="TmNSDAUType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSDAU element indicates that the
        particular TmNSApp is a Data Acquisition Unit.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ModuleType">
    <xsd:annotation>
      <xsd:documentation>
        The Module element describes the properties of module, card,
        slot, or slice in a NetworkNode.  DAUs are generally described
        as a NetworkNode composed of many modules.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, contains the
        name of the manufacturer of the Device.  The Model element, of
        type xsd:string, contains the model number of the module.  The
        SerialID element, of type xsd:string, contains the model
        number of the module.
      </xsd:documentation>
      <xsd:documentation>
        The InventoryID element, of type xsd:token, describes the
        inventory identifier of the device.
      </xsd:documentation>
      <xsd:documentation>
        The Position element, of type xsd:nonNegativeInteger describes
        the slot number or the position of the module in a stack of modules.
      </xsd:documentation>
      <xsd:documentation>
        The PositionsOccupied element describes the size of the Module in terms
        of the number of positions or slots occupied by the module.
      </xsd:documentation>
      <xsd:documentation>
        The RunningApps element contains a list of TmNSAppRef elements
        That refer to the TmNSApps that are "running" on the Module.
        The RunningApps element is only used if the Module element is contained
        within a NetworkNode.  The RunningApps element is not intended to be
        used when the Module is contained within a Device element.
      </xsd:documentation>
      <xsd:documentation>
        The Children element describes generic parent-child or master-slave
        relationships among the modules of a NetworkNode, between a NetworkNode
        and remote non-networked Device, or between non-networked Device
        elements.  The relationship is intended to describe those where the
        parent is responsible for configuration or control of the child.
      </xsd:documentation>
      <xsd:documentation>
        The Connector element is a complex element that describes a
        physical connector on the module.
      </xsd:documentation>
      <xsd:documentation>
        The Ports element is a complex element that describes the
        points of logical connections to the the module.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Position" type="xsd:nonNegativeInteger"/>
      <xsd:element name="PositionsOccupied" type="xsd:nonNegativeInteger"/>
      <xsd:element name="RunningAppRefs" type="TmNSAppRefsType" minOccurs="0"/>
      <xsd:element name="NetworkInterfaces" type="NetworkInterfacesType" minOccurs="0">
        <xsd:unique name="UniqueNetworkInterfaceNameInModule">
          <xsd:selector xpath="mdl:NetworkInterface"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Children" type="ChildrenType" minOccurs="0">
        <xsd:unique name="UniqueChildNameInModule">
          <xsd:selector xpath="mdl:Child"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Connectors" type="ConnectorsType" minOccurs="0">
        <xsd:unique name="UniqueConnectorNameInModule">
          <xsd:selector xpath="mdl:Connector"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Ports" type="PortsType">
        <xsd:unique name="UniquePortIndexInModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
        <xsd:unique name="UniquePortNameInModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="SubModules" type="SubModulesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SubModulesType">
    <xsd:annotation>
      <xsd:documentation>
        The SubModulesType element is the top-level container for an unbounded
        list of SubModule elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SubModule" type="SubModuleType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SubModuleType">
    <xsd:annotation>
      <xsd:documentation>
        The SubModule element describes the properties of sub-module
        or card in a DAU or other module.  A SubModule is a physical
        sub-component attached to the module, such as a daughter-card.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, contains the
        name of the manufacturer of the Device.  The Model element, of
        type xsd:string, contains the model number of the module.  The
        SerialID element, of type xsd:string, contains the model
        number of the module.
      </xsd:documentation>
      <xsd:documentation>
        The InventoryID element, of type xsd:token, describes the
        inventory identifier of the device.
      </xsd:documentation>
      <xsd:documentation>
        The Position element, of type xsd:nonNegativeInteger describes
        the slot number or the position of the module a stack of modules
      </xsd:documentation>
      <xsd:documentation>
        The Children element describes generic parent-child or master-slave
        relationships among the modules of a NetworkNode, between a NetworkNode
        and remote non-networked Device, or between non-networked Device
        elements.  The relationship is intended to describe those where the
        parent is responsible for configuration or control of the child.
      </xsd:documentation>
      <xsd:documentation>
        The Connector element is a complex element that describes a
        physical connector on the module.
      </xsd:documentation>
      <xsd:documentation>
        The Ports element is a complex element that describes the
        points of logical connections to the the module.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Position" type="xsd:nonNegativeInteger"/>
      <xsd:element name="Children" type="ChildrenType" minOccurs="0">
        <xsd:unique name="UniqueChildNameInSubModule">
          <xsd:selector xpath="mdl:Child"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Connectors" type="ConnectorsType" minOccurs="0">
        <xsd:unique name="UniqueConnectorNameInSubModule">
          <xsd:selector xpath="mdl:Connector"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Ports" type="PortsType">
        <xsd:unique name="UniquePortIndexInSubModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
        <xsd:unique name="UniquePortNameInSubModule">
          <xsd:selector xpath="mdl:Port"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ChildrenType">
    <xsd:annotation>
      <xsd:documentation>
        The Children element describes generic parent-child or master-slave
        relationships among the modules of a NetworkNode or between a
        NetworkNode and remote non-networked Device elements that require
        configuration or control by the NetworkNode.
        The Children element contains a list of one or more Child elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Child" type="ChildType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ChildType">
    <xsd:annotation>
      <xsd:documentation>
        The Child element describes a single parent-child or master-slave
        relationship.  The parent or master is the element containing the
        Children element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="ChildRefs" type="ChildRefsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ChildRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The ChildRefsType element is the top-level container for an unbounded
        list of ChildRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ChildRef" type="ChildRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ChildRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a ChildRef shall refer to the
        ID attribute of a Module, SubModule, DeviceModule,
        or DeviceSubModule element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSRecorderType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSRecorder element indicates that the
        particular TmNSApp is a Recorder.  A Recorder consists of
        TmNSLTCDataSink and TmNSRCDataSource components.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSMasterClockType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSMasterClock element indicates that the
        particular TmNSApp is a master clock.
      </xsd:documentation>
      <xsd:documentation>
        The IEEE1588MasterCapabilityEnable element, of type xsd:boolean,
        describes whether the time master capability is enabled or disabled on
        the containing NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        The TimeSourceType element is an enumeration that describes
        whether the time source is an internal oscillator or an external time
        source.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="IEEE1588MasterCapabilityEnable" type="xsd:boolean"/>
      <xsd:element name="TimeSourceType" type="TimeSourceTypeEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="TimeSourceTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimeSourceTypeEnum is an enumerated list of valid settings
        for the time source for a TmNSMasterClock.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="InternalTimeSource"/>
      <xsd:enumeration value="ExternalTimeSource"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="TmNSEncryptorType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of an TmNSEncryptor element indicates that the
        particular TmNSApp can function as an encryptor.  The
        RedNetworkInterfaceRef and BlackNetworkInterfaceRef, of type
        mdl:NetworkInterfaceRef, indicate which NetworkInterface of the
        NetworkNode transports the encrypted and unencrypted data
        respectively.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RedNetworkInterfaceRef" type="NetworkInterfaceRefType"/>
      <xsd:element name="BlackNetworkInterfaceRef" type="NetworkInterfaceRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSMFDType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSMFD element indicates that the
        particular TmNSApp is a multifunction display.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSSSTTxType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSSSTTx element indicates that the particular
        TmNSApp can function as an SST transmitter.The SSTTxRCCVersion
        element, of type xsd:string, describes the IRIG version supported by
        the SST transmitter.  The Channel element, of type SSTTxChannelType,
        describes the attributes of a transmitter channel.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SSTTxRCCVersion" type="xsd:string"/>
      <xsd:element name="Channel" type="SSTTxChannelType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTTxChannelType">
    <xsd:annotation>
      <xsd:documentation>
        The CenterFrequency element, of type ValueUnitType, describes
        the value and units (normally Hertz) of the center frequency of the
        SST transmitter.
      </xsd:documentation>
      <xsd:documentation>
        The Modulation element, of type SSTModuleationEnum, is an
        enumeration of possible modulation modes.  The Deviation element, of
        type ValueUnitType, describes the deviation sensitivity for the
        PCM-FM modulation mode.  The DiffEncoding element, of type
        xsd:boolean, indicates the differential encoding setting for the SST
        transmitter.  The Randomize element, of type xsd:boolean, indicates
        the data randomization setting.  The RFEnable element, of type
        xsd:boolean, describes if the RF output is on or off.  The
        RFHighPowerEnable element, of type xsd:boolean, indicates whether the
        high power mode is enabled.  The DataPolarityInverted element, of type
        xsd:boolean, indicates if the data polarity is normal (false) or
        inverted (true)
      </xsd:documentation>
      <xsd:documentation>
        The DataSourceInternal element, of type xsd:boolean, indicates
        wheter the data source is internal (true) or external (false).  The
        InternalDataPattern element, of type xsd:unsignedInt, describes the
        data pattern produced by an internal source.  The InternalClock
        element, of type xsd:boolean, indicates whether the internal clock is
        used.  The ClockRate element, of type ValueUnitType, describes the
        clock rate, whether internal or external.
      </xsd:documentation>
      <xsd:documentation>
        The FECEnable element, of type xsd:boolean, indicates whether
        forward error correction is enabled.  The FECType element, of type
        xsd:string, describes the type of forward error correction used.  The
        SleepMode element, of type xsd:boolean, describes whether the
        transmitter is in a low power sleep mode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ChannelNumber" type="xsd:positiveInteger"/>
      <xsd:element name="CenterFrequency" type="ValueUnitType"/>
      <xsd:element name="Modulation" type="SSTModulationEnum" minOccurs="0"/>
      <xsd:element name="Deviation" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="DifferentialEncoding" type="xsd:boolean"/>
      <xsd:element name="Randomize" type="xsd:boolean"/>
      <xsd:element name="RFEnable" type="xsd:boolean"/>
      <xsd:element name="RFHighPowerEnable" type="xsd:boolean"/>
      <xsd:element name="DataPolarityInverted" type="xsd:boolean"/>
      <xsd:element name="DataSourceInternal" type="xsd:boolean"/>
      <xsd:element name="InternalDataPattern" type="xsd:unsignedInt" minOccurs="0"/>
      <xsd:element name="InternalClock" type="xsd:boolean"/>
      <xsd:element name="ClockRate" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="FECEnable" type="xsd:boolean"/>
      <xsd:element name="FECType" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SleepMode" type="xsd:boolean"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSSSTRxType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSSSTRx element indicates that the
        particular TmNSApp can function as an SST receiver.  The list of Channel
        elements indicate the RF channels available for receiving.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Channels" type="SSTRxChannelsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTRxChannelsType">
    <xsd:annotation>
      <xsd:documentation>
        The SSTRxChannelsType element is the top-level container for an unbounded
        list of SSTRxChannel elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SSTRxChannel" type="SSTRxChannelType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="SSTRxChannelType">
    <xsd:annotation>
      <xsd:documentation>
        The SSTRxChannel element describes the channel number and the
        center frequency of the RF channel.
      </xsd:documentation>
      <xsd:documentation>
        The ChannelNumber element, of type xsd:positiveInteger,
        indicates the number of the channel.  The CenterFrequency element, of
        type mdl:ValueUnitType, describes the center frequency with standard
        units of frequency (Hertz, or multiples of Hertz).  The Bandwidth
        element, of type mdl:ValueUnitType, describes the bandwidth setting
        of the receiver.  The Modulation element, of type SSTModuleationEnum,
        is an enumeration of possible modulation modes.  The AutoGainMode
        element, of type xsd:boolean, describes whether the using an automatic
        or manual gain mode.  The ManualGain element, of type ValueUnitType,
        describes the value and units of the manual gain, when used.
      </xsd:documentation>
      <xsd:documentation>
        The AGCTimeConstant element, of type ValueUnitType, describes
        the value and units of the AGC time constant.  Refer to IRIG 106
        Chapter 25 for the supported values.
      </xsd:documentation>
      <xsd:documentation>
        The ClockPolarityInverted element, of type xsd:boolean,
        describes the polarity of the bit sync TimeToLive clock output.  The
        DataPolarityInverted element, of type xsd:boolean, describes the
        polarity of the bit sync TimeToLive data output.
      </xsd:documentation>
      <xsd:documentation>
        The SweepEnable element, of type xsd:boolean, describes the
        setting for the demodulator sweep.  The SweepRangeLow element, of type
        xsd:ValueUnitType, describes the value and units (Hertz) for the
        lower limit of the sweep function.  The SweepRangeHigh element, of
        type xsd:ValueUnitType, describes the value and units (Hertz) for the
        upper limit of the sweep function.
      </xsd:documentation>
      <xsd:documentation>
        The DiffDecoding element, of type xsd:boolean, indicates the
        differential decoding setting for the SST transmitter.  The
        Derandomize element, of type xsd:boolean, indicates the data
        derandomization setting.  The DataSourceSimulated element, of type
        xsd:boolean, describes whether the data source is simulated (true) or
        real (false).  The InternalDataPattern element, of type
        xsd:unsignedInt, describes the data pattern produced by an internal
        source.  The BitRate element, of type ValueUnitType, describes the
        bit rate of the receiver channel.  The FECEnable element, of type
        xsd:boolean, indicates whether forward error correction is enabled.
        The FECType element, of type xsd:string, describes the type of forward
        error correction used.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ChannelNumber" type="xsd:positiveInteger"/>
      <xsd:element name="CenterFrequency" type="ValueUnitType"/>
      <xsd:element name="Bandwidth" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="Modulation" type="SSTModulationEnum" minOccurs="0"/>
      <xsd:element name="AutoGainMode" type="xsd:boolean"/>
      <xsd:element name="ManualGain" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="AGCTimeConstant" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="ClockPolarityInverted" type="xsd:boolean"/>
      <xsd:element name="DataPolarityInverted" type="xsd:boolean"/>
      <xsd:element name="SweepEnable" type="xsd:boolean"/>
      <xsd:element name="SweepRangeLow" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="SweepRangeHigh" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="DifferentialDecoding" type="xsd:boolean"/>
      <xsd:element name="Derandomize" type="xsd:boolean"/>
      <xsd:element name="DataSourceSimulated" type="xsd:boolean"/>
      <xsd:element name="InternalDataPattern" type="xsd:unsignedInt" minOccurs="0"/>
      <xsd:element name="BitRate" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="FECEnable" type="xsd:boolean"/>
      <xsd:element name="FECType" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SSTChannelRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of an SSTChannelRefshall refer to the
        ID attribute of a Channel element within a TmNSSSTRx or TmNSSSTTx
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSRCDataSourceType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of the TmNSRCDataSource element indicates that
        the TmNSApp is operating as an RC Data Source.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRef may be used to indicate which
        NetworkInterface is being used by the RCDataSource for NetworkNodes
        with one or more NetworkInterfaces.  The ListeningPort may be used to
        describe the IP port on which the RC Data Source is listening, whether
        using the standard port or another.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSRCDataSource may contain a list of zero or more
        MessageDefinitionRefs, PackageDefinitionRefs, and MeasurementRefs
        elements that describe the messages, packages, and measurements that
        the RCSource is instructed to generate.  RC Data Source needs to be
        aware of all MDIDs, PDIDs, and MeasIDs in the domain so that when a
        request comes in it can either build the message or reject it.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="ListeningPort" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRefs" type="MessageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="MessageGroupRefs" type="MessageGroupRefsType" minOccurs="0"/>
      <xsd:element name="PackageDefinitionRefs" type="PackageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="MeasurementRefs" type="MeasurementRefsType" minOccurs="0"/>
      <xsd:element name="PreSelectMeasurementRefs" type="MeasurementRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The PreSelectMeasurementGroup element contains a list of
        MeasurementRef elements that describe which measurements are to be
        produced by the RCDataSource within a shorter period of time than
        typical requests.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementRef" type="MeasurementRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSRCDataSinkType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSRCDataSink element indicates that
        the TmNSApp is operating as an RC Data Sink.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRef may be used to indicate which
        NetworkInterface is being used by the RCDataSink for NetworkNodes
        with one or more NetworkInterfaces.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSRCDataSink may contain a list of zero or more
        MessageDefinitionRefs, PackageDefinitionRefs, and MeasurementRefs
        elements that describe the messages, packages, and measurements that
        the RCSink is instructed to collect.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRefs" type="MessageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="MessageGroupRefs" type="MessageGroupRefsType" minOccurs="0"/>
      <xsd:element name="PackageDefinitionRefs" type="PackageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="MeasurementRefs" type="MeasurementRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSLTCDataSourceType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSLTCDataSource element indicates that the
        particular TmNSApp is an LTC Data Source.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="LTCInterfaces" type="LTCInterfacesType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LTCInterfacesType">
    <xsd:annotation>
      <xsd:documentation>
        The LTCInterfaces element in a TmNSLTCDataSource element is a container
        for one or more LTCInterface elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="LTCInterface" type="LTCInterfaceType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LTCInterfaceType">
    <xsd:annotation>
      <xsd:documentation>
        An LTCInterface element associates one or more NetworkInterfaces with a
        group of messages that will be output through those interfaces.
      </xsd:documentation>
      <xsd:documentation>
        The TimeToLive element, of type xsd:unsignedByte, describes the
        Time-To-Live value assigned to the IP header of TmNS Data Messages
        produced by this MessageGroup.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRef may be used to indicate which NetworkInterface
        is being used by this LTCInterface for an LTCDataSource within a
        NetworkNode with one or more NetworkInterfaces.
      </xsd:documentation>
      <xsd:documentation>
        The LTCInterface may contain a list of zero or more
        MessageDefinitionRefs that describe the messages that the LTC
        source is configured to generate.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TimeToLive" type="xsd:unsignedByte"/>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRefs" type="MessageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="MessageGroupRefs" type="MessageGroupRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSLTCDataSinkType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSLTCDataSink element indicates that the
        particular TmNSApp is an LTC Data Sink. The TmNSLTCDataSink contains the
        list of all MDIDs that the LTCSink is instructed to collect.  The
        NetworkInterfaceRef may be used to indicate which NetworkInterface is
        being used by the LTCDataSink for NetworkNodes with one or more
        NetworkInterfaces.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRefs" type="MessageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="MessageGroupRefs" type="MessageGroupRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSConsolidatedManagerType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSConsolidatedManager element is an element that can be contained
        by a TmNSApp element to describe a TmNSApp that has the ability to
        function as a TMAManager.
      </xsd:documentation>
      <xsd:documentation>
        A TmNSConsolidatedManager element can contain a ManagedApps
        element, of type mdl:TmNSAppRefsType, that contains a list of
        one or more TmNSAppRef elements, each of which references the ID
        attribute of a TmNSApp element.  The meaning is that the TmNSApp
        containing the TmNSConsolidatedManager element manages this set of
        TmNSApps.
      </xsd:documentation>
      <xsd:documentation>
        The DeviceAutoDiscovery element may be used to describe a
        TmNSConsolidatedManager that performs device auto discovery through a
        broadcast ping or through a ping sweep of IP addresses.  If the
        element is present, the manager performs auto discovery, otherwise it
        does not.
      </xsd:documentation>
      <xsd:documentation>
        The FTPServerURI element may be used to statically configure
        the ftp address of the MDL instance document(s) that will be written
        or retrieved.
      </xsd:documentation>
      <xsd:documentation>
        The DeviceStatusMonitoringPeriod element of type
        mdl:ValueUnitType may be used to describe how long, in seconds,
        the manager should wait between performing status monitoring on a
        device.
      </xsd:documentation>
      <xsd:documentation>
        The DeviceComunicationProbationTimeoutAttempts element of type
        xsd:unsignedLong may be used to describe the number of SNMP queries
        that a manager attempts before declaring a communication probation
        fault.
      </xsd:documentation>
      <xsd:documentation>
        The DeviceComunicationFailureTimeoutAttempts element of type
        xsd:unsignedLong may be used to describe the number of device
        communication probation attempts that a manager executes before
        declaring a communication failure fault.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ManagedAppRefs" type="TmNSAppRefsType" minOccurs="0"/>
      <xsd:element name="DeviceAutoDiscovery" type="DeviceAutoDiscoveryType" minOccurs="0"/>
      <xsd:element name="FTPServerURIs" type="FTPServerURIsType" minOccurs="0"/>
      <xsd:element name="DeviceStatusMonitoringPeriod" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="DeviceCommunicationProbationTimeoutAttempts" type="xsd:unsignedLong" minOccurs="0"/>
      <xsd:element name="DeviceCommunicationFailureTimeoutAttempts" type="xsd:unsignedLong" minOccurs="0"/>
      <!-- TBD NotificationInterval -->
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FTPServerURIsType">
    <xsd:annotation>
      <xsd:documentation>
        The FTPServerURIs element contains a list of one or more
        FTPServerURI elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FTPServerURI" type="xsd:anyURI" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceAutoDiscoveryType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceAutoDiscovery element describes various ways a
        TmNSConsolidatedManager may perform device auto discovery.  The
        BroadcastIPAddress may be used to describe a broadcast ping
        configuration.  The PingSweepRanges element may be used to describe
        individual IP addresses, or ranges of IP addresses to which a ping
        query may be sent.  The DeviceAutoDiscoveryPeriod element of type
        mdl:ValueUnitType describes a time interval (generally in
        seconds) at which the device auto discovery procedure is performed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="BroadcastIPAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="PingSweepRanges" type="PingSweepRangesType" minOccurs="0"/>
      <xsd:element name="DeviceAutoDiscoveryPeriod" type="ValueUnitType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PingSweepRangesType">
    <xsd:annotation>
      <xsd:documentation>
        The PingSweepRanges element contains a list of one or more
        PingSweepRange elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PingSweepRange" type="PingSweepRangeType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PingSweepRangeType">
    <xsd:annotation>
      <xsd:documentation>
        The PingSweepRange element describes the begin and ending IP
        addresses to be queried during a ping sweep for device discovery.  If
        the StartIPAddress and StopIPAddress elements are the same, only a
        single IP address is pinged.  If the addresses are different, an
        inclusive search of each IP address in the range is performed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="StartIPAddress" type="IPAddress"/>
      <xsd:element name="StopIPAddress" type="IPAddress"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSRadioType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSRadio element indicates that the particular
        TmNSApp can function as a TmNSRadio in a TmNS-based system.
      </xsd:documentation>
      <xsd:documentation>
        The RANConfigurationRef element refers to the RAN configuration on
        which the radio operates.
      </xsd:documentation>
      <xsd:documentation>
        The RFMACAddress element is a 16-bit value that shall be globally
        unique.  The FragmentationPersistencePeriodUSec, of type
        xsd:unsignedInt, describes the maximum time in microseconds that
        received frames can be buffered pending reassembly of fragmeted
        payload.  After expiration of the time, fragments may be discarded.
      </xsd:documentation>
      <xsd:documentation>
        The TxPowerLeveldBm element, of type xsd:unsignedInt,
        describes the "normal" power level setting of the radio.  The
        LowPowerModeEnable element, of type xsd:boolean, describes when the
        radio is put into a low power mode.  If set to true, the low power
        mode overrides the power level set in the TxPowerLeveldBm element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RANConfigurationRef" type="RANConfigurationRefType"/>
      <xsd:element name="RFMACAddress" type="xsd:unsignedShort"/>
      <xsd:element name="JoinRadioGroupRefs" type="RadioGroupRefsType" minOccurs="0"/>
      <xsd:element name="FragmentationPersistencePeriodUSec" type="xsd:unsignedInt"/>
      <xsd:element name="TxPowerLeveldBm" type="xsd:unsignedInt"/>
      <xsd:element name="LowPowerModeEnable" type="xsd:boolean"/>
      <xsd:element name="LinkAgent" type="LinkAgentType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LinkAgentType">
    <xsd:annotation>
      <xsd:documentation>
        The LinkAgent element is an element that can be contained by a
        TmNSRadio to describe the network interface and IP port number used to
        receive TCP datagrams from a TmNSLinkManager.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType"/>
      <xsd:element name="ListeningPort" type="xsd:unsignedShort"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSLinkManagerType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSLinkManager element is an element that can be
        contained by a TmNSApp element to describe a TmNSApp that has
        the ability to function as a Link Manager in the RF Network.
      </xsd:documentation>
      <xsd:documentation>
        The RANConfigurationRef element refers to the RAN configuration on
        which the RFNM operates.
      </xsd:documentation>
      <xsd:documentation>
        The TxOpUpdateRate element specifies the number of Epochs that the
        TmNSLinkManager will wait before sending the next  TxOp TLV. By
        setting this element to 0,  TxOps will be generated for each Epoch
        by the TmNSLinkManager.
      </xsd:documentation>
      <xsd:documentation>
        A TmNSLinkManager element can contain a ManagedApps element,
        of type mdl:TmNSAppRefsType, that contains one or more
        TmNSAppRef elements, each of which references the ID attribute
        of a TmNSApp element that corresponds with the
        Radio components of the RF Network.  The meaning of this is that
        the and Radio resources are managed by the Link Manager.
      </xsd:documentation>
      <xsd:documentation>
        The TSSRemoteIPAddress element, of type IPAddress, defines the IP
        Address where the TmNSTSS managable app can be located. This element is
        required when the TmNSLinkManager is not defined under the same
        NetwokNode as the TmNSTSS and therefore is not running the TmNSTSS
        locally. This is used with the TSSRemoteControlPort element to send
        control messages the to remote TmNSTSS.
      </xsd:documentation>
      <xsd:documentation>
        The TSSRemoteControlPort element, of type xsd:unsignedShort, defines
        the port where control messages to a remote TmNSTSS managable app can
        be directed. This element is required when the TmNSLinkManager is not
        defined under the same NetwokNode as the TmNSTSS and therefore is not
        running the TmNSTSS locally. This is used with the TSSRemoteIPAddress
        element to send control messages to the remote TmNSTSS.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RANConfigurationRef" type="RANConfigurationRefType"/>
      <xsd:element name="TxOpUpdateRate" type="xsd:unsignedByte"/>
      <xsd:element name="TmNSAppRefs" type="TmNSAppRefsType" minOccurs="0"/>
      <!-- TBD - This may not be necessary, there are no TSS control messages, should each LM
      be required to function as a TSS Client as well? If so, this goes away. -->
      <xsd:element name="TSSRemoteIPAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="TSSRemoteControlPort" type="xsd:unsignedShort" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSTSSClientType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSTSSClient element is an element that can be contained by a
        TmNSApp element to describe a TmNSApp that has the ability to
        define configuration information for the Network Management with respect
        to routing as coordinated by the TmNSLinkManager concepts.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnels element is a container for an unbounded list of
        TSSTunnel elements.
      </xsd:documentation>
      <xsd:documentation>
        The PacketCatalogSize element defines the maximun number of IP packets
        the TmNSTSSClient will maintain in its buffer to be used to detect and
        squelch duplicate packets.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSTunnels" type="TSSTunnelsType"/>
      <xsd:element name="PacketCatalogSize" type="xsd:unsignedLong" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TSSTunnelsType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSTunnels element is a container for an unbounded list of
        TSSTunnel elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSTunnel" type="TSSTunnelType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TSSTunnelType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSTunnel element describes a single TSSTunnelInterface, the 
        TSSServer, and the TSSRouteDestinations that are used to establish 
        the TSSTunnel with the TSSServer. The TSSTunnel will be used to pass
        all IP traffic between the TmNSTSSServer app and the TmNSTSSClient app.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnelInterface element, of type VirtualNetworkInterfaceType, 
        defines a single virtual interface that is generated on the 
        TmNSTSSClient platform. This TSSTunnelInterface is used to establish 
        a TSSTunnel to the TmNSTSSServer.
      </xsd:documentation>
      <xsd:documentation>
        The TSSServer element, of type TSSServerType, describes the TmNSTSSServer
        that the TmNSTSSClient will establish the TSSTunnel with.
      </xsd:documentation>
      <xsd:documentation>
        The TSSRouteDestinations element is a container for an unbounded list of
        TSSRouteDestination elements.
      </xsd:documentation>
      <xsd:documentation>
        The Enabled element, of type xsd:boolean, specifies whether the TSSTunnel 
        should be established at configuration or not.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSTunnelInterface" type="VirtualNetworkInterfaceType"/>
      <xsd:element name="TSSServer" type="TSSServerType"/>
      <xsd:element name="TSSRouteDestinations" type="TSSRouteDestinationsType"/>
      <xsd:element name="Enabled" type="xsd:boolean"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TSSServerType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSServer element describes the TmNSTSSServer that the TmNSTSSClient
        will connect to.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRef element, of type NetworkInterfaceRefType, 
        indicates the specific NetworkInterface on the TmNSTSSServer that the 
        TmNSTSSClient will establish the TSSTunnel on.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnelConnectionRef element, of type TSSTunnelConnectionRefType, 
        indicates the TmNSTSSServer configuration for the incoming 
        TSSClientConnection from the TmNSTSSClient.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType"/>
      <xsd:element name="TSSTunnelConnectionRef" type="TSSTunnelConnectionRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TSSTunnelConnectionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a TSSTunnelConnectionRef shall refer to
        the ID attribute of a TSSTunnelConnection.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TSSRouteDestinationsType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSRouteDestinationsType element is a container for an unbounded list of
        TSSRouteDestination elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSRouteDestination" type="TSSRouteDestinationType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TSSRouteDestinationType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSRouteDestination element describes a single destination network
        that shall be routed through the TSSTunnel. The TSSRouteDestination 
        element specifies either a RadioLinkRef or a TSSNetworkGateway to 
        indicate whether the path to the destination network is through a 
        RadioLink on the TmNSLinkManagers RANConfiguration or through a 
        TmNSLinkManager managing another RANConfiguration respectively. 
      </xsd:documentation>
      <xsd:documentation>
        The RadioLinkRef element, of type RadioLinkRefType, indicates the 
        specific RadioLink managed by the the TmNSLinkManager that represents 
        the path to the destination network. When this RadioLink is that active 
        path to the destination network, the described TSSTunnel will be selected.
      </xsd:documentation>
      <xsd:documentation>
        The TSSNetworkGateway element, of type TSSNetworkGatewayType, indicates 
        the specific TmNSLinkManager that represents the gateway to another 
        RANConfiguration where the destination network resides. When this 
        TSSNetworkGateway is that active path to the destination network, the 
        described TSSTunnel will be selected.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRefs element, of type NetworkInterfaceRefsType, 
        specifies an unbounded list of NetworkInterfaces that represent the 
        TSSRouteDestinations to be routed through the described TSSTunnel.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="RadioLinkRef" type="RadioLinkRefType"/>
        <xsd:element name="TSSNetworkGateway" type="TSSNetworkGatewayType"/>
      </xsd:choice>
      <xsd:element name="NetworkInterfaceRefs" type="NetworkInterfaceRefsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TSSNetworkGatewayType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSNetworkGateway element describes the TmNSLinkManager that acts
        as the gateway to separate RANConfiguration where the TSSRouteDestination
        resides. 
      </xsd:documentation>
      <xsd:documentation>
        The DestinationRadioRef element, of type TmNSAppRefType, indicates the 
        specific TmNSRadio that is the TSSRouteDestination. This provides the 
        destination RFMACAddress of the RadioLink managed by the other 
        TmNSLinkManager.
      </xsd:documentation>
      <xsd:documentation>
        The DestinationRadioGroupRef element, of type RadioGroupRefType, 
        indicates the GroupRFMACAddress subscribed to by the TmNSRadio that is 
        the TSSRouteDestination.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSLinkManagerAppRef element, of type TmNSAppRefType, indicates the 
        specific TmNSLinkManager that is the TSSNetworkGateway to the other 
        RANConfiguration.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="DestinationRadioRef" type="TmNSAppRefType"/>
        <xsd:element name="DestinationRadioGroupRef" type="RadioGroupRefType"/>
      </xsd:choice>
      <xsd:element name="TmNSLinkManagerAppRef" type="TmNSAppRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSTSSServerType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSTSSServerType element is an element that can be contained by a
        NetwokNode element to describe an interface that a TmNSTSSClient will 
        establish a TSSTunnel with.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnelConnections element is a container for an unbounded list of
        TSSTunnelConnection elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSTunnelConnections" type="TSSTunnelConnectionsType"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TSSTunnelConnectionsType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSTunnelConnections element is a container for an unbounded list of
        TSSTunnelConnection elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSTunnelConnection" type="TSSTunnelConnectionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TSSTunnelConnectionType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSTunnelConnection element describes a single TSSTunnelConnectionInterface, 
        the TSSClient, the DataPort, and the TSSRoutes that are used to accept a 
        TSSTunnelConnection from a TSSClient. The TSSTunnel will be used to pass
        all IP traffic between the TmNSTSSServer App and the TmNSTSSClient App.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnelConnectionInterface element, of type
        VirtualNetworkInterfaceType, defines a single virtual interface that is
        generated on the NetworkNode. This virtual interface is used by the
        TmNSTSSServer to accept a TSSTunnelConnection from a TmNSTSSClient.
      </xsd:documentation>
      <xsd:documentation>
        The DataPort element, of type xsd:unsignedShort, defines the listening
        port used by the NetwokNode for the specified TSSTunnelConnection.
      </xsd:documentation>
      <xsd:documentation>
        The TSSRoutes element is a container for an unbounded list of TSSRoute elements.
      </xsd:documentation>
      <xsd:documentation>
        The BlacklistOfIPAddresses element is a container for an unbounded list of 
        BlacklistIPAddress elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSTunnelConnectionInterface" type="VirtualNetworkInterfaceType"/>
      <xsd:element name="TSSClient" type="TSSClientType"/>
      <xsd:element name="DataPort" type="xsd:unsignedShort"/>
      <xsd:element name="TSSRoutes" type="TSSRoutesType"  minOccurs="0"/>
      <xsd:element name="BlacklistOfIPAddresses" type="BlacklistOfIPAddressesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TSSClientType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSClientType identifies the TmNSTSSClient that will be establishing the 
        TSSTunnel with the TmNSTSSServer.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRef, of type NetworkInterfaceRefType, identifies the IP address 
        of the TmNSTSSClient that will be establishing the TSSTunnel with the TmNSTSSServer.
      </xsd:documentation>
      <xsd:documentation>
        The TSSTunnelInterfaceRef, of type VirtualNetworkInterfaceRefType, identifies the IP 
        configuration of the TSSTunnelInterface of the TmNSTSSClient.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType"/>
      <xsd:element name="TSSTunnelInterfaceRef" type="VirtualNetworkInterfaceRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TSSRoutesType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSRoutes element is a container for an unbounded list of TSSRoute elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TSSRoute" type="TSSRouteType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TSSRouteType">
    <xsd:annotation>
      <xsd:documentation>
        The TSSRoute element specifies the IP subnet and netmask of the route 
        destination network.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Destination" type="IPAddress"/>
      <xsd:element name="Netmask" type="IPAddress"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="BlacklistOfIPAddressesType">
    <xsd:annotation>
      <xsd:documentation>
        The BlacklistOfIPAddresses element is a container for an unbounded list of 
        BlacklistIPAddress elements.
      </xsd:documentation>
      <xsd:documentation>
        The BlacklistIPAddress element, of type IPAddress, defines an IP
        Address that is prohibited from being routed through a TSSTunnel. This
        element is unbounded.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="BlacklistIPAddress" type="IPAddress" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="TmNSVoiceGatewayType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSVoiceGateway element is an element that can be
        contained by a TmNSApp element to describe a TmNSApp that has
        the ability to function as a TmNSVoiceGateway in a TmNS-based system.
      </xsd:documentation>
      <xsd:documentation>
        The VoiceDSCPTableEntryRef, of type mdl:DSCPTableEntryRefType,
        contains an IDREF attribute that refers to the ID attribute of the
        DSCPTableEntry that describes the DSCP markings for the voice data
        traffic.
      </xsd:documentation>
      <xsd:documentation>
        The ControlDSCPTableEntryRef, of type
        mdl:DSCPTableEntryRefType, contains an IDREF attribute that refers to
        the ID attribute of the DSCPTableEntry that describes the DSCP
        markings for the control data traffic.
      </xsd:documentation>
      <xsd:documentation>
        The CodecPriorities element contains a prioritized list of
        codecs to be used for voice traffic.
      </xsd:documentation>
      <xsd:documentation>
        The PhoneNumbers element contains a list of VoIP client names and their
        corresponding phone numbers.
      </xsd:documentation>
      <xsd:documentation>
        The SIPServerIPAddress and SIPServerPort elements, of types IPAddress and 
        xsd:unsignedShort respectively, specify the IP Address and port that the 
        SIP Server is listening on.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="VoiceDSCPTableEntryRef" type="DSCPTableEntryRefType" minOccurs="0"/>
      <xsd:element name="ControlDSCPTableEntryRef" type="DSCPTableEntryRefType" minOccurs="0"/>
      <xsd:element name="CodecPriorities" type="CodecPrioritiesType">
        <xsd:unique name="UniqueCodecPriorityIndex">
          <xsd:selector xpath="mdl:CodecPriority"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="PhoneNumbers" type="PhoneNumbersType"/>
      <xsd:element name="SIPServerIPAddress" type="IPAddress"/>
      <xsd:element name="SIPServerPort" type="xsd:unsignedShort"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CodecPrioritiesType">
    <xsd:annotation>
      <xsd:documentation>
        The CodecPriorities element contains a list of one or more
        CodecPriority elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CodecPriority" type="CodecPriorityType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CodecPriorityType">
    <xsd:simpleContent>
      <xsd:annotation>
        <xsd:documentation>
          The CodecPriority contains a string that describes the name
          of a voice codec to be used in a TmNSVoiceGateway.  The value of the
          string shall be the identifiable name of the codec.  The Index
          attribute is a positive integer (greater than zero) that describes the
          priority of the codec.  The lower the Index, the higher the priority.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType name="PhoneNumbersType">
    <xsd:annotation>
      <xsd:documentation>
        The PhoneNumbers element contains one or more
        PhoneNumber elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PhoneNumber" type="PhoneNumberType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhoneNumberType">
    <xsd:annotation>
      <xsd:documentation>
        The PhoneNumberType contains a VoIPClientName element
        and the VoIP phone number.  The PhoneNumber element is a string of 
        between 3 and 10 digits with no hypens or dashes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="VoIPClientName" type="xsd:string"/>
      <xsd:element name="PhoneNumber" type="PhoneNumber"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSMeasurementProcessorType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSMeasurementProcessor element indicates that
        the TmNSApp is capable of measurement data processing.
      </xsd:documentation>
      <xsd:documentation>
        The TmNSMeasurementProcessor may contain a MeasurementRefs element
        that describes the measurements the MeasurementProcessor is instructed
        to process.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementRefs" type="MeasurementRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SMInterfaceType">
    <xsd:annotation>
      <xsd:documentation>
        The SMInterface element contains configuration information for
        the possible System Management interfaces of a NetworkNode. 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SNMPSetup" type="SNMPSetupType" minOccurs="0"/>
      <xsd:element name="HTTPSetup" type="HTTPSetupType" minOccurs="0"/>
      <xsd:element name="HTTPSSetup" type="HTTPSSetupType" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SNMPSetupType">
    <xsd:annotation>
      <xsd:documentation>
        The SNMPPort element, of type xsd:unsignedShort, may be used
        to statically assign a port number to the SNMP agent for situations
        where multiple NetworkNodes are running on the same network interface
        of a shared hardware platform.
      </xsd:documentation>
      <xsd:documentation>
        The DSCPTableEntryRef element describes DSCP settings for
        management data or management data requests sent by a NetworkNode or
        by a NetworkNodeManager.  The DSCPTableEntryRef element contains an
        IDREF attribute, of type xsd:IDREF, that shall reference the ID
        attribute of a DSCPTableEntry element.
      </xsd:documentation>
      <xsd:documentation>
        The NotificationPort element, of type xsd:unsignedShort, may
        be used to statically assign a port number to the SNMP agent on which
        it will receive notifications for situations where multiple
        NetworkNodes are running on the same network interface of a shared
        hardware platform.
      </xsd:documentation>
      <xsd:documentation>
        The Notifications element describes the settings for SNMP notifications
        that the containing TmNSApp is configured to send.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SNMPVersions" type="SNMPVersionsType"/>
      <xsd:element name="SNMPPort" type="xsd:unsignedShort"/>
      <xsd:element name="NotificationPort" type="xsd:unsignedShort"/>
      <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType"/>
      <xsd:element name="NetworkInterfaceRefs" type="NetworkInterfaceRefsType"/>
      <xsd:element name="Notifications" type="NotificationsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SNMPVersionsType">
    <xsd:annotation>
      <xsd:documentation>
        The SNMPVersionsType element contains one or more
        SNMPVersion elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SNMPVersion" type="SNMPVersionEnum" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="SNMPVersionEnum">
    <xsd:annotation>
      <xsd:documentation>
        The SNMPVersionEnum element, of type xsd:string, describes the
        version of the SNMP protocol.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="v2c"/>
      <xsd:enumeration value="v3"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="HTTPSetupType">
    <xsd:annotation>
      <xsd:documentation>
        The HTTPPort element, of type xsd:unsignedShort, may be used
        to statically assign a port number to the HTTP interface for situations
        where multiple NetworkNodes are running on the same network interface
        of a shared hardware platform.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="HTTPPort" type="xsd:unsignedShort"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="HTTPSSetupType">
    <xsd:annotation>
      <xsd:documentation>
        The HTTPSPort element, of type xsd:unsignedShort, may be used
        to statically assign a port number to the HTTPS interface for situations
        where multiple NetworkNodes are running on the same network interface
        of a shared hardware platform.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="HTTPSPort" type="xsd:unsignedShort"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NotificationsType">
    <xsd:annotation>
      <xsd:documentation>
        The Notifications element describes the settings for SNMP notifications.
      </xsd:documentation>
      <xsd:documentation>
        The TimeLockLostEnable element describes whether notifications
        are sent when time lock is lost.  The TimeLockLostIntervalMSec element
        describes the interval, in milliseconds, between repeated time lock
        lost notifications.  The TimeLockLostMaxRepeats element describes the
        maximum number of repeats allowed for a time lock lost notification.
      </xsd:documentation>
      <xsd:documentation>
        The IEEE1588MaxOffsetFromMasterEnable element describes
        whether notifications are sent when the maximum observed time offset
        from the IEEE 1588 master clock exceeds the threshold described by
        IEEE1588MaxOffsetFromMasterThreshold.  The
        IEEE1588MaxOffsetFromMasterIntervalMSec element describes the interval,
        in milliseconds, between repeated notifications.  The
        IEEE1588MaxOffsetFromMasterMaxRepeats element describes the maximum
        number of repeats allowed for this type of notification.
      </xsd:documentation>
      <xsd:documentation>
        The IEEE1588MaxJitterEnable element describes whether
        notifications are sent when the maximum observed jitter from the IEEE
        1588 master clock exceeds the threshold described by
        IEEE1588MaxJitterThreshold.  The IEEE1588MaxJitterIntervalMSec element
        describes the interval, in milliseconds, between repeated
        notifications.  The IEEE1588MaxJitterMaxRepeats element describes the
        maximum number of repeats allowed for this type of notification.
      </xsd:documentation>
      <xsd:documentation>
        The TempOutOfRangeEnable element describes whether
        notifications are sent when the maximum observed temperature exceeds
        the threshold described by TempOutOfRangeHighThreshold or when the
        minimum observed temperature goes below the
        TempOutOfRangeLowThreshold. The TempOutOfRangeIntervalMSec element
        describes the interval, in milliseconds, between repeated
        notifications.  The TempOutOfRangeMaxRepeats element describes the
        maximum number of repeats allowed for this type of notification.  The
        TempOutOfRangeLowThreshold and TempOutOfRangeHighThreshold are
        measured in degrees Celsius.
      </xsd:documentation>
      <xsd:documentation>
        The AccessAnomalyEnable element describes whether
        notifications are sent when an intrusion attempt is detected.  The
        AccessAnomalyIntervalMSec element describes the interval, in
        milliseconds, between repeated notifications.  The
        AccessAnomalyMaxRepeats element describes the maximum
        number of repeats allowed for this type of notification.
      </xsd:documentation>
      <xsd:documentation>
        The PowerFaultEnable element describes whether notifications
        are sent when a power fault occurs.  The PowerFaultIntervalMSec element
        describes the interval, in milliseconds, between repeated
        notifications.  The PowerFaultMaxRepeats element describes the maximum
        number of repeats allowed for this type of notification.
      </xsd:documentation>
      <xsd:documentation>
        The InvalidInputEnable element describes whether notifications
        are sent when invalid input is detected.  The InvalidInputIntervalMSec
        element describes the interval, in milliseconds, between repeated
        notifications.  The InvalidInputMaxRepeats element describes the
        maximum number of repeats allowed for this type of notification.
      </xsd:documentation>
      <xsd:documentation>
        The PointingErrorEnable element describes whether
        notifications are sent when an antenna failed to point to the
        requested pointingCommand value.  PointingErrorIntervalMSec element
        describes the interval, in milliseconds, between repeated
        notifications. The PointingErrorMaxRepeats element describes the
        maximum number of repeats allowed for this type of notification.
      </xsd:documentation>
      <xsd:documentation>
        The TXNumQueueOverflowsEnable element describes whether
        notifications are sent when the number of transmit queue overflows
        exceeds the specified threshold.  TxNumQueueOverflowsIntervalMSec
        element describes the interval, in milliseconds, between repeated
        notifications.  TxNumQueueOverflowsMaxRepeats element describes the
        maximum number of repeats allowed for this type of notification.  The
        TxNumQueueOverflowsThreshold element describes the threshold at which
        a notification is generated when the described number of overflows has
        occurred.
      </xsd:documentation>
      <xsd:documentation>
        The RXNumQueueOverflowsEnable element describes whether
        notifications are sent when the number of receive queue overflows
        exceeds the specified threshold.  RxNumQueueOverflowsIntervalMSec
        element describes the interval, in milliseconds, between repeated
        notifications.  RxNumQueueOverflowsMaxRepeats element describes the
        maximum number of repeats allowed for this type of notification.  The
        RxNumQueueOverflowsThreshold element describes the threshold at which
        a notification is generated when the described number of overflows has
        occurred.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NotificationDestinations" type="NotificationDestinationsType"/>
      <xsd:sequence minOccurs="0">
        <xsd:element name="TimeLockLostEnable" type="xsd:boolean"/>
        <xsd:element name="TimeLockLostIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="TimeLockLostMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="IEEE1588MaxOffsetFromMasterEnable" type="xsd:boolean"/>
        <xsd:element name="IEEE1588MaxOffsetFromMasterThreshold" type="xsd:unsignedInt"/>
        <xsd:element name="IEEE1588MaxOffsetFromMasterIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="IEEE1588MaxOffsetFromMasterMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="IEEE1588MaxJitterEnable" type="xsd:boolean"/>
        <xsd:element name="IEEE1588MaxJitterThreshold" type="xsd:unsignedInt"/>
        <xsd:element name="IEEE1588MaxJitterIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="IEEE1588MaxJitterMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="TempOutOfRangeEnable" type="xsd:boolean"/>
        <xsd:element name="TempOutOfRangeIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="TempOutOfRangeMaxRepeats" type="xsd:unsignedInt"/>
        <xsd:element name="TempOutOfRangeLowThreshold" type="xsd:int"/>
        <xsd:element name="TempOutOfRangeHighThreshold" type="xsd:int"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="AccessAnomalyEnable" type="xsd:boolean"/>
        <xsd:element name="AccessAnomalyIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="AccessAnomalyMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="PowerFaultEnable" type="xsd:boolean"/>
        <xsd:element name="PowerFaultIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="PowerFaultMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="InvalidInputEnable" type="xsd:boolean"/>
        <xsd:element name="InvalidInputIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="InvalidInputMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="PointingErrorEnable" type="xsd:boolean"/>
        <xsd:element name="PointingErrorIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="PointingErrorMaxRepeats" type="xsd:unsignedInt"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="TxNumQueueOverflowsEnable" type="xsd:boolean"/>
        <xsd:element name="TxNumQueueOverflowsIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="TxNumQueueOverflowsMaxRepeats" type="xsd:unsignedInt"/>
        <xsd:element name="TxNumQueueOverflowsThreshold" type="xsd:int"/>
      </xsd:sequence>
      <xsd:sequence minOccurs="0">
        <xsd:element name="RxNumQueueOverflowsEnable" type="xsd:boolean"/>
        <xsd:element name="RxNumQueueOverflowsIntervalMSec" type="xsd:unsignedInt"/>
        <xsd:element name="RxNumQueueOverflowsMaxRepeats" type="xsd:unsignedInt"/>
        <xsd:element name="RxNumQueueOverflowsThreshold" type="xsd:int"/>
      </xsd:sequence>
      <!-- TBD (Tx|Rx)QueueOverflowsEnable, InvervalMSec, MaxRepeats, Threshold -->
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NotificationDestinationsType">
    <xsd:annotation>
      <xsd:documentation>
        The NotificationsDestinations element is a container for zero
        or more NotificationDestination elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NotificationDestination" type="NotificationDestinationType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NotificationDestinationType">
    <xsd:annotation>
      <xsd:documentation>
        The NotificationDestination element describes the IP address
        (via the NetworkInterfaceRef) and the IP port number to which
        notifications are sent.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType"/>
      <xsd:element name="PortNumber" type="xsd:unsignedShort"/>
    </xsd:sequence>
  </xsd:complexType>

    <xsd:complexType name="NetworkInterfacesType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkInterfacesType element is the top-level container for an unbounded
        list of NetworkInterfaceType elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterface" type="NetworkInterfaceType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkInterfaceType">
    <xsd:annotation>
      <xsd:documentation>
        A NetworkInterface element describes the module or component
        that provides the interface between a NetworkNode and a network.  A
        NetworkNode can contain one or more NetworkInterfaces, and will have a
        NetworkInterface element describing each.
      </xsd:documentation>
      <xsd:documentation>
        The DHCPEnable element, of type xsd:boolean, indicates whether or not
        Dynamic Host Configuration Protocol (DHCP) is enabled for a
        NetworkInterface.
      </xsd:documentation>
      <xsd:documentation>
        The IPAddress element, of type mdl:IPAddress, describes the IP
        address associated with the NetworkInterface.  
      </xsd:documentation>
      <xsd:documentation>
        The Netmask element, of type mdl:IPAddress, describes the 
        netmask value associated with a NetworkInterface.
      </xsd:documentation>
      <xsd:documentation>
        The MACAddress element, of type mdl:MACAddress, describes the MAC 
        address associated with a NetworkInterface.
      </xsd:documentation>
      <xsd:documentation>
        When a NetworkNode on which DHCP is enabled reports its
        current configuration, DHCPEnable shall be set to true and the
        IPAddress, Netmask, and Gateway need not be set.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="DHCPEnable" type="xsd:boolean"/>
      <xsd:element name="IPAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="Netmask" type="IPAddress" minOccurs="0"/>
      <xsd:element name="MACAddress" type="MACAddress" minOccurs="0"/>
      <xsd:element name="PhysicalNetworkPorts" type="PhysicalNetworkPortsType">
        <xsd:unique name="UniquePhysicalNetworkPortNameInNetworkInterface">
          <xsd:selector xpath="mdl:PhysicalNetworkPort"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkInterfaceRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkInterfaceRefsType element is the top-level container for an
        unbounded list of NetworkInterfaceRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkInterfaceRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a NetworkInterfaceRef shall refer to
        the ID attribute of a NetworkInterface within the same NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PhysicalNetworkPortsType">
    <xsd:annotation>
      <xsd:documentation>
        The PhysicalNetworkPortsType element is the top-level container for an unbounded
        list of PhysicalNetworkPort elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PhysicalNetworkPort" type="PhysicalNetworkPortType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhysicalNetworkPortType">
    <xsd:annotation>
      <xsd:documentation>
        A PhysicalNetworkPort element describes the physical point of
        connection between the NetworkNodes that make up a network.  The
        Medium element describes the physical medium used by the port to
        transfer data.  The Medium element is an enumeration that can be set
        to one of the following values: Copper, Fiber, Wireless
      </xsd:documentation>
      <xsd:documentation>
        The PortNumber element, of type xsd:unsignedShort, describes
        the number assigned to a PhysicalNetworkPort.  This is used to
        describe the numbering of the physical ports on a NetworkNode.  For
        example, a switch may have ports "1", "2", "3", and "4".  The value of
        the PortNumber element of PhysicalNetworkPort element shall be a
        non-negative integer that is unique within the scope of the
        NetworkNode element containing it.  For instance, a switch containing
        a NetworkInterface element with N PhysicalNetworkPorts shall have N
        PhysicalNetworkPort elements, each with a unique PortNumber value.
      </xsd:documentation>
      <xsd:documentation>
        It is not required that the PortNumber elements for PhysicalNetworkPort
        elements on a NetworkNode have contiguous values. Likewise, the starting
        value (lowest number) is not standardized.  A NetworkNode may use
        zero-based port numbering or one-based numbering.  As an example, ports
        can be numbered 2, 4, 6, and 8.  It is recommended that the PortNumber
        elements of a NetworkNode should be one-based and use contiguous values.
        For example, a NetworkNode with four ports should use the values 1, 2,
        3, and 4.
      </xsd:documentation>
      <xsd:documentation>
        The PortDataRate element, of type mdl:ValueUnitType,
        describes the data rate of a PhysicalNetworkPort.  The data rate
        indicates the average number of transferred digital data units per
        unit of time.  The PortDataRate element is a floating-point
        value/units pair.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Medium" type="MediumEnum"/>
      <xsd:element name="PortNumber" type="xsd:nonNegativeInteger"/>
      <xsd:element name="PortDataRate" type="ValueUnitType"/>
      <xsd:element name="IEEE1588VersionOfPort" type="IEEE1588VersionOfPortEnum" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PhysicalNetworkPortRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The PhysicalNetworkPortRefsType element is the top-level container for an unbounded
        list of PhysicalNetworkPortRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PhysicalNetworkPortRef" type="PhysicalNetworkPortRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhysicalNetworkPortRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PhysicalNetworkPortRef must refer
        to the ID attribute of a PhysicalNetworkPort.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="VirtualNetworkInterfaceType">
    <xsd:annotation>
      <xsd:documentation>
        A VirtualNetworkInterface describes a network interface that can be
        created on a NetwokNode. This interface is not related to a physical
        netowrk interface on the NetwokNode.
      </xsd:documentation>
      <xsd:documentation>
        A IPAddress element, of type mdl:IPAddress, describes the IP address
        of the VirtualNetworkInterface.
      </xsd:documentation>
      <xsd:documentation>
        A Netmask element, of type mdl:IPAddress, describes the netmask of the
        VirtualNetworkInterface.
      </xsd:documentation>
      <xsd:documentation>
        The MACAddress element, of type mdl:MACAddress, describes the MAC
        address of the VirtualNetworkInterface.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="IPAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="Netmask" type="IPAddress" minOccurs="0"/>
      <xsd:element name="MACAddress" type="MACAddress" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="VirtualNetworkInterfaceRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a VirtualNetworkInterfaceRef shall refer to
        the ID attribute of a VirtualNetworkInterface within the same
        NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="RoutesType">
    <xsd:annotation>
      <xsd:documentation>
        A Routes element contains a list of one or more Route elements
        which describe the network routes that are configured on the
        NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Route" type="RouteType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RouteType">
    <xsd:annotation>
      <xsd:documentation>
        A Route element describes a single network route configured on
        a network interface of the NetworkNode.
      </xsd:documentation>
      <xsd:documentation>
        A Destination element, of type mdl:IPAddress, describes the
        destination network of the route.
      </xsd:documentation>
      <xsd:documentation>
        A Netmask element, of type mdl:IPAddress, describes the netmask
        of the route.
      </xsd:documentation>
      <xsd:documentation>
        A Gateway element, of type mdl:IPAddress, describes the gateway
        address for the route.
      </xsd:documentation>
      <xsd:documentation>
        A Metric element, of type xsd:positiveInteger, describes the
        metric of the route.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkInterfaceRef or RadioLinkRef identifies the network
        interface, either wired or wireless, to which the route applies.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Destination" type="IPAddress"/>
      <xsd:element name="Netmask" type="IPAddress"/>
      <xsd:element name="Gateway" type="IPAddress" minOccurs="0"/>
      <xsd:element name="Metric" type="xsd:positiveInteger" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType"/>
        <xsd:element name="RadioLinkRef" type="RadioLinkRefType"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ConnectorType">
    <xsd:annotation>
      <xsd:documentation>
        The Connector element describes a physical connector on a
        NetworkNode or a module and contains one or more Pin elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Pins" type="PinsType">
        <xsd:unique name="UniquePinNameInConnector">
          <xsd:selector xpath="mdl:Pin"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PinsType">
    <xsd:annotation>
      <xsd:documentation>
        The PinsType element is the top-level container for an unbounded
        list of Pin elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Pin" type="PinType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PinType">
    <xsd:annotation>
      <xsd:documentation>
        The Pin element describes a connection point on a physical
        connector.  The Pin element contains a Designator element that
        describes the pin number or letter within a connector.
      </xsd:documentation>
      <xsd:documentation>
        The Index attribute, of type xsd:positiveInteger, shall be
        unique within a connector and describes the ordering of the pin
        elements for display purposes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Designator" type="xsd:string"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PinRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The PinRefsType element is the top-level container for an unbounded
        list of PinRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PinRef" type="PinRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PinRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PinRef must refer to the ID
        attribute of a Pin within the same NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PortsType">
    <xsd:annotation>
      <xsd:documentation>
        The Ports element may contain one or more Port elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Port" type="PortType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortType">
    <xsd:annotation>
      <xsd:documentation>
        The Port element describes an logical interface through which
        data passes.  A Port element can contain a set of PinRef elements that
        indicate the connection points (i.e., the Pin elements) that represent
        the physical realization of the Port element.
      </xsd:documentation>
      <xsd:documentation>
        The PhysicalNetworkPortRef and PinRef elements provide
        linkages between system topology and physical interfaces.
      </xsd:documentation>
      <xsd:documentation>
        The CaptureCapabilityRefs element provides a way for a DAU to convey
        its bus capture capabilities during an Inventory request by referencing
        defined CaptureCapability elements. 
      </xsd:documentation>
      <xsd:documentation>
        The Index attribute, of type xsd:positiveInteger, shall be
        unique within a Ports element and describes the ordering of individual
        Port elements for display purposes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="PortDirection" type="PortDirectionEnum"/>
      <xsd:element name="PortPolarity" type="PolarityType" minOccurs="0"/>
      <xsd:element name="PortTypes" type="PortTypesType" minOccurs="0"/>
      <xsd:element name="Excitation" type="ExcitationType" minOccurs="0"/>
      <xsd:element name="CaptureCapabilityRefs" type="CaptureCapabilityRefsType" minOccurs="0"/>
      <xsd:element name="PinRefs" type="PinRefsType" minOccurs="0"/>
      <xsd:element name="PhysicalNetworkPortRef" type="PhysicalNetworkPortRefType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
    <xsd:attribute name="Enabled" type="xsd:boolean" default="true"/>
  </xsd:complexType>

  <xsd:complexType name="CaptureCapabilityRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The CaptureCapabilityRefsType element is the top-level container for an unbounded
        list of CaptureCapabilityRefType elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CaptureCapabilityRef" type="CaptureCapabilityRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="CaptureCapabilityRefType">
    <xsd:annotation>
      <xsd:documentation>
        The CaptureCapabilityRef element contains an IDREF attribute, of type
        xsd:IDREF, that shall reference the ID attribute of a CaptureCapability element.
      </xsd:documentation>  
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="ExcitationType">
    <xsd:annotation>
    <xsd:documentation>
      The Values element is a complex element of type
      mdl:ConditionParameters that describes the excitation voltages to apply
      to the device or sensor such that the CalibrationPairs are valid.
    </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Polarity" type="PolarityType"/>
      <xsd:element name="Values" type="ConditionParametersType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="PolarityType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Unipolar"/>
      <xsd:enumeration value="Bipolar"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="PortRefType">
    <xsd:annotation>
      <xsd:documentation>
        The PortRef element contains an IDREF attribute that shall
        refer to the ID attribute of a Port.  PortRef elements within a
        Network shall refer to a Port contained within the same Network or a
        contained sub-Network.  PortRef elements with the
        NetworkToNetworkPortMapping element may refer to Ports in other
        Networks.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PortTypesType">
    <xsd:sequence>
      <xsd:element name="PortType" type="PortTypeEnumExtType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortTypeEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The PortTypeEnumExtType provides an extensible enumeration.  If the
        value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the string representing the extended
        enumeration value. If the value is any other enumeration, the
        "Extension" attribute further specifies the enumeration's properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="PortTypeEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
        <xsd:attribute name="Thermocouple" type="ThermocoupleEnum"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="PortTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The PortTypeEnum element describes the type of the Port.  For these
        port types the device only needs to know their type. Configuration
        details are documented elsewhere in the schema. For example,
        bus speed is in the DataStream description.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ARINC429"/>
      <xsd:enumeration value="ARINC629"/>
      <xsd:enumeration value="Acquisition"/>
      <xsd:enumeration value="Analog"/>
      <xsd:enumeration value="Audio"/>
      <xsd:enumeration value="Bus"/>
      <xsd:enumeration value="CANbus"/>
      <xsd:enumeration value="CJCCompensation"/>
      <xsd:enumeration value="CardStrapping"/>
      <xsd:enumeration value="ChannelControl"/>
      <xsd:enumeration value="ChannelInput"/>
      <xsd:enumeration value="DCAB"/>
      <xsd:enumeration value="Digital"/>
      <xsd:enumeration value="Ethernet"/>
      <xsd:enumeration value="Excitation"/>
      <xsd:enumeration value="FiberChannel"/>
      <xsd:enumeration value="GPIO"/>
      <xsd:enumeration value="HSDB"/>
      <xsd:enumeration value="IEEE1394"/>
      <!-- TBD: change to MILSTD instead for consistency? -->
      <xsd:enumeration value="MIL-STD-1553"/>
      <xsd:enumeration value="Overhead"/>
      <xsd:enumeration value="PCM"/>
      <xsd:enumeration value="Serial"/>
      <xsd:enumeration value="SignalConditioner"/>
      <xsd:enumeration value="TestPoint"/>
      <xsd:enumeration value="Thermocouple"/>
      <xsd:enumeration value="Video"/>
      <xsd:enumeration value="Virtual"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="NetworkDomainType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkDomain element contains a Networks element and 
        a list of network-to-network PortMappings in the
        NetworkToNetworkPortMapping elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Networks" type="NetworksType"/>
      <xsd:element name="NetworkToNetworkPortMapping" type="PortMappingsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworksType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworksType element is the top-level container for an unbounded
        list of Network elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Network" type="NetworkType" maxOccurs="unbounded">
        <xsd:key name="PortInSameNetworkKey">
          <xsd:selector xpath=".//mdl:Port"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PortInSameNetworkKeyRef" refer="mdl:PortInSameNetworkKey">
          <xsd:selector xpath=".//mdl:PortRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:unique name="UniqueRoleID">
          <xsd:annotation>
            <xsd:documentation>
              This constraint enforces the rule that
              TmNSApp:RoleIDs must be unique within a Network.
            </xsd:documentation>
          </xsd:annotation>
          <xsd:selector xpath=".//mdl:TmNSApp"/>
          <xsd:field xpath="mdl:RoleID"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueDeviceName">
          <xsd:selector xpath=".//mdl:Device"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniqueNetworkNodeName">
          <xsd:selector xpath=".//mdl:NetworkNode"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
        
        <xsd:unique name="UniquePortMappingName">
          <xsd:selector xpath=".//mdl:PortMapping"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkType">
    <xsd:annotation>
      <xsd:documentation>
        A Network element describes the physical and logical design of
        a network.  This description covers the physical topology (e.g., the
        NetworkNodes and how they are interconnected), the logical
        configuration (e.g., the decomposition of networks into subnets and
        rules for how messages will flow on the network), and the performance
        capabilities (e.g., the Quality of Service (QoS) configuration, link
        and NetworkNode speeds, and resources) of networks.  Each Network
        shall contain a Name element, of type xsd:token, that shall be unique
        across all Networks in the MDL instance document. The XML processor
        will remove line feeds, carriage returns, tabs, leading and trailing
        spaces, and multiple spaces from all elements of type xsd:token.
      </xsd:documentation>
      <xsd:documentation>
        The NetworkType element describes the type of the containing
        Network element.  The NetworkType element is an enumeration that can
        be set to one of the following values: RangeNetwork, TmNS, TestArticle
        Network, VehicleNetwork, GroundStationNetwork, GroundNetwork,
        GenericNetwork
      </xsd:documentation>
      <xsd:documentation>
        Network elements can be contained within other Network
        elements.  This containment allows the description of hierarchical
        networks.
      </xsd:documentation>
      <xsd:documentation>
        The Devices element contains descriptions of non-TmNS,
        non-network enabled devices such as transducers.  The PortMappings
        element describes physical connections, or PortMappings, between
        NetworkNodes and Devices within a single Network.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="NonZeroLengthType"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="NetworkType" type="NetworkTypeEnum"/>
      <!-- TBD: will this work with NetworksType? -->
      <xsd:element name="Networks" type="NetworksType" minOccurs="0"/>
      <xsd:element name="NetworkNodes" type="NetworkNodesType" minOccurs="0"/>
      <xsd:element name="Devices" type="DevicesType" minOccurs="0"/>
      <xsd:element name="Antennas" type="AntennasType" minOccurs="0"/>
      <xsd:element name="PortMappings" type="PortMappingsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkRefType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkRef element contains an IDREF attribute, of type
        xsd:IDREF, that shall reference the ID attribute of a Network element
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkRefs element in a TestMission element is a
        container for one or more NetworkRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NetworkRef" type="NetworkRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AntennasType">
    <xsd:annotation>
      <xsd:documentation>
        The AntennasType element is the top-level container for an unbounded
        list of Antenna elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Antenna" type="AntennaType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AntennaType">
    <xsd:annotation>
      <xsd:documentation>
        The Antenna element serves as the physical association of an
        antenna, its antenna control unit, receivers, transmitters and radios.
        An antenna itself is not configured via MDL.
      </xsd:documentation>
      <xsd:documentation>
        The Name element, of type xsd:token, contains a human readable
        name identifier for the antenna.  The Manufacturer element, of type
        xsd:string, contains the name of the manufacturer of the Device.  The
        Model element, of type xsd:string, contains the model number of
        the Device.  The SerialID element, of type xsd:string, contains
        the model number of the Device.
      </xsd:documentation>
      <xsd:documentation>
        The ACU element, of type TmNSAppRefsType, contains a
        TmNSAppRef which identifies the antenna control unit (if
        present) for this antenna.
      </xsd:documentation>
      <xsd:documentation>
        The SSTTxs element, of type TmNSAppRefsType, contains a
        list of TmNSAppRef elements which identify the SST transmitter
        elements that are physically connected to this antenna.
      </xsd:documentation>
      <xsd:documentation>
        The SSTRxs element, of type TmNSAppRefsType, contains a
        list of TmNSAppRef elements which identify the SST receiver
        elements that are physically connected to this antenna.
      </xsd:documentation>
      <xsd:documentation>
        The Radios element, of type TmNSAppRefsType, contains a
        list of TmNSAppRef elements which identify the TmNSRadio
        elements that are physically connected to this antenna.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ACURef" type="TmNSAppRefType" minOccurs="0"/>
      <xsd:element name="SSTTxRefs" type="TmNSAppRefsType" minOccurs="0"/>
      <xsd:element name="SSTRxRefs" type="TmNSAppRefsType" minOccurs="0"/>
      <xsd:element name="RadioRefs" type="TmNSAppRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DevicesType">
    <xsd:annotation>
      <xsd:documentation>
        The DevicesType element is the top-level container for an unbounded
        list of Device elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Device" type="DeviceType" maxOccurs="unbounded">
        <xsd:key name="PinKeyInDevice">
          <xsd:selector xpath=".//mdl:Pin"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PinKeyRefInDevice" refer="mdl:PinKeyInDevice">
          <xsd:selector xpath=".//mdl:PinRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceType">
    <xsd:annotation>
      <xsd:documentation>
        The Device element describes the properties of device, such as
        a transducer, that is not network enabled for a TmNS-based system.
      </xsd:documentation>
      <xsd:documentation>
        The Manufacturer element, of type xsd:string, contains the
        name of the manufacturer of the Device.  The Model element, of
        type xsd:string, contains the model number of the Device.  The
        SerialID element, of type xsd:string, contains the model
        number of the Device.
      </xsd:documentation>
      <xsd:documentation>
        The DeviceType element, can be one of the following strings:
        Accelerometer, FlowMeter, Microphone, Potentiometer,
        PressureTransducer, StrainGauge, Synchro, Thermocouple
      </xsd:documentation>
      <xsd:documentation>
        The InventoryID element, of type xsd:token, describes the
        inventory identifier of the device.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string"/>
      <xsd:element name="Model" type="xsd:string"/>
      <xsd:element name="SerialID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DeviceType" type="DeviceTypeEnumExtType"/>
      <xsd:element name="LogicalLocation" type="LogicalLocationType" minOccurs="0"/>
      <xsd:element name="PhysicalLocation" type="PhysicalLocationType" minOccurs="0"/>
      <xsd:element name="DeviceStructure" type="DeviceStructureType">
        <xsd:unique name="UniquePositionInDeviceModule">
          <xsd:selector xpath="mdl:DeviceModule"/>
          <xsd:field xpath="mdl:Position"/>
        </xsd:unique>
        <xsd:unique name="UniqueNameInDeviceModule">
          <xsd:selector xpath="mdl:DeviceModule"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <!-- TBD DeviceRef -->

  <xsd:complexType name="DeviceTypeEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceTypeEnumExtType provides an extensible enumeration.  If the
        value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the string representing the extended
        enumeration value. If the value is any other enumeration, the
        "Extension" attribute further specifies the enumeration's properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="DeviceTypeEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
        <xsd:attribute name="Thermocouple" type="ThermocoupleEnum"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="DeviceTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceType element is an extensible enumeration of the supported
        non-TmNS devices, such as transducers and thermocouples.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Accelerometer"/>
      <xsd:enumeration value="FlowMeter"/>
      <xsd:enumeration value="Microphone"/>
      <xsd:enumeration value="Potentiometer"/>
      <xsd:enumeration value="PressureTransducer"/>
      <xsd:enumeration value="StrainGauge"/>
      <xsd:enumeration value="Synchro"/>
      <xsd:enumeration value="Thermocouple"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ThermocoupleEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="K"/>
      <xsd:enumeration value="E"/>
      <xsd:enumeration value="J"/>
      <xsd:enumeration value="N"/>
      <xsd:enumeration value="B"/>
      <xsd:enumeration value="R"/>
      <xsd:enumeration value="S"/>
      <xsd:enumeration value="T"/>
      <xsd:enumeration value="C"/>
      <xsd:enumeration value="M"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="CalibrationType">
    <xsd:annotation>
      <xsd:documentation>
        The Calibration element in a Device is a container for
        individual input and output pairs used during the calibration of the
        Device as well as the date of the last calibration.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CalibrationDate" type="xsd:date"/>
      <xsd:element name="CalibrationPairs" type="CalibrationPairsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CalibrationPairsType">
    <xsd:annotation>
      <xsd:documentation>
        The CalibrationPairsType element is the top-level container for an unbounded
        list of CalibrationPair elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="CalibrationPair" type="CalibrationPairType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CalibrationPairType">
    <xsd:annotation>
      <xsd:documentation>
        The InputValue element, is a complex element of type
        mdl:ValueUnit that describes the input during calibration of the
        device.  The OutputValue element, is a complex element of type
        mdl:ValueUnit that describes the output for a given input during
        calibration of the device.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="InputValue" type="ValueUnitType"/>
      <xsd:element name="OutputValue" type="ValueUnitType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortMappingsType">
    <xsd:annotation>
      <xsd:documentation>
        The PortMappings element may contain one or more PortMapping
        elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PortMapping" type="PortMappingType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortMappingType">
    <xsd:annotation>
      <xsd:documentation>
        The PortMapping element describes the connection between two
        Port elements.  Often, the PortMapping element will capture the flow
        of data between the indicated Port elements.
      </xsd:documentation>
      <xsd:documentation>
        The PortMapping may include either a DataStreamRef, or a
        MeasurementRef to describe the properties of the data that flows over
        the connection described by the PortMapping element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="PortRef" type="PortRefType" maxOccurs="2"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="DataStreamRefs" type="DataStreamRefsType"/>
        <xsd:element name="MeasurementRefs" type="MeasurementRefsType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PortMappingRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PortMappingRef must refer to the
        ID attribute of a PortMapping.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="GenericParameterType">
    <xsd:annotation>
      <xsd:documentation>
        The GenericParameter element allows the description of additional
        information outside the scope of the MDL schema, and may also be used to
        document decisions made to arrive at a vendor-specific configuration.
        The GenericParameter element contains one or more NameValue elements.
      </xsd:documentation>
      <xsd:documentation>
        In addition, the GenericParameter element contains an xsd:any tag to
        allow for any well-formed XML to be placed in the element, however the
        intent is for the name/value pairs to be used as the primary mechanism
        for recording generic parameters so that the settings can
        be easily presented to the user in a standardized way.
      </xsd:documentation>
      <xsd:documentation>
        The main possibility that the xsd:any tags allow is the use of elements
        of a schema from outside MDL. This gives opportunities for uses such as
        including snippets from a vendor-specific schema used for finer-grained
        configuration of a module than MDL allows or including HTML-based help
        files or reports in the document returned from negotiation.
      </xsd:documentation>
      <xsd:documentation>
        The use of GenericParameter shall not be used as a work-around.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NameValues" type="NameValuesType">
        <xsd:unique name="uniqueNameValueIndex">
          <xsd:selector xpath="mdl:NameValue"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
      <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValuesType">
    <xsd:annotation>
      <xsd:documentation>
        The NameValues element is a container for one or more
        NameValue elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="NameValue" type="NameValueType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NameValueType">
    <xsd:simpleContent>
      <xsd:annotation>
        <xsd:documentation>
          The NameValue element is a Name/Value pair. The Index attribute is
          used to document the ordering of sibling NameValue elements. 
          The Vendor attribute may be used to document decisions made to arrive
          at a vendor-specific configuration.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="Name" type="xsd:token" use="required"/>
        <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
        <xsd:attribute name="Author" type="xsd:string"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType name="PCMMeasurementRefType">
    <xsd:annotation>
      <xsd:documentation>
        The PCMMeasurementRef element contains an NameRef attribute,
        of type xsd:string, that shall reference the Name attribute of the
        TMATS schema's Measurement within the same MeasurementDomain.  The
        XPATH expression for the location of the Name attribute is
        /MDLRoot/MeasurementDomains/MeasurementDomain/DataStreams/DataStream/PCMDataLink/PCMFormatAttributes/
        PCMMeasurements/MeasurementList/Measurement[@ID]
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PCMMinorFramesType">
    <xsd:annotation>
      <xsd:documentation>
        The PCMMinorFramesType element is the top-level container for an unbounded
        list of PCMMinorFrame elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="PCMMinorFrame" type="PCMMinorFrameType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="PCMMinorFrameType">
    <xsd:simpleContent>
      <xsd:annotation>
        <xsd:documentation>
          The PCMMinorFrame element contains a positive integer
          (greater than or equal to 1) that indicates a specific PCM minor frame
          to be included in a Package.  The Index attribute of type
          xsd:positiveInteger indicates the ordering of PCM minor frames (from
          the referenced TMATS-described PCM stream) when inserted into a
          Package.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:extension base="xsd:positiveInteger">
        <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="Percentage">
    <xsd:annotation>
      <xsd:documentation>
        The Percentage element is a simple type, double-precision
        floating point percent value that must be greater than zero.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:double">
      <xsd:minInclusive value="0"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="UncertaintiesType">
    <xsd:annotation>
      <xsd:documentation>
        The UncertaintiesType element is the top-level container for an
        unbounded list of Uncertainty elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Uncertainty" type="UncertaintyType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="UncertaintyType">
    <xsd:annotation>
      <xsd:documentation>
        The Uncertainty element describes the uncertainty through a
        confidence level over a specified confidence interval.
      </xsd:documentation>
      <xsd:documentation>
        The ConfidenceInterval element, of type
        mdl:ConditionParametersType, contains any number of ConditionParameter
        elements and describes the bounds over which the confidence level
        apply.
      </xsd:documentation>
      <xsd:documentation>
        The ConfidenceLevel element is a percentage represented as an
        integer in the range from "0" to "100" inclusive.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ConfidenceInterval" type="ConditionParametersType"/>
      <xsd:element name="ConfidenceLevel" type="Percentage"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ConditionParametersType">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionParameters element is a container for zero or
        more ConditionParameter elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ConditionParameter" type="ConditionParameterType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ConditionParameterType">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionParameter element describes a value or bound of
        values for the element containing the ConditionParameter element.
        Multiple ConditionParameter elements can be used to describe ranges of
        values.  The ConditionParameter shall contain a ConditionValue,
        and either a UnitRef or an BaseUnit, but not both.
      </xsd:documentation>
      <xsd:documentation>
        The ConditionValue element, of type mdl:FlexibleLong or xsd:double,
        specifies the value to be compared against using the operation
        described by the ConditionOperation element.  For example, if the
        ConditionValue element value is "0b10" and the ConditionOperation
        element value is greater than then the values being described by the
        ConditionParameter element are greater than the binary value of 0b10
        (i.e., 2 in decimal).
      </xsd:documentation>
      <xsd:documentation>
        The UnitRef and BaseUnit elements describe the units of
        measure for the ConditionParameter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ConditionOperation" type="ConditionOperationEnum"/>
      <xsd:element name="ConditionValue" type="ValueType"/>
      <xsd:choice>
        <xsd:element name="UnitRef" type="UnitRefType"/>
        <xsd:element name="BaseUnit" type="BaseUnitEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="ConditionOperationEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionOperation is an enumeration that represents
        "greater than" ("&gt;"), "greater than or equal" ("&gt;="), "less
        than" ("&lt;"), "less than or equal" ("&lt;="), "equal to" ("=="), or
        "not equal to" ("!=").
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="&gt;"/>
      <xsd:enumeration value="&gt;="/>
      <xsd:enumeration value="&lt;"/>
      <xsd:enumeration value="&lt;="/>
      <xsd:enumeration value="=="/>
      <xsd:enumeration value="!="/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="FrequencyBandsType">
    <xsd:annotation>
      <xsd:documentation>
        The FrequencyBandsType element is the top-level container for an
        unbounded list of FrequencyBand elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FrequencyBand" type="FrequencyBandType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FrequencyBandType">
    <xsd:annotation>
      <xsd:documentation>
        The FrequencyBand element describes a frequency domain stop
        band, a frequency domain pass band, or a frequency domain transition
        band.
      </xsd:documentation>
      <xsd:documentation>
        The BandType element is an enumeration that can be set to one
        of the following values: PassBand, StopBand, TransitionBand
      </xsd:documentation>
      <xsd:documentation>
        The EdgeFrequency element, of type mdl:ConditionParameters,
        describes a frequency value within the frequency domain.  Assuming an
        analog representation of frequency content, a possible value would be
        50 Hertz.
      </xsd:documentation>
      <xsd:documentation>
        The Attenuation element, of type mdl:ConditionParameters,
        describes an attenuation value of the corresponding frequency band.
        In the case of a pass band, the attenuation describes the maximum
        allowable attenuation, commonly 3 decibels (dB), relative to no
        attenuation (0 dB) within the band.  In the case of a transition band,
        the attenuation describes maximum the allowable gain or minimum
        required loss relative to no attenuation (0 dB).  In the case of a
        stop band, the attenuation describes the minimum required attenuation
        relative to no attenuation (0 dB).
      </xsd:documentation>
      <xsd:documentation>
        A positive value for attenuation indicates a reduction in the
        amplitude of a signal, whereas a negative value represents an increase
        or gain in the amplitude.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="BandType" type="BandTypeEnum"/>
      <xsd:element name="EdgeFrequency" type="ConditionParametersType"/>
      <xsd:element name="Attenuation" type="ConditionParametersType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FrequencyContentType">
    <xsd:annotation>
      <xsd:documentation>
        The FrequencyContent element describes the frequency ranges
        occupied by the analog signal.  This description is provided in the
        frequency domain and is composed of stop bands and/or transition bands
        and/or pass bands.  These bands are described using a collection of
        FrequencyBand elements.  The frequency content description can be
        provided assuming either an analog or digital representation.
      </xsd:documentation>
      <xsd:documentation>
        The PercentSignal element may be used to describe the percent
        of total signal energy that falls within the FrequencyBand.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FrequencyBands" type="FrequencyBandsType"/>
      <xsd:element name="PercentSignal" type="Percentage" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AnalogAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        The AnalogAttributes element describes the properties of data
        when it exists in an analog form.  An applicable scenario would be
        describing the analog output of a sensor that is connected to the
        input of an analog-to-digital converter on a DAU.  The following
        elements describe only the analog signal and not the methods by which
        it is to be acquired or processed.
      </xsd:documentation>
      <xsd:documentation>
        The SignalRange element, of type mdl:ConditionParameters,
        describes the range of values over which an analog signal exists.  For
        example, the range of a temperature sensor could be -40C to 120C.
      </xsd:documentation>
      <xsd:documentation>
        The Resolution element, of type mdl:ConditionParameters,
        describes the smallest measurable increment between analog signal
        values.  For example, the resolution of a temperature sensor could
        indicate that temperature changes of no larger than 0.1C may go
        undetected.
      </xsd:documentation>
      <xsd:documentation>
        The FilterType element is used to describe the filter used by the
        measurement. If a user has no desired filter, the value shall be
        "Negotiated", and the DAU shall populate the element with the actual
        filter during negotiation.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="EUSignalRange" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="IUSignalRange" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="Resolution" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="FrequencyContent" type="FrequencyContentType" minOccurs="0"/>
      <xsd:element name="FilterType" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DigitalAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        A DigitalAttributes element describes the properties of data
        when it exists in a digitally encoded form.  This element describes
        digital data without regard for how it is packaged to be carried over
        a digital transport or medium (e.g., Ethernet) using a specific
        protocol.  An applicable scenario would be describing the output
        values of an analog-to-digital converter on a DAU.  The following
        elements describe only the digital data signal and not the methods by
        which it is processed.
      </xsd:documentation>
      <xsd:documentation>
        The DataLength element, of type mdl:ConditionParameters,
        describes the length or size of the digital data being described by
        the DigitalAttributes element in a unit related to the number of bits
        or bytes.
      </xsd:documentation>
      <xsd:documentation>
        The Endianness element, of type mdl:ConditionParameters,
        describes the ordering of bits of the of the digital data being
        described by the DigitalAttributes element.
      </xsd:documentation>
      <xsd:documentation>
        The DigitalEncoding element is an enumeration that describes
        the encoding scheme of the digital data being described by the
        DigitalAttributes element.
      </xsd:documentation>
      <xsd:documentation>
        The SampleRate element, of type mdl:ConditionParameters,
        describes the sampling rate of the digital data being described by the
        DigitalAttributes element, e.g. 10000 Hertz. If the user specifies both
        a desired range and a target value, the device should use the target
        value as the requested rate and validate the actual achieved rate meets
        the requested range. This is done by creating two ConditionParameters
        defining the bounds of the desired range
        (i.e. using &gt; or &gt;= and &lt; or &lt;=),
        and a third ConditionParameter defining the target value (i.e. using =).
      </xsd:documentation>
      <xsd:documentation>
        The DataRate element, of type mdl:ConditionParameters,
        describes the data rate of the digital data being described by the
        DigitalAttributes element.  The data rate indicates the average number
        of transferred digital data units per unit of time, e.g. bits per
        second.
      </xsd:documentation>
      <xsd:documentation>
        The ActiveInputRange element, of type mdl:ConditionParameters,
        may be used to describe a range, typically in counts, in which the
        signal is expected to stay.  For example a 12-bit analog to digital
        converter will produce output values in the range of 0 to 4095.  In
        order to avoid accidental saturation, the signal conditioning may be
        set so that the active input range is between 100 and 4000 to allow
        for approximately 100 counts above and below the expected range.
      </xsd:documentation>
      <xsd:documentation>
        The DefaultValue element is used to define the value of a measurement
        before it has been given any other values. This should be used in two
        circumstances.  First, when a measurement is used in a derived
        processing function that doesn't force the measurement to have been
        initialized, the measurement will have a value of its DefaultValue.
        Second, when a constant value is needed in a package, e.g.  a subframe
        ID, a measurement can be given a DefaultValue and never initialized,
        therefore always having the same value. This second case should also
        make use of the ConstantValue element.
      </xsd:documentation>
      <xsd:documentation>
        The ConstantValue element is a boolean defining if the measurement is a
        constant value. If ConstantValue is set to true, the containing
        measurement shall never be initialized with any value. This should be
        used in conjunction with the DefaultValue element to allow for a
        measurement guaranteed to have a defined constant value.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DataLength" type="ConditionParametersType"/>
      <xsd:element name="Endianness" type="EndiannessEnum" minOccurs="0"/>
      <xsd:element name="DigitalEncoding" type="DigitalEncodingEnumExtType"/>
      <xsd:element name="SampleRate" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="DataRate" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="ActiveInputRange" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="DefaultValue" type="FlexibleLong" minOccurs="0"/>
      <xsd:element name="ConstantValue" type="xsd:boolean" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampFormat element is an enumeration of timestamp format
        strings.  Allowable values identify IRIG time codes, UTC, and IEEE 1588
        versions.
      </xsd:documentation>
      <xsd:documentation>
        The TimestampType element is an enumeration that identifies the type of
        timestamp, whether it is an absolute timestamp or a relative time offset
        from the Message/Package time.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TimestampFormat" type="TimestampFormatType"/>
      <xsd:element name="TimestampType" type="TimestampTypeEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DSCPTableType">
    <xsd:annotation>
      <xsd:documentation>
        The DSCPTable element contains a description of the DiffServ
        Code Point (DSCP) values, which are parameters used when publishing
        data onto the TmNS-based system to implement the desired QoS behavior.
        The DSCPTable element is a collection of DSCP Table entries.
        TmNSDataMessages priority levels are specified through references to
        these DSCP bit settings (i.e., the DSCP Table entries).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DSCPTableEntry" type="DSCPTableEntryType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DSCPTableEntryType">
    <xsd:annotation>
      <xsd:documentation>
        The DSCPTableEntry element describes a DSCP Table entry using
        a value/description pair.
      </xsd:documentation>
      <xsd:documentation>
        The Description element, of type xsd:string, is a
        human-interpretable description of the corresponding DSCPValue
        element.
      </xsd:documentation>
      <xsd:documentation>
        The DSCPValue element, of type mdl:SixBitBinary, describes a
        six-bit value that is placed into the IP header for delivery.  The
        human-interpretable meaning of the six-bit value is given by the
        corresponding DSCPDescription element.  The value of the DSCPValue
        element shall be unique within the MDL instance document.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="DSCPValue" type="SixBitBinary"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DSCPTableEntryRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DSCPTableEntryRef must refer to
        the ID attribute of a DSCPTableEntry.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SupportedMulticastAddressesType">
    <xsd:annotation>
      <xsd:documentation>
        The SupportedMulticastAddresses element contains a list of one or more
        SupportedMulticastAddress elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="SupportedMulticastAddress" type="SupportedMulticastAddressType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SupportedMulticastAddressType">
    <xsd:annotation>
      <xsd:documentation>
        The SupportedMulticastAddress element describes the multicast addresses
        that can be assigned to messages from TmNS network data sources.  It
        is expected that this list will often be established by or coordinated
        with Range IT staff.
      </xsd:documentation>
      <xsd:documentation>
        The Description element, of type xsd:string, is a
        human-readable identifier of the multicast address and its use.  The
        MulticastAddress element, of type mdl:IPAddress, describes one
        supported multicast address.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="MulticastAddress" type="IPAddress"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimestampDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampDefinition element describes the properties and
        format of a timestamp used within a network.
      </xsd:documentation>
      <xsd:documentation>
        The TimestampFormat element describes the format of the
        timestamps defined by the TimestampDefinition element.  The described
        timestamp format indicates how to interpret the ordering and scale
        factor of the values within a generated timestamp.  For example, the
        selected format can indicate which values correspond to days, hours,
        minutes, or seconds.
      </xsd:documentation>
      <xsd:documentation>
        The Size element describes the size or length of the timestamp
        defined by a TimestampDefinition element.  The Size element is an
        mdl:FlexibleLong value/units pair.  The units for this element shall
        be in units of digital data lengths such as bits or bytes.
      </xsd:documentation>
      <xsd:documentation>
        The Resolution element, of type mdl:ConditionParameters,
        describes the smallest increment between the timestamp values defined
        by a TimestampDefinition element.  The resolution of a timestamp is
        typically determined by the timescale because it defines the smallest
        measurable unit of time when generating a timestamp. The Resolution
        element contains any number of ConditionParameter elements.
      </xsd:documentation>
      <xsd:documentation>
        The Uncertainty element describes the level of uncertainty in
        the generated timestamp values.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="TimestampFormat" type="TimestampFormatType"/>
      <xsd:element name="Timescale" type="TimescaleEnum"/>
      <xsd:element name="Size" type="ValueUnitType" minOccurs="0"/>
      <xsd:element name="Resolution" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="Uncertainties" type="UncertaintiesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimestampDefinitionRefType">
    <!--TBD NOT USED-->
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a TimestampDefinitionRef must refer
        to the ID attribute of a TimestampDefinition.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="TimestampFormatType">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampFormatEnum element describes the format of the
        timestamps defined by the TimestampDefinition element.  The described
        timestamp format indicates how to interpret the ordering and scale
        factor of the values within a generated timestamp.  For example, the
        selected format can indicate which values correspond to days, hours,
        minutes, or seconds. The TimestampFormatEnum element is an xsd:union
        consisting of a restricted set of xsd:string values and an enumerated
        set of values.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="IRIGTimecodes TimestampFormatEnum"/>
  </xsd:simpleType>

  <xsd:simpleType name="TimestampFormatEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampFormatEnum is an enumerated list of valid values
        that form a subset of the allowable values of the
        TimestampFormatEnum. Valid values are "UTC" interpreted as Coordinated
        Universal Time (UTC) or Greenwich Mean Time, "IEEE 1588-2002", and
        "IEEE 1588-2008".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="UTC"/>
      <xsd:enumeration value="IEEE 1588-2002"/>
      <xsd:enumeration value="IEEE 1588-2008"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IRIGTimecodes">
    <xsd:annotation>
      <xsd:documentation>
        The IRIGTimecodes is a restricted xsd:string with valid values
        that conform to the listed regular expression pattern.  The regular
        expression supports the entry of all IRIG timecode formats as defined
        in RCC Document 200-04.  However, the entered format string is valid
        only if it is defined in the reference document.  Not all of timecode
        format types (e.g., IRIG format "E") support all possible combinations
        of the format control codes (e.g., "IRIG E211" is an undefined
        format).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="\IRIG (A|B|D|E|G|H)([0-2][0-5][0-7])"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimestampTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampTypeEnum is an enumerated list of valid values
        for a TimestampType.  A timestamp can be either an absolute
        timestamp or an offset time from the Message/Package time
        from the standard message/package headers.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="AbsoluteTime"/>
      <xsd:enumeration value="PackageTimeOffset"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="UnsignedInt4">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:UnsignedInt4 data type is a 4-bit unsigned integer.  Valid
        values are the non-negative integers in the inclusive range from 0 to
        15.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:unsignedByte">
      <xsd:minInclusive value="0"/>
      <xsd:maxInclusive value="15"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- TBD: remove? not used anywhere -->
  <xsd:simpleType name="uInt5">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:uInt5 data type is a 5-bit unsigned integer.  Valid
        values are the non-negative integers in the inclusive range from 0 to
        31.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:unsignedInt">
      <xsd:minInclusive value="0"/>
      <xsd:maxInclusive value="31"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MACAddress">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:MACAddress data type is an xsd:string of hexadecimal
        digits ('0'-'9' and 'A'-'F' or 'a'-'f') separated by either the ':'
        (colon) or '-' (hyphen) character.  It represents the 48-bit Media
        Access Control (MAC) address identifier.  Valid MAC addresses contain
        a series of six one-byte long hexadecimal numbers separated by either
        the ':' or the '-' character (a total of five ':' or '-' characters
        appear).  A valid value of the mdl:MACAddress data type is
        "01:23:45:67:89:AB" or "01-23-45-67-89-AB".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="([0-9a-fA-F]{2}(:|\-)){5}[0-9a-fA-F]{2}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="PhoneNumber">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:PhoneNumber data type contains at least 3 numbers but no
        more than 10.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="\d{3,10}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IPAddress">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IPAddress data type is an xsd:union of the
        mdl:IPv4Address and mdl:IPv6Address data types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="IPv4Address IPv6Address"/>
  </xsd:simpleType>

  <xsd:simpleType name="IPv4Address">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IPv4Address data type is an xsd:string of decimal
        digits separated by '.' (period) characters.  It represents the 32-bit
        dot-decimal notation of IPv4 addresses.  Valid IPv4 addresses contain
        a series of four one-byte long decimal numbers (0 - 255) separated by
        the '.' character (a total of three '.' characters appear).  A valid
        value of the mdl:IPv4Address data type is "212.23.123.0".  See RFC 790
        in Section 2.2.2 for further details on IPv4 addresses.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IPv6Address">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IPv6Address data type is an xsd:string of hexadecimal
        digits ('0'-'9' and 'A'-'F' or 'a'-'f') separated by ':' (colon)
        characters.  It represents the 128-bit notation of IPv6 addresses.
        Fully expanded IPv6 addresses contain a series of eight two-byte long
        hexadecimal numbers separated by the ":" character (a total of seven
        ':' characters appear).  A single two-byte long hexadecimal number
        contains up to four hexadecimal digits.  All valid IPv6 addresses are
        supported in the MDL.  A valid value of the mdl:IPv6Address data type
        is "2001:DB8:0000:0056:0000:ABCD:EF12:1234".  See RFC 2460 for further
        details on IPv6 addresses and valid shorthand notations.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})|:))|(([0-9A-Fa-f]{1,4}:){6}(:|((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})|(:[0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){0,1}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){0,2}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,3}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){0,4}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(:(:[0-9A-Fa-f]{1,4}){0,5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})))(%.+)?"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="FlexibleLong">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:FlexibleLong data type is an xsd:union of the xsd:long
        (64-bit signed integers), mdl:BinInteger, and mdl:HexInteger data
        types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="xsd:long HexInteger BinInteger"/>
  </xsd:simpleType>

  <xsd:simpleType name="MaskType">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:MaskType data type is an xsd:union of the
        mdl:BinInteger and mdl:HexInteger data types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="BinInteger HexInteger"/>
  </xsd:simpleType>

  <xsd:simpleType name="BinInteger">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:BinInteger data type is an arbitrarily long string of
        binary digits.  It is an xsd:string containing a prefix string of "0b"
        followed by a string of characters of binary digits ('0' and '1').  An
        example value of the mdl:BinInteger data type would be "0b10101101",
        which is an 8-bit binary representation of the decimal number 173.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1]+"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="HexInteger">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:HexInteger data type is an arbitrarily long string of
        hexadecimal digits.  It is an xsd:string containing a prefix string of
        "0x" followed by a string of characters of hexadecimal digits ('0'-'9'
        and 'A'-'F' or 'a'-'f').  An example value of the mdl:HexInteger data
        type would be "0xAD" or "0xad", which is an 8-bit hexadecimal
        representation of the decimal number 173.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F]+"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SixtyFourBit">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixtyFourBit data type is an xsd:union of the
        mdl:SixtyFourBitBinary and mdl:SixtyFourBitHex data types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="SixtyFourBitBinary SixtyFourBitHex"/>
  </xsd:simpleType>

  <xsd:simpleType name="SixtyFourBitBinary">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixtyFourBitBinary data type is an xsd:string with a
        prefix "0b"followed by 64 characters of binary digits ('0' and '1').
        An example value of the mdl:SixtyFourBitBinary data type would be
        "0b0000000000000000000000000000000000000000000000000000000000000001",
        which is a 64-bit binary representation of the decimal number 1.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1]{64}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SixtyFourBitHex">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixtyFourBitHex data type is an xsd:string with a
        prefix "0x"followed by 16 characters of hexadecimal digits ('0'-'9'
        and 'A'-'F' or 'a'-'f').  An example value of the mdl:SixtyFourBitHex
        data type would be "0x000A0C1DF00932E2" or "0x000a0c1df00932e2" which
        is a 64-bit hexadecimal representation of the decimal number
        2,828,072,487,826,146.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F]{16}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ThirtyTwoBit">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:ThirtyTwoBit data type is an xsd:union of the
        mdl:ThirtyTwoBitBinary and mdl:ThirtyTwoBitHex data types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="ThirtyTwoBitBinary ThirtyTwoBitHex"/>
  </xsd:simpleType>

  <xsd:simpleType name="ThirtyTwoBitHex">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:ThirtyTwoBitHex data type is an xsd:string with a
        prefix "0x"followed by eight characters of hexadecimal digits ('0'-'9'
        and 'A'-'F' or 'a'-'f').  An example value of the mdl:ThirtyTwoBitHex
        data type would be "0x00A9803C" or "0x00a9803c" which is a 32-bit
        hexadecimal representation of the decimal number 11,108,412.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F]{8}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ThirtyTwoBitBinary">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:ThirtyTwoBitBinary data type is an xsd:string with a
        prefix "0b"followed by 32 characters of binary digits ('0' and '1').
        An example value of the mdl:ThirtyTwoBitBinary data type would be
        "0b00000000000000000000000000000010", which is a 32-bit binary
        representation of the decimal number 2.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1]{32}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SixBitBinary">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixBitBinary data type is an xsd:string with a prefix
        "0b"followed by six characters of binary digits ('0' and '1').  An
        example value of the mdl:SixBitBinary data type would be "0b011011",
        which is a 6-bit binary representation of the decimal number 27.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1]{6}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="FourBitHex">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:FourBitHex data type is an xsd:string with a
        prefix "0x"followed by one character of hexadecimal digits ('0'-'9'
        and 'A'-'F' or 'a'-'f').  An example value of the mdl:FourBitHex
        data type would be "0xa" or "0xA" which is a 4-bit
        hexadecimal representation of the decimal number 10.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F]{1}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IEEE1588VersionEnum">
    <xsd:annotation>
      <xsd:documentation>
        The IEEE1588Version element, of type xsd:string, describes the
        version of the IEEE 1588 Precision Time Protocol (PTP) on the
        NetworkNode.  Valid values are "2002", "2008e2e" (for end-to-end),
        "2008p2p" (for peer-to-peer), and "Multiple".  If "Multiple" is set on
        the NetworkNode, each PhysicalNetworkPort in the NetworkNode shall
        contain the IEEE1588VersionOfPort element.  If "Multiple" is not set
        on the NetworkNode, the PhysicalNetworkPort shall not contain the
        IEEE1588VersionOfPort element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Multiple"/>
      <xsd:enumeration value="2002"/>
      <xsd:enumeration value="2008e2e"/>
      <xsd:enumeration value="2008p2p"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IEEE1588VersionOfPortEnum">
    <xsd:annotation>
      <xsd:documentation>
        The IEEE1588Version element, of type xsd:string, describes the
        version of the IEEE 1588 Precision Time Protocol (PTP) on the
        NetworkNode.  Valid values are "2002", "2008e2e" (for end-to-end),
        and "2008p2p" (for peer-to-peer).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="2002"/>
      <xsd:enumeration value="2008e2e"/>
      <xsd:enumeration value="2008p2p"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimeOrderEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimeOrderEnum element describes the temporal ordering of
        instances of digital data (e.g., measurement data) within a field
        (defined by a DataStructureFieldRef element or a
        DataStructureFieldSetRef element).
      </xsd:documentation>
      <xsd:documentation>
        The TimeOrderEnum element is an enumeration that can be set to
        one of the following values: "IncreasingTemporal",
        "DecreasingTemporal", "Simultaneous", or "Unspecified"
      </xsd:documentation>
      <xsd:documentation>
        The value of "IncreasingTemporal" means that subsequent
        instances of data (e.g., measurement data) occur later in time.
        Conversely, "DecreasingTemporal" means that subsequent instances of
        data (e.g., measurement data) occur earlier in time.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="IncreasingTemporal"/>
      <xsd:enumeration value="DecreasingTemporal"/>
      <xsd:enumeration value="Simultaneous"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="NetworkTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:NetworkType element describes the type of the
        containing Network element.  The mdl:NetworkType element is an
        enumeration that can be set to one of the following values:
        "RangeNetwork", "TmNS", "TestArticleNetwork", "VehicleNetwork",
        "GroundOperationsNetwork", "GroundNetwork", "RangeOperationsNetwork",
        "MissionControlRoomNetwork", "RadioAccessNetwork",
        "AntennaSiteNetwork", or "GenericNetwork"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="TestArticleNetwork"/>
      <xsd:enumeration value="VehicleNetwork"/>
      <xsd:enumeration value="GroundNetwork"/>
      <xsd:enumeration value="RangeOperationsNetwork"/>
      <xsd:enumeration value="MissionControlRoomNetwork"/>
      <xsd:enumeration value="RadioAccessNetwork"/>
      <xsd:enumeration value="AntennaSiteNetwork"/>
      <xsd:enumeration value="GenericNetwork"/>
      <xsd:enumeration value="TmNS"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="MeasurementTypesType">
    <xsd:sequence>
      <xsd:element name="MeasurementType" type="MeasurementTypeEnumExtType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementTypeEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementTypeEnumExtType provides an extensible enumeration.  If
        the value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the string representing the extended
        enumeration value. If the value is any other enumeration, the
        "Extension" attribute further specifies the enumeration's properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="MeasurementTypeEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="MeasurementTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementType element is an enumeration that describes the
        basic kind of measurement.  Some example values are Analog, Discrete,
        DigitalBus, Computed, Time, Video, etc.
      </xsd:documentation>
      <xsd:documentation>
        If "Analog" or "Discrete" is selected, the AnalogAttributes
        element shall be used to describe the Measurement element.  If
        "DigitalBus" or "Computed" is selected, the DigitalAttributes element
        shall be used to describe the Measurement element.
      </xsd:documentation>
      <xsd:documentation>
        If "Time" is selected, the TimeAttributes element shall be used
        to describe the Measurement element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Analog"/>
      <xsd:enumeration value="Discrete"/>
      <xsd:enumeration value="DigitalBus"/>
      <xsd:enumeration value="Computed"/>
      <xsd:enumeration value="Time"/>
      <xsd:enumeration value="Video"/>
      <xsd:enumeration value="Overhead"/>
      <xsd:enumeration value="Constant"/>
      <xsd:enumeration value="Audio"/>
      <xsd:enumeration value="Acquired"/>
      <xsd:enumeration value="IU"/>
      <xsd:enumeration value="EU"/>
      <xsd:enumeration value="Raw"/>
      <xsd:enumeration value="Transport"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DeliveryClassEnum">
    <xsd:annotation>
      <xsd:documentation>
        The DeliveryClass element is an enumeration of type
        mdl:DeliveryClassEnum that can be set to one of the following values:
        "Voice", "FlightSafety", or "BestEffort"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Voice"/>
      <xsd:enumeration value="FlightSafety"/>
      <xsd:enumeration value="BestEffort"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="EndiannessEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:EndiannessEnum element is an enumeration that can be
        set to one of the following values: LittleEndian or BigEndian
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BigEndian"/>
      <xsd:enumeration value="LittleEndian"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="PortDirectionEnum">
    <xsd:annotation>
      <xsd:documentation>
        The PortDirection element indicates the directionality of the
        flow of content through the interface described by a Port element.
        The PortDirection element is an enumeration that can be set to one of
        the following values: Input, Output, Bidirectional, Unspecified
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Input"/>
      <xsd:enumeration value="Output"/>
      <xsd:enumeration value="Bidirectional"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MediumEnum">
    <xsd:annotation>
      <xsd:documentation>
        The Medium element describes the physical medium used by the
        port to transfer data.  The Medium element is an enumeration that can
        be set to one of the following values: Copper, Fiber, Wireless
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Copper"/>
      <xsd:enumeration value="Fiber"/>
      <xsd:enumeration value="Wireless"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimescaleEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimescaleEnum element describes the timescale of the
        timestamp defined by the TimestampDefinition element.  The timescale
        describes the division of time into measurable units and the
        historical reference or epoch that specifies the starting point (i.e.,
        time "0") from which time progresses.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="GPS"/>
      <xsd:enumeration value="UTC"/>
      <xsd:enumeration value="LORAN"/>
      <xsd:enumeration value="TAI"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="DigitalEncodingEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The DigitalEncodingEnumExtType provides an extensible enumeration.
        If the value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the string representing the extended
        enumeration value. If the value is any other enumeration, the
        "Extension" attribute further specifies the enumeration's properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="DigitalEncodingEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="DigitalEncodingEnum">
    <xsd:annotation>
      <!-- SAK: fix documentation -->
      <xsd:documentation>
        The DigitalEncodingEnum element is an enumeration that can be
        set to one of the following values: "BCD", "Two'sComplement",
        "One'sComplement", "UnsignedBinary", "SignedBinary",
        "IEEE754SinglePrecision",
        "IEEE754DoublePrecision"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BCD"/>
      <!-- keep apostrophes? -->
      <xsd:enumeration value="TwosComplement"/>
      <xsd:enumeration value="OnesComplement"/>
      <xsd:enumeration value="UnsignedBinary"/>
      <xsd:enumeration value="SignedBinary"/>
      <xsd:enumeration value="IEEE754SinglePrecision"/>
      <xsd:enumeration value="IEEE754DoublePrecision"/>
      <xsd:enumeration value="MILSTD1750ASinglePrecision"/>
      <xsd:enumeration value="MILSTD1750ADoublePrecision"/>
      <xsd:enumeration value="DECSinglePrecision"/>
      <xsd:enumeration value="DECDoublePrecision"/>
      <xsd:enumeration value="DECGDoublePrecision"/>
      <xsd:enumeration value="IBMSinglePrecision"/>
      <xsd:enumeration value="IBMDoublePrecision"/>
      <xsd:enumeration value="TISinglePrecision"/>
      <xsd:enumeration value="TIExtendedPrecision"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ShiftTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ShiftType element describes what type of bitwise shift to
        perform and the direction in which to shift the input data bits.  The
        supported shift types are "Arithmetic", "Logical", and "Circular", and
        bits can be shifted either "left" or "right". The ShiftType element is
        an enumeration that can be set to one of the following values:
        "ArithmeticLeft", "ArithmeticRight", "LogicalLeft", "LogicalRight",
        "CircularLeft", "CircularRight"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ArithmeticLeft"/>
      <xsd:enumeration value="ArithmeticRight"/>
      <xsd:enumeration value="LogicalLeft"/>
      <xsd:enumeration value="LogicalRight"/>
      <xsd:enumeration value="CircularLeft"/>
      <xsd:enumeration value="CircularRight"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="BandTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The BandType element is an enumeration that can be set to one
        of the following values: PassBand, StopBand, TransitionBand
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PassBand"/>
      <xsd:enumeration value="TransitionBand"/>
      <xsd:enumeration value="StopBand"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="LoggingLevelEnum">
    <xsd:annotation>
      <xsd:documentation>
        The LoggingLevel element indicates the current logging level
        mask settings.  All TmNS components shall have logging capabilities.
        TmNS components shall implement the following six logging levels, and
        the TmNSApp shall enable the specified level and all levels above the
        specified level.
      </xsd:documentation>
      <xsd:documentation>
        1. Trace (the least serious)
      </xsd:documentation>
      <xsd:documentation>
        2. Debug
      </xsd:documentation>
      <xsd:documentation>
        3. Info
      </xsd:documentation>
      <xsd:documentation>
        4. Warning
      </xsd:documentation>
      <xsd:documentation>
        5. Error
      </xsd:documentation>
      <xsd:documentation>
        6. Critical (the most serious)
      </xsd:documentation>
      <xsd:documentation>
        7. None (no logging will be recorded)
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Trace"/>
      <xsd:enumeration value="Debug"/>
      <xsd:enumeration value="Info"/>
      <xsd:enumeration value="Warning"/>
      <xsd:enumeration value="Error"/>
      <xsd:enumeration value="Critical"/>
      <xsd:enumeration value="None"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TrackingModeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TrackingMode element indicates the operating mode of the
        ACU tracking system. The individual settings are described below:
      </xsd:documentation>
      <xsd:documentation>
        Standby: servo rate at zero, brakes applied, no power to servo
        amps.
      </xsd:documentation>
      <xsd:documentation>
        Manual: servo rate at zero, brakes released, power applied to
        servo amps.
      </xsd:documentation>
      <xsd:documentation>
        Search: Single-axis movements (Sector) or Dual-axis (Raster)
        based on Center position angle, range of travel, step angle, and
        rate. Output voltage and polarity is based on direction and range in
        degrees between the actual position of the pedestal and the commanded
        angle. As the error decreases, so does the rate voltage.
      </xsd:documentation>
      <xsd:documentation>
        Slave (Point): output voltage and polarity is based on
        direction and range in degrees between the actual position of the
        pedestal and the commanded angle. As the error decreases, so does the
        rate voltage.
      </xsd:documentation>
      <xsd:documentation>
        Autotrack-Auto Acquire: Stays in the previous mode the antenna
        control unit (ACU) was in prior to selection of Autotrack and waits
        until the pre-set automatic gain control (AGC) threshold is exceeded,
        then enters into Autotrack as long as the AGC levels are above
        threshold. Utilizes the Amplitude Modulator (AM) and Scan References
        to demodulate into Servo Rate Error.
      </xsd:documentation>
      <xsd:documentation>
        Autotrack-Forced: Enters into Autotrack regardless of AGC
        levels and threshold.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Standby"/>
      <xsd:enumeration value="Manual"/>
      <xsd:enumeration value="Search"/>
      <xsd:enumeration value="Slave"/>
      <xsd:enumeration value="AutoTrackAutoAcquire"/>
      <xsd:enumeration value="AutoTrackForced"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SSTModulationEnum">
    <xsd:annotation>
      <xsd:documentation>
        The SSTModulationEnum element indicates the modulation
        employed by the SST transmitter or receiver.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PCM-FM"/>
      <xsd:enumeration value="SOQPSK-TG FQPSK-JR FQPSK-B"/>
      <xsd:enumeration value="ARTM CPM"/>
      <xsd:enumeration value="Off"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="NonZeroLengthType">
    <xsd:annotation>
      <xsd:documentation>
        The NonZeroLengthType defined a string which cannot be left
        empty for purposes such as RoleIDs.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:token">
      <xsd:minLength value="1"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="DataProcessingType">
    <xsd:annotation>
      <xsd:documentation>
        The DataProcessingType contains a list of reusable data
        processing functions and a set of mappings from input measurements
        to result measurements using those functions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Functions" type="FunctionsType" minOccurs="0"/>
      <xsd:element name="FunctionMappings" type="FunctionMappingsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FunctionsType">
    <xsd:annotation>
      <xsd:documentation>
        The FunctionsType contains a list of reusable data processing
        functions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Function" type="FunctionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FunctionType">
    <xsd:annotation>
      <xsd:documentation>
        A Function element is a reusable data processing function.
      </xsd:documentation>
      <xsd:documentation>
        The InputCount element is used to define how many input measurements the
        Function takes in order to complete its calculation.
      </xsd:documentation>
      <xsd:documentation>
        The UpdateFrequency element is used to define when the ResultMeasurement
        should be updated.
      </xsd:documentation>
      <xsd:documentation>
        The Algorithm element defines the algorithm used to calculate the value
        of the ResultMeasurement from the InputMeasurements.
      </xsd:documentation>
      <xsd:documentation>
        The IfThen element can be used as a replacement for the Algorithm
        element when a calculation must be used to determine which
        ResultMeasurement will be used.
      </xsd:documentation>
      <xsd:documentation>
        The ExternalScript element provides a mechanism for supplying an
        algorithm in a structure and language external to MDL's.
      </xsd:documentation>
      <xsd:documentation>
        The LookupTable element provides a structure for functions that
        implement a lookup table, defined here as a set of table entries where
        each table entry maps an input value or range of input values to a
        single output value.
      </xsd:documentation>
      <xsd:documentation>
        The Polynomial element provides a structure for functions that implement
        a polynomial, defined here as two sets of terms, each term containing a
        decimal coefficient and exponent, and each set defining the numerator or
        denominator of the function.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="InputCount" type="xsd:nonNegativeInteger"/>
      <xsd:element name="UpdateFrequency" type="UpdateFrequencyType"/>
      <xsd:choice>
        <xsd:element name="Algorithm" type="AlgorithmType"/>
        <xsd:element name="ConditionalBlock" type="ConditionalBlockType">
          <xsd:unique name="UniqueConditionalBlockIndex">
            <xsd:selector xpath="mdl:If | mdl:ElseIf | mdl:Else"/>
            <xsd:field xpath="@Index"/>
          </xsd:unique>
        </xsd:element>
        <xsd:element name="ExternalScript" type="ExternalScriptType"/>
        <xsd:element name="LookupTable" type="LookupTableType"/>
        <xsd:element name="Polynomial" type="PolynomialType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="UpdateFrequencyType">
    <xsd:annotation>
      <xsd:documentation>
        The UpdateFrequencyType is used to define when a Function should update
        its result. IfAny means the result shall be updated when any input to
        the function receives a new value. IfAll means the result shall only be
        updated when all the input measurements have received new values since
        the previous result was calculated. Triggered means the result shall be
        updated when any input measurement defined as a trigger is updated.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="IfAny"/>
      <xsd:enumeration value="IfAll"/>
      <xsd:enumeration value="Triggered"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="ConditionalBlockType">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionalBlockType is used to define a conditional block which 
        determines the measurement that will be output from a data processing
        function.
      </xsd:documentation>
      <xsd:documentation>
        The If element contains the initial condition and a result to output if
        the condition is true.
      </xsd:documentation>
      <xsd:documentation>
        The ElseIf element contains a condition to test if none of the previous
        elements contained a condition that evaluated to True.  A result is
        output if the condition is True. This element is optional as well as
        unbounded.
      </xsd:documentation>
      <xsd:documentation>
        The Else element contains the resulting algorithm if all previous
        conditions were False. This element is optional, so that a measurement
        may only conditionally result from the function.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="If" type="ConditionalType"/>
      <xsd:element name="ElseIf" type="ConditionalType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Else" type="ElseType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ConditionalType">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionalType is used to define a conditional assignement which 
        determines the measurement that will be output from a data processing
        function.
      </xsd:documentation>
      <xsd:documentation>
        The Condition element contains a condition, which shall return
        True/False.
      </xsd:documentation>
      <xsd:documentation>
        The Result element contains the result to be returned if the condition
        is True.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Condition" type="AlgorithmType"/>
      <xsd:element name="Result" type="AlgorithmType"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ElseType">
    <xsd:annotation>
      <xsd:documentation>
        The ElseType is used to define a default assignment if none of the
        conditionals before the else were true.
      </xsd:documentation>
      <xsd:documentation>
        The Result element contains the result to be returned.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Result" type="AlgorithmType"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="AlgorithmType">
    <xsd:annotation>
      <xsd:documentation>
        The AlgorithmType contains a string of the format described in
        IRIG 106 Appendix P: Derived Parameter Specification.  Note that this
        grammar is too complex to validate within XML, so a simple string
        datatype has been used, and validation of this field is left up to the
        processor of the MDL instance document.
      </xsd:documentation>
      <xsd:documentation>
        If a constant value with units is required, and traceability of the
        specific units is required which prevents the use of a unitless numeric
        constant, a constant value measurement with the desired units can be
        used.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:complexType name="ExternalScriptType">
    <xsd:annotation>
      <xsd:documentation>
        The ScriptingLanguage element containts the name and version of the
        scripting language used.
      </xsd:documentation>
      <xsd:documentation>
        The GenericParameter element can be used as a container for an external
        script in a vendor-defined language, as well as any other information
        required by the system using this data, such as calling procedure.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ScriptingLanguage" type="ScriptingLanguageEnumExtType"/>
      <xsd:element name="GenericParameter" type="GenericParameterType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ScriptingLanguageEnumExtType">
    <xsd:annotation>
      <xsd:documentation>
        The ScriptingLanguageEnumExtType provides an extensible enumeration.  If
        the value of the enumeration is "Extension", the attribute named
        "Extension" shall contain the chosen language's name and version.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="ScriptingLanguageEnum">
        <xsd:attribute name="Extension" type="xsd:string"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:simpleType name="ScriptingLanguageEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ScriptingLanguageEnum element describes the language and version of
        the scripting language used. If the scripting language used is not a
        member of the list, the "Extension" value of this enumeration shall be
        chosen.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Python 3.5.1"/>
      <xsd:enumeration value="Python 2.7.11"/>
      <xsd:enumeration value="ECMAScript 6"/>
      <xsd:enumeration value="ECMAScript 5.1"/>
      <xsd:enumeration value="Matlab R2016a"/>
      <xsd:enumeration value="Java 8"/>
      <xsd:enumeration value="Extension"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="LookupTableType">
    <xsd:annotation>
      <xsd:documentation>
        The LookupTable element describes a lookup table where each
        table entry maps an input value or range of input values to a single
        output value. The LookupTable element shall accept input data from a
        single input measurement, and the LookupTable element shall produce
        output data to a single output measurement.  
      </xsd:documentation>
      <xsd:documentation>
        If any LookupTableEntry has an InputValue that is equal to 
        "PositiveInfinity", then the OutputValue from that entry 
        will be used for any input greater than the highest defined 
        LookupTableEntry's InputValue. If any LookupTableEntry has 
        an InputValue that is equal to "NegativeInfinity", then the
        OutputValue from that entry will be used for any input less than 
        the lowest defined LookupTableEntry's InputValue. 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0"/>
      <xsd:element name="LookupTableEntry" type="LookupTableEntryType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LookupTableEntryType">
    <xsd:annotation>
      <xsd:documentation>
        The LookupTableEntry element describes an entry in the lookup
        table that describes the mapping of a range of input values to a
        specific output value. The InputValue element describes a specific
        input value, that maps to the output value described by the
        OutputValue element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="InputValue" type="TableInputType"/>
      <xsd:element name="OutputValue" type="xsd:double"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:simpleType name="TableInputType">
    <xsd:union memberTypes="InfinityEnum xsd:double"/>
  </xsd:simpleType>
  
  <xsd:simpleType name="InfinityEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PositiveInfinity"/>
      <xsd:enumeration value="NegativeInfinity"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="PolynomialType">
    <xsd:annotation>
      <xsd:documentation>
        The Polynomial element describes two sets of terms, each term 
        containing a decimal coefficient and exponent, and each set 
        defining the numerator or denominator of the function.
        The Polynomial element shall accept input data from a
        single input measurement, and the Polynomial element shall produce
        output data to a single output measurement.  
      </xsd:documentation>
      <xsd:documentation>
        The Numerator element describes the numerator of the
        Polynomial element as the summation of single variable
        polynomial terms. The Denominator element describes 
        the denominator of the Polynomial element as the summation
        of single variable polynomial terms.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Numerator" type="PolynomialTermsType"/>
      <xsd:element name="Denominator" type="PolynomialTermsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PolynomialTermsType">
    <xsd:annotation>
      <xsd:documentation>
        The PolynomialTerms element describes a single variable
        polynomial term.  The Term element describes such a term as a
        coefficient multiplied by a variable of interest raised to an
        exponent.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Term" type="TermType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TermType">
    <xsd:annotation>
      <xsd:documentation>
        The Term contains a Coefficient and an Exponent.  The Exponent
        is applied to the input of the Polynomial, the result of
        which is multiplied by the Coefficient.  If the Term describes a
        single constant term of a polynomial, the Exponent shall
        have the value of '0'.  For the case where the term is equivalent to a
        constant 'A' multiplied by the input 'x', the Exponent shall have the
        value '1'.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Coefficient" type="xsd:double"/>
      <xsd:element name="Exponent" type="xsd:double"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FunctionMappingsType">
    <xsd:annotation>
      <xsd:documentation>
        The FunctionMappingsType contains a list of FunctionMapping
        elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FunctionMapping" type="FunctionMappingType" maxOccurs="unbounded">
        <xsd:unique name="UniqueResultMeasurementIndex">
          <xsd:selector xpath="mdl:ResultMeasurement"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FunctionMappingType">
    <xsd:annotation>
      <xsd:documentation>
        The FunctionMappingType is used for mapping data processing
        functions from input measurements to result measurements.
      </xsd:documentation>
      <xsd:documentation>
        If the function's UpdateFrequency is "Triggered", the TriggerMeasurement
        may be used to define an external trigger for the function.
      </xsd:documentation>
      <xsd:documentation>
        The FunctionRef element points to the function being mapped.
      </xsd:documentation>
      <xsd:documentation>
        The InputMeasurement elements define which measurements will be used
        as inputs to the function.
      </xsd:documentation>
      <xsd:documentation>
        The ResultMeasurement elements define which measurements will be
        used to store the results of the function. There are at most two
        of these, to satisfy the Then and Else possibilities of the
        function.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="FunctionRef" type="FunctionRefType"/>
      <xsd:element name="TriggerMeasurementRefs" type="MeasurementRefsType" minOccurs="0"/>
      <xsd:element name="InputMeasurements" type="InputMeasurementsType"/>
      <xsd:element name="ResultMeasurements" type="ResultMeasurementsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FunctionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The FunctionRefType is used to refer to a particular Function.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="InputMeasurementsType">
    <xsd:annotation>
      <xsd:documentation>
        The InputMeasurementsType element is the top-level container for an unbounded
        list of InputMeasurement elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="InputMeasurement" type="InputMeasurementType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="InputMeasurementType">
    <xsd:annotation>
      <xsd:documentation>
        The InputMeasurementType is used to define input measurements
        into a function.
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementRef element references the desired input
        measurement.
      </xsd:documentation>
      <xsd:documentation>
        The Variable element defines the variable which will be replaced
        with the measurement's value in the function's algorithm(s). If
        the function is a LookupTable or Polynomial type, the Variable
        element is not required.
      </xsd:documentation>
      <xsd:documentation>
        The Trigger element defines the input measurement as a trigger,
        to be used for functions whose UpdateFrequency has been defined
        as "Triggered".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementRef" type="MeasurementRefType"/>
      <xsd:element name="Variable" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Trigger" type="xsd:boolean" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

    <xsd:complexType name="ResultMeasurementsType">
    <xsd:annotation>
      <xsd:documentation>
        The ResultMeasurementsType element is the top-level container for an
        unbounded list of ResultMeasurement elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ResultMeasurement" type="ResultMeasurementType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="ResultMeasurementType">
    <xsd:annotation>
      <xsd:documentation>
        The ResultMeasurementType is used to define which measurements
        get their values from the result of the function.
      </xsd:documentation>
      <xsd:documentation>
        The MeasurementRef element references the desired result
        measurement.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="MeasurementRef" type="MeasurementRefType"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>
      TODO List
    </xsd:documentation>
    <xsd:documentation>
      1. After constraints are standardized, add constraint for Package Time
         Measurement Scoping Rules, in IRIG 106 Chapter 24.
    </xsd:documentation>
    <xsd:documentation>
      2. ExternalScript needs to be standardized.
    </xsd:documentation>
    <xsd:documentation>
      3. For the TrafficFilterCondition element we may want to add other types
         of 'symbolic' conditions, like "match packet against a range of DSCPs
         (class)" "match packet against an IPv4 header field value" "match
         packet against an IPv6 header field value" "match packet against a TCP
         header field value" "match packet against a UDP header field value"
         "match packet against a ICMP header field value"
    </xsd:documentation>
    <xsd:documentation>
      4. The HandoffRule element is a work in progress and may require some
         refinement.
    </xsd:documentation>
  </xsd:annotation>
</xsd:schema>
